/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.7.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// ComponentResourceLimitApiService ComponentResourceLimitApi service
type ComponentResourceLimitApiService service

type ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest struct {
	ctx                 context.Context
	ApiService          *ComponentResourceLimitApiService
	page                *int32
	itemsPerPage        *int32
	projectTypeVersion  *string
	projectTypeVersion2 *[]string
	resourceType        *string
	resourceType2       *[]string
	componentVersion    *string
	componentVersion2   *[]string
}

// The collection page number
func (r ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest) Page(page int32) ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest) ProjectTypeVersion(projectTypeVersion string) ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest {
	r.projectTypeVersion = &projectTypeVersion
	return r
}

func (r ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest) ProjectTypeVersion2(projectTypeVersion2 []string) ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest {
	r.projectTypeVersion2 = &projectTypeVersion2
	return r
}

func (r ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest) ResourceType(resourceType string) ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest {
	r.resourceType = &resourceType
	return r
}

func (r ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest) ResourceType2(resourceType2 []string) ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest {
	r.resourceType2 = &resourceType2
	return r
}

func (r ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest) ComponentVersion(componentVersion string) ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest {
	r.componentVersion = &componentVersion
	return r
}

func (r ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest) ComponentVersion2(componentVersion2 []string) ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest {
	r.componentVersion2 = &componentVersion2
	return r
}

func (r ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest) Execute() ([]ComponentResourceLimit, *http.Response, error) {
	return r.ApiService.ApiComponentResourceLimitsGetCollectionExecute(r)
}

/*
ApiComponentResourceLimitsGetCollection Retrieves the collection of ComponentResourceLimit resources.

Retrieves the collection of ComponentResourceLimit resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest
*/
func (a *ComponentResourceLimitApiService) ApiComponentResourceLimitsGetCollection(ctx context.Context) ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest {
	return ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ComponentResourceLimit
func (a *ComponentResourceLimitApiService) ApiComponentResourceLimitsGetCollectionExecute(r ComponentResourceLimitApiApiComponentResourceLimitsGetCollectionRequest) ([]ComponentResourceLimit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ComponentResourceLimit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentResourceLimitApiService.ApiComponentResourceLimitsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_resource_limits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	if r.projectTypeVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectTypeVersion", r.projectTypeVersion, "")
	}
	if r.projectTypeVersion2 != nil {
		t := *r.projectTypeVersion2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "projectTypeVersion[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "projectTypeVersion[]", t, "multi")
		}
	}
	if r.resourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceType", r.resourceType, "")
	}
	if r.resourceType2 != nil {
		t := *r.resourceType2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "resourceType[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "resourceType[]", t, "multi")
		}
	}
	if r.componentVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "componentVersion", r.componentVersion, "")
	}
	if r.componentVersion2 != nil {
		t := *r.componentVersion2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "componentVersion[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "componentVersion[]", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComponentResourceLimitApiApiComponentResourceLimitsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *ComponentResourceLimitApiService
	id         string
}

func (r ComponentResourceLimitApiApiComponentResourceLimitsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiComponentResourceLimitsIdDeleteExecute(r)
}

/*
ApiComponentResourceLimitsIdDelete Removes the ComponentResourceLimit resource.

Removes the ComponentResourceLimit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ComponentResourceLimit identifier
	@return ComponentResourceLimitApiApiComponentResourceLimitsIdDeleteRequest
*/
func (a *ComponentResourceLimitApiService) ApiComponentResourceLimitsIdDelete(ctx context.Context, id string) ComponentResourceLimitApiApiComponentResourceLimitsIdDeleteRequest {
	return ComponentResourceLimitApiApiComponentResourceLimitsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ComponentResourceLimitApiService) ApiComponentResourceLimitsIdDeleteExecute(r ComponentResourceLimitApiApiComponentResourceLimitsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentResourceLimitApiService.ApiComponentResourceLimitsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_resource_limits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ComponentResourceLimitApiApiComponentResourceLimitsIdGetRequest struct {
	ctx        context.Context
	ApiService *ComponentResourceLimitApiService
	id         string
}

func (r ComponentResourceLimitApiApiComponentResourceLimitsIdGetRequest) Execute() (*ComponentResourceLimit, *http.Response, error) {
	return r.ApiService.ApiComponentResourceLimitsIdGetExecute(r)
}

/*
ApiComponentResourceLimitsIdGet Retrieves a ComponentResourceLimit resource.

Retrieves a ComponentResourceLimit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ComponentResourceLimit identifier
	@return ComponentResourceLimitApiApiComponentResourceLimitsIdGetRequest
*/
func (a *ComponentResourceLimitApiService) ApiComponentResourceLimitsIdGet(ctx context.Context, id string) ComponentResourceLimitApiApiComponentResourceLimitsIdGetRequest {
	return ComponentResourceLimitApiApiComponentResourceLimitsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ComponentResourceLimit
func (a *ComponentResourceLimitApiService) ApiComponentResourceLimitsIdGetExecute(r ComponentResourceLimitApiApiComponentResourceLimitsIdGetRequest) (*ComponentResourceLimit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ComponentResourceLimit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentResourceLimitApiService.ApiComponentResourceLimitsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_resource_limits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComponentResourceLimitApiApiComponentResourceLimitsIdPatchRequest struct {
	ctx                    context.Context
	ApiService             *ComponentResourceLimitApiService
	componentResourceLimit *ComponentResourceLimit
	id                     string
}

// The updated ComponentResourceLimit resource
func (r ComponentResourceLimitApiApiComponentResourceLimitsIdPatchRequest) ComponentResourceLimit(componentResourceLimit ComponentResourceLimit) ComponentResourceLimitApiApiComponentResourceLimitsIdPatchRequest {
	r.componentResourceLimit = &componentResourceLimit
	return r
}

func (r ComponentResourceLimitApiApiComponentResourceLimitsIdPatchRequest) Execute() (*ComponentResourceLimit, *http.Response, error) {
	return r.ApiService.ApiComponentResourceLimitsIdPatchExecute(r)
}

/*
ApiComponentResourceLimitsIdPatch Updates the ComponentResourceLimit resource.

Updates the ComponentResourceLimit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ComponentResourceLimit identifier
	@return ComponentResourceLimitApiApiComponentResourceLimitsIdPatchRequest
*/
func (a *ComponentResourceLimitApiService) ApiComponentResourceLimitsIdPatch(ctx context.Context, id string) ComponentResourceLimitApiApiComponentResourceLimitsIdPatchRequest {
	return ComponentResourceLimitApiApiComponentResourceLimitsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ComponentResourceLimit
func (a *ComponentResourceLimitApiService) ApiComponentResourceLimitsIdPatchExecute(r ComponentResourceLimitApiApiComponentResourceLimitsIdPatchRequest) (*ComponentResourceLimit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ComponentResourceLimit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentResourceLimitApiService.ApiComponentResourceLimitsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_resource_limits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentResourceLimit == nil {
		return localVarReturnValue, nil, reportError("componentResourceLimit is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentResourceLimit
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComponentResourceLimitApiApiComponentResourceLimitsIdPutRequest struct {
	ctx                    context.Context
	ApiService             *ComponentResourceLimitApiService
	componentResourceLimit *ComponentResourceLimit
	id                     string
}

// The updated ComponentResourceLimit resource
func (r ComponentResourceLimitApiApiComponentResourceLimitsIdPutRequest) ComponentResourceLimit(componentResourceLimit ComponentResourceLimit) ComponentResourceLimitApiApiComponentResourceLimitsIdPutRequest {
	r.componentResourceLimit = &componentResourceLimit
	return r
}

func (r ComponentResourceLimitApiApiComponentResourceLimitsIdPutRequest) Execute() (*ComponentResourceLimit, *http.Response, error) {
	return r.ApiService.ApiComponentResourceLimitsIdPutExecute(r)
}

/*
ApiComponentResourceLimitsIdPut Replaces the ComponentResourceLimit resource.

Replaces the ComponentResourceLimit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ComponentResourceLimit identifier
	@return ComponentResourceLimitApiApiComponentResourceLimitsIdPutRequest
*/
func (a *ComponentResourceLimitApiService) ApiComponentResourceLimitsIdPut(ctx context.Context, id string) ComponentResourceLimitApiApiComponentResourceLimitsIdPutRequest {
	return ComponentResourceLimitApiApiComponentResourceLimitsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ComponentResourceLimit
func (a *ComponentResourceLimitApiService) ApiComponentResourceLimitsIdPutExecute(r ComponentResourceLimitApiApiComponentResourceLimitsIdPutRequest) (*ComponentResourceLimit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ComponentResourceLimit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentResourceLimitApiService.ApiComponentResourceLimitsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_resource_limits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentResourceLimit == nil {
		return localVarReturnValue, nil, reportError("componentResourceLimit is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentResourceLimit
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComponentResourceLimitApiApiComponentResourceLimitsPostRequest struct {
	ctx                    context.Context
	ApiService             *ComponentResourceLimitApiService
	componentResourceLimit *ComponentResourceLimit
}

// The new ComponentResourceLimit resource
func (r ComponentResourceLimitApiApiComponentResourceLimitsPostRequest) ComponentResourceLimit(componentResourceLimit ComponentResourceLimit) ComponentResourceLimitApiApiComponentResourceLimitsPostRequest {
	r.componentResourceLimit = &componentResourceLimit
	return r
}

func (r ComponentResourceLimitApiApiComponentResourceLimitsPostRequest) Execute() (*ComponentResourceLimit, *http.Response, error) {
	return r.ApiService.ApiComponentResourceLimitsPostExecute(r)
}

/*
ApiComponentResourceLimitsPost Creates a ComponentResourceLimit resource.

Creates a ComponentResourceLimit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ComponentResourceLimitApiApiComponentResourceLimitsPostRequest
*/
func (a *ComponentResourceLimitApiService) ApiComponentResourceLimitsPost(ctx context.Context) ComponentResourceLimitApiApiComponentResourceLimitsPostRequest {
	return ComponentResourceLimitApiApiComponentResourceLimitsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ComponentResourceLimit
func (a *ComponentResourceLimitApiService) ApiComponentResourceLimitsPostExecute(r ComponentResourceLimitApiApiComponentResourceLimitsPostRequest) (*ComponentResourceLimit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ComponentResourceLimit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentResourceLimitApiService.ApiComponentResourceLimitsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_resource_limits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentResourceLimit == nil {
		return localVarReturnValue, nil, reportError("componentResourceLimit is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentResourceLimit
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
