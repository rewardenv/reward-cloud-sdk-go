/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// EnvironmentApiService EnvironmentApi service
type EnvironmentApiService service

type EnvironmentApiApiEnvironmentsGetCollectionRequest struct {
	ctx                context.Context
	ApiService         *EnvironmentApiService
	page               *int32
	itemsPerPage       *int32
	id                 *int32
	id2                *[]int32
	project            *string
	project2           *[]string
	projectTeamId      *int32
	projectTeamId2     *[]int32
	provider           *string
	provider2          *[]string
	state              *string
	state2             *[]string
	region             *string
	region2            *[]string
	environmentAccess  *string
	environmentAccess2 *[]string
	orderUpdatedAt     *string
}

// The collection page number
func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) Page(page int32) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) Id(id int32) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.id = &id
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) Id2(id2 []int32) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.id2 = &id2
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) Project(project string) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.project = &project
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) Project2(project2 []string) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.project2 = &project2
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) ProjectTeamId(projectTeamId int32) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.projectTeamId = &projectTeamId
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) ProjectTeamId2(projectTeamId2 []int32) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.projectTeamId2 = &projectTeamId2
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) Provider(provider string) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.provider = &provider
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) Provider2(provider2 []string) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.provider2 = &provider2
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) State(state string) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.state = &state
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) State2(state2 []string) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.state2 = &state2
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) Region(region string) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.region = &region
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) Region2(region2 []string) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.region2 = &region2
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) EnvironmentAccess(environmentAccess string) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.environmentAccess = &environmentAccess
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) EnvironmentAccess2(environmentAccess2 []string) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.environmentAccess2 = &environmentAccess2
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) OrderUpdatedAt(orderUpdatedAt string) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	r.orderUpdatedAt = &orderUpdatedAt
	return r
}

func (r EnvironmentApiApiEnvironmentsGetCollectionRequest) Execute() ([]EnvironmentEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsGetCollectionExecute(r)
}

/*
ApiEnvironmentsGetCollection Retrieves the collection of Environment resources.

Retrieves the collection of Environment resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentApiApiEnvironmentsGetCollectionRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsGetCollection(ctx context.Context) EnvironmentApiApiEnvironmentsGetCollectionRequest {
	return EnvironmentApiApiEnvironmentsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []EnvironmentEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsGetCollectionExecute(r EnvironmentApiApiEnvironmentsGetCollectionRequest) ([]EnvironmentEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []EnvironmentEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.id2 != nil {
		t := *r.id2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id[]", t, "multi")
		}
	}
	if r.project != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "project", r.project, "")
	}
	if r.project2 != nil {
		t := *r.project2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "project[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "project[]", t, "multi")
		}
	}
	if r.projectTeamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "project.team.id", r.projectTeamId, "")
	}
	if r.projectTeamId2 != nil {
		t := *r.projectTeamId2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "project.team.id[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "project.team.id[]", t, "multi")
		}
	}
	if r.provider != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provider", r.provider, "")
	}
	if r.provider2 != nil {
		t := *r.provider2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider[]", t, "multi")
		}
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "")
	}
	if r.state2 != nil {
		t := *r.state2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "state[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "state[]", t, "multi")
		}
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "region", r.region, "")
	}
	if r.region2 != nil {
		t := *r.region2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region[]", t, "multi")
		}
	}
	if r.environmentAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environmentAccess", r.environmentAccess, "")
	}
	if r.environmentAccess2 != nil {
		t := *r.environmentAccess2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentAccess[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentAccess[]", t, "multi")
		}
	}
	if r.orderUpdatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order[updatedAt]", r.orderUpdatedAt, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentApiApiEnvironmentsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *EnvironmentApiService
	id         string
}

func (r EnvironmentApiApiEnvironmentsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdDeleteExecute(r)
}

/*
ApiEnvironmentsIdDelete Removes the Environment resource.

Removes the Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return EnvironmentApiApiEnvironmentsIdDeleteRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdDelete(ctx context.Context, id string) EnvironmentApiApiEnvironmentsIdDeleteRequest {
	return EnvironmentApiApiEnvironmentsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EnvironmentApiService) ApiEnvironmentsIdDeleteExecute(r EnvironmentApiApiEnvironmentsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnvironmentApiApiEnvironmentsIdGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentApiService
	id         string
}

func (r EnvironmentApiApiEnvironmentsIdGetRequest) Execute() (*EnvironmentEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdGetExecute(r)
}

/*
ApiEnvironmentsIdGet Retrieves a Environment resource.

Retrieves a Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return EnvironmentApiApiEnvironmentsIdGetRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdGet(ctx context.Context, id string) EnvironmentApiApiEnvironmentsIdGetRequest {
	return EnvironmentApiApiEnvironmentsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdGetExecute(r EnvironmentApiApiEnvironmentsIdGetRequest) (*EnvironmentEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentApiApiEnvironmentsIdPatchRequest struct {
	ctx                        context.Context
	ApiService                 *EnvironmentApiService
	environmentEnvironmentPost *EnvironmentEnvironmentPost
	id                         string
}

// The updated Environment resource
func (r EnvironmentApiApiEnvironmentsIdPatchRequest) EnvironmentEnvironmentPost(environmentEnvironmentPost EnvironmentEnvironmentPost) EnvironmentApiApiEnvironmentsIdPatchRequest {
	r.environmentEnvironmentPost = &environmentEnvironmentPost
	return r
}

func (r EnvironmentApiApiEnvironmentsIdPatchRequest) Execute() (*EnvironmentEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdPatchExecute(r)
}

/*
ApiEnvironmentsIdPatch Updates the Environment resource.

Updates the Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return EnvironmentApiApiEnvironmentsIdPatchRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdPatch(ctx context.Context, id string) EnvironmentApiApiEnvironmentsIdPatchRequest {
	return EnvironmentApiApiEnvironmentsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdPatchExecute(r EnvironmentApiApiEnvironmentsIdPatchRequest) (*EnvironmentEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentEnvironmentPost == nil {
		return localVarReturnValue, nil, reportError("environmentEnvironmentPost is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentEnvironmentPost
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentApiApiEnvironmentsIdPutRequest struct {
	ctx                        context.Context
	ApiService                 *EnvironmentApiService
	environmentEnvironmentPost *EnvironmentEnvironmentPost
	id                         string
}

// The updated Environment resource
func (r EnvironmentApiApiEnvironmentsIdPutRequest) EnvironmentEnvironmentPost(environmentEnvironmentPost EnvironmentEnvironmentPost) EnvironmentApiApiEnvironmentsIdPutRequest {
	r.environmentEnvironmentPost = &environmentEnvironmentPost
	return r
}

func (r EnvironmentApiApiEnvironmentsIdPutRequest) Execute() (*EnvironmentEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdPutExecute(r)
}

/*
ApiEnvironmentsIdPut Replaces the Environment resource.

Replaces the Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return EnvironmentApiApiEnvironmentsIdPutRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdPut(ctx context.Context, id string) EnvironmentApiApiEnvironmentsIdPutRequest {
	return EnvironmentApiApiEnvironmentsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdPutExecute(r EnvironmentApiApiEnvironmentsIdPutRequest) (*EnvironmentEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentEnvironmentPost == nil {
		return localVarReturnValue, nil, reportError("environmentEnvironmentPost is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentEnvironmentPost
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentApiApiEnvironmentsIdcostsGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentApiService
	id         string
}

func (r EnvironmentApiApiEnvironmentsIdcostsGetRequest) Execute() (*EnvironmentEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdcostsGetExecute(r)
}

/*
ApiEnvironmentsIdcostsGet Retrieves a Environment resource.

Retrieves a Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return EnvironmentApiApiEnvironmentsIdcostsGetRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdcostsGet(ctx context.Context, id string) EnvironmentApiApiEnvironmentsIdcostsGetRequest {
	return EnvironmentApiApiEnvironmentsIdcostsGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdcostsGetExecute(r EnvironmentApiApiEnvironmentsIdcostsGetRequest) (*EnvironmentEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdcostsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}/costs"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentApiApiEnvironmentsIdexportDatabasePutRequest struct {
	ctx                        context.Context
	ApiService                 *EnvironmentApiService
	environmentEnvironmentPost *EnvironmentEnvironmentPost
	id                         string
}

// The updated Environment resource
func (r EnvironmentApiApiEnvironmentsIdexportDatabasePutRequest) EnvironmentEnvironmentPost(environmentEnvironmentPost EnvironmentEnvironmentPost) EnvironmentApiApiEnvironmentsIdexportDatabasePutRequest {
	r.environmentEnvironmentPost = &environmentEnvironmentPost
	return r
}

func (r EnvironmentApiApiEnvironmentsIdexportDatabasePutRequest) Execute() (*EnvironmentEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdexportDatabasePutExecute(r)
}

/*
ApiEnvironmentsIdexportDatabasePut Replaces the Environment resource.

Replaces the Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return EnvironmentApiApiEnvironmentsIdexportDatabasePutRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdexportDatabasePut(ctx context.Context, id string) EnvironmentApiApiEnvironmentsIdexportDatabasePutRequest {
	return EnvironmentApiApiEnvironmentsIdexportDatabasePutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdexportDatabasePutExecute(r EnvironmentApiApiEnvironmentsIdexportDatabasePutRequest) (*EnvironmentEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdexportDatabasePut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}/export-database"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentEnvironmentPost == nil {
		return localVarReturnValue, nil, reportError("environmentEnvironmentPost is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentEnvironmentPost
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentApiApiEnvironmentsIdexportMediaPutRequest struct {
	ctx                        context.Context
	ApiService                 *EnvironmentApiService
	environmentEnvironmentPost *EnvironmentEnvironmentPost
	id                         string
}

// The updated Environment resource
func (r EnvironmentApiApiEnvironmentsIdexportMediaPutRequest) EnvironmentEnvironmentPost(environmentEnvironmentPost EnvironmentEnvironmentPost) EnvironmentApiApiEnvironmentsIdexportMediaPutRequest {
	r.environmentEnvironmentPost = &environmentEnvironmentPost
	return r
}

func (r EnvironmentApiApiEnvironmentsIdexportMediaPutRequest) Execute() (*EnvironmentEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdexportMediaPutExecute(r)
}

/*
ApiEnvironmentsIdexportMediaPut Replaces the Environment resource.

Replaces the Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return EnvironmentApiApiEnvironmentsIdexportMediaPutRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdexportMediaPut(ctx context.Context, id string) EnvironmentApiApiEnvironmentsIdexportMediaPutRequest {
	return EnvironmentApiApiEnvironmentsIdexportMediaPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdexportMediaPutExecute(r EnvironmentApiApiEnvironmentsIdexportMediaPutRequest) (*EnvironmentEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdexportMediaPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}/export-media"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentEnvironmentPost == nil {
		return localVarReturnValue, nil, reportError("environmentEnvironmentPost is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentEnvironmentPost
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest struct {
	ctx                   context.Context
	ApiService            *EnvironmentApiService
	id                    string
	templateIri           *string
	project               *string
	provider              *string
	state                 *string
	region                *string
	exportedData          *[]string
	importedData          *[]string
	name                  *string
	cpu                   *int32
	memory                *int32
	storage               *int32
	dataTransferSettings  *string
	isStripDatabase       *bool
	isAllowOutgoingEmails *bool
	isInitSampleData      *bool
	envVar                *[]EnvironmentEnvVarEnvironmentPost
	environmentComponent  *[]EnvironmentComponentEnvironmentPost
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) TemplateIri(templateIri string) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.templateIri = &templateIri
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) Project(project string) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.project = &project
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) Provider(provider string) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.provider = &provider
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) State(state string) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.state = &state
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) Region(region string) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.region = &region
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) ExportedData(exportedData []string) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.exportedData = &exportedData
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) ImportedData(importedData []string) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.importedData = &importedData
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) Name(name string) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.name = &name
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) Cpu(cpu int32) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.cpu = &cpu
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) Memory(memory int32) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.memory = &memory
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) Storage(storage int32) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.storage = &storage
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) DataTransferSettings(dataTransferSettings string) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.dataTransferSettings = &dataTransferSettings
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) IsStripDatabase(isStripDatabase bool) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.isStripDatabase = &isStripDatabase
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) IsAllowOutgoingEmails(isAllowOutgoingEmails bool) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.isAllowOutgoingEmails = &isAllowOutgoingEmails
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) IsInitSampleData(isInitSampleData bool) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.isInitSampleData = &isInitSampleData
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) EnvVar(envVar []EnvironmentEnvVarEnvironmentPost) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.envVar = &envVar
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) EnvironmentComponent(environmentComponent []EnvironmentComponentEnvironmentPost) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	r.environmentComponent = &environmentComponent
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) Execute() (*EnvironmentEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdimportDatabasePostExecute(r)
}

/*
ApiEnvironmentsIdimportDatabasePost Creates a Environment resource.

Creates a Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdimportDatabasePost(ctx context.Context, id string) EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest {
	return EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdimportDatabasePostExecute(r EnvironmentApiApiEnvironmentsIdimportDatabasePostRequest) (*EnvironmentEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdimportDatabasePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}/import-database"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.templateIri != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "templateIri", r.templateIri, "")
	}
	if r.project != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "project", r.project, "")
	}
	if r.provider != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "provider", r.provider, "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "state", r.state, "")
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "region", r.region, "")
	}
	if r.exportedData != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "exportedData", r.exportedData, "csv")
	}
	if r.importedData != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "importedData", r.importedData, "csv")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "")
	}
	if r.cpu != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "cpu", r.cpu, "")
	}
	if r.memory != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "memory", r.memory, "")
	}
	if r.storage != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "storage", r.storage, "")
	}
	if r.dataTransferSettings != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "dataTransferSettings", r.dataTransferSettings, "")
	}
	if r.isStripDatabase != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "isStripDatabase", r.isStripDatabase, "")
	}
	if r.isAllowOutgoingEmails != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "isAllowOutgoingEmails", r.isAllowOutgoingEmails, "")
	}
	if r.isInitSampleData != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "isInitSampleData", r.isInitSampleData, "")
	}
	if r.envVar != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "envVar", r.envVar, "csv")
	}
	if r.environmentComponent != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "environmentComponent", r.environmentComponent, "csv")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentApiApiEnvironmentsIdimportMediaPostRequest struct {
	ctx                   context.Context
	ApiService            *EnvironmentApiService
	id                    string
	templateIri           *string
	project               *string
	provider              *string
	state                 *string
	region                *string
	exportedData          *[]string
	importedData          *[]string
	name                  *string
	cpu                   *int32
	memory                *int32
	storage               *int32
	dataTransferSettings  *string
	isStripDatabase       *bool
	isAllowOutgoingEmails *bool
	isInitSampleData      *bool
	envVar                *[]EnvironmentEnvVarEnvironmentPost
	environmentComponent  *[]EnvironmentComponentEnvironmentPost
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) TemplateIri(templateIri string) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.templateIri = &templateIri
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) Project(project string) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.project = &project
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) Provider(provider string) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.provider = &provider
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) State(state string) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.state = &state
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) Region(region string) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.region = &region
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) ExportedData(exportedData []string) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.exportedData = &exportedData
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) ImportedData(importedData []string) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.importedData = &importedData
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) Name(name string) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.name = &name
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) Cpu(cpu int32) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.cpu = &cpu
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) Memory(memory int32) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.memory = &memory
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) Storage(storage int32) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.storage = &storage
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) DataTransferSettings(dataTransferSettings string) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.dataTransferSettings = &dataTransferSettings
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) IsStripDatabase(isStripDatabase bool) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.isStripDatabase = &isStripDatabase
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) IsAllowOutgoingEmails(isAllowOutgoingEmails bool) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.isAllowOutgoingEmails = &isAllowOutgoingEmails
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) IsInitSampleData(isInitSampleData bool) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.isInitSampleData = &isInitSampleData
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) EnvVar(envVar []EnvironmentEnvVarEnvironmentPost) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.envVar = &envVar
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) EnvironmentComponent(environmentComponent []EnvironmentComponentEnvironmentPost) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	r.environmentComponent = &environmentComponent
	return r
}

func (r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) Execute() (*EnvironmentEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdimportMediaPostExecute(r)
}

/*
ApiEnvironmentsIdimportMediaPost Creates a Environment resource.

Creates a Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return EnvironmentApiApiEnvironmentsIdimportMediaPostRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdimportMediaPost(ctx context.Context, id string) EnvironmentApiApiEnvironmentsIdimportMediaPostRequest {
	return EnvironmentApiApiEnvironmentsIdimportMediaPostRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdimportMediaPostExecute(r EnvironmentApiApiEnvironmentsIdimportMediaPostRequest) (*EnvironmentEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdimportMediaPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}/import-media"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.templateIri != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "templateIri", r.templateIri, "")
	}
	if r.project != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "project", r.project, "")
	}
	if r.provider != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "provider", r.provider, "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "state", r.state, "")
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "region", r.region, "")
	}
	if r.exportedData != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "exportedData", r.exportedData, "csv")
	}
	if r.importedData != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "importedData", r.importedData, "csv")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "")
	}
	if r.cpu != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "cpu", r.cpu, "")
	}
	if r.memory != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "memory", r.memory, "")
	}
	if r.storage != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "storage", r.storage, "")
	}
	if r.dataTransferSettings != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "dataTransferSettings", r.dataTransferSettings, "")
	}
	if r.isStripDatabase != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "isStripDatabase", r.isStripDatabase, "")
	}
	if r.isAllowOutgoingEmails != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "isAllowOutgoingEmails", r.isAllowOutgoingEmails, "")
	}
	if r.isInitSampleData != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "isInitSampleData", r.isInitSampleData, "")
	}
	if r.envVar != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "envVar", r.envVar, "csv")
	}
	if r.environmentComponent != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "environmentComponent", r.environmentComponent, "csv")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentApiApiEnvironmentsPostRequest struct {
	ctx                        context.Context
	ApiService                 *EnvironmentApiService
	environmentEnvironmentPost *EnvironmentEnvironmentPost
}

// The new Environment resource
func (r EnvironmentApiApiEnvironmentsPostRequest) EnvironmentEnvironmentPost(environmentEnvironmentPost EnvironmentEnvironmentPost) EnvironmentApiApiEnvironmentsPostRequest {
	r.environmentEnvironmentPost = &environmentEnvironmentPost
	return r
}

func (r EnvironmentApiApiEnvironmentsPostRequest) Execute() (*EnvironmentEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsPostExecute(r)
}

/*
ApiEnvironmentsPost Creates a Environment resource.

Creates a Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentApiApiEnvironmentsPostRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsPost(ctx context.Context) EnvironmentApiApiEnvironmentsPostRequest {
	return EnvironmentApiApiEnvironmentsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EnvironmentEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsPostExecute(r EnvironmentApiApiEnvironmentsPostRequest) (*EnvironmentEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentEnvironmentPost == nil {
		return localVarReturnValue, nil, reportError("environmentEnvironmentPost is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentEnvironmentPost
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
