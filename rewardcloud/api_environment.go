/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// EnvironmentApiService EnvironmentApi service
type EnvironmentApiService service

type ApiApiEnvironmentsGetCollectionRequest struct {
	ctx                context.Context
	ApiService         *EnvironmentApiService
	page               *int32
	itemsPerPage       *int32
	id                 *int32
	id2                *[]int32
	project            *string
	project2           *[]string
	projectTeamId      *int32
	projectTeamId2     *[]int32
	provider           *string
	provider2          *[]string
	state              *string
	state2             *[]string
	region             *string
	region2            *[]string
	environmentAccess  *string
	environmentAccess2 *[]string
	orderUpdatedAt     *string
}

// The collection page number
func (r ApiApiEnvironmentsGetCollectionRequest) Page(page int32) ApiApiEnvironmentsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ApiApiEnvironmentsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ApiApiEnvironmentsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) Id(id int32) ApiApiEnvironmentsGetCollectionRequest {
	r.id = &id
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) Id2(id2 []int32) ApiApiEnvironmentsGetCollectionRequest {
	r.id2 = &id2
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) Project(project string) ApiApiEnvironmentsGetCollectionRequest {
	r.project = &project
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) Project2(project2 []string) ApiApiEnvironmentsGetCollectionRequest {
	r.project2 = &project2
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) ProjectTeamId(projectTeamId int32) ApiApiEnvironmentsGetCollectionRequest {
	r.projectTeamId = &projectTeamId
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) ProjectTeamId2(projectTeamId2 []int32) ApiApiEnvironmentsGetCollectionRequest {
	r.projectTeamId2 = &projectTeamId2
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) Provider(provider string) ApiApiEnvironmentsGetCollectionRequest {
	r.provider = &provider
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) Provider2(provider2 []string) ApiApiEnvironmentsGetCollectionRequest {
	r.provider2 = &provider2
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) State(state string) ApiApiEnvironmentsGetCollectionRequest {
	r.state = &state
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) State2(state2 []string) ApiApiEnvironmentsGetCollectionRequest {
	r.state2 = &state2
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) Region(region string) ApiApiEnvironmentsGetCollectionRequest {
	r.region = &region
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) Region2(region2 []string) ApiApiEnvironmentsGetCollectionRequest {
	r.region2 = &region2
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) EnvironmentAccess(environmentAccess string) ApiApiEnvironmentsGetCollectionRequest {
	r.environmentAccess = &environmentAccess
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) EnvironmentAccess2(environmentAccess2 []string) ApiApiEnvironmentsGetCollectionRequest {
	r.environmentAccess2 = &environmentAccess2
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) OrderUpdatedAt(orderUpdatedAt string) ApiApiEnvironmentsGetCollectionRequest {
	r.orderUpdatedAt = &orderUpdatedAt
	return r
}

func (r ApiApiEnvironmentsGetCollectionRequest) Execute() (*ApiEnvironmentsGetCollection200Response, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsGetCollectionExecute(r)
}

/*
ApiEnvironmentsGetCollection Retrieves the collection of Environment resources.

Retrieves the collection of Environment resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiEnvironmentsGetCollectionRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsGetCollection(ctx context.Context) ApiApiEnvironmentsGetCollectionRequest {
	return ApiApiEnvironmentsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ApiEnvironmentsGetCollection200Response
func (a *EnvironmentApiService) ApiEnvironmentsGetCollectionExecute(r ApiApiEnvironmentsGetCollectionRequest) (*ApiEnvironmentsGetCollection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiEnvironmentsGetCollection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.itemsPerPage != nil {
		localVarQueryParams.Add("itemsPerPage", parameterToString(*r.itemsPerPage, ""))
	}
	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.id2 != nil {
		t := *r.id2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id[]", parameterToString(t, "multi"))
		}
	}
	if r.project != nil {
		localVarQueryParams.Add("project", parameterToString(*r.project, ""))
	}
	if r.project2 != nil {
		t := *r.project2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("project[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("project[]", parameterToString(t, "multi"))
		}
	}
	if r.projectTeamId != nil {
		localVarQueryParams.Add("project.team.id", parameterToString(*r.projectTeamId, ""))
	}
	if r.projectTeamId2 != nil {
		t := *r.projectTeamId2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("project.team.id[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("project.team.id[]", parameterToString(t, "multi"))
		}
	}
	if r.provider != nil {
		localVarQueryParams.Add("provider", parameterToString(*r.provider, ""))
	}
	if r.provider2 != nil {
		t := *r.provider2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider[]", parameterToString(t, "multi"))
		}
	}
	if r.state != nil {
		localVarQueryParams.Add("state", parameterToString(*r.state, ""))
	}
	if r.state2 != nil {
		t := *r.state2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("state[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("state[]", parameterToString(t, "multi"))
		}
	}
	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.region2 != nil {
		t := *r.region2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region[]", parameterToString(t, "multi"))
		}
	}
	if r.environmentAccess != nil {
		localVarQueryParams.Add("environmentAccess", parameterToString(*r.environmentAccess, ""))
	}
	if r.environmentAccess2 != nil {
		t := *r.environmentAccess2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("environmentAccess[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("environmentAccess[]", parameterToString(t, "multi"))
		}
	}
	if r.orderUpdatedAt != nil {
		localVarQueryParams.Add("order[updatedAt]", parameterToString(*r.orderUpdatedAt, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *EnvironmentApiService
	id         string
}

func (r ApiApiEnvironmentsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdDeleteExecute(r)
}

/*
ApiEnvironmentsIdDelete Removes the Environment resource.

Removes the Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return ApiApiEnvironmentsIdDeleteRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdDelete(ctx context.Context, id string) ApiApiEnvironmentsIdDeleteRequest {
	return ApiApiEnvironmentsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EnvironmentApiService) ApiEnvironmentsIdDeleteExecute(r ApiApiEnvironmentsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiEnvironmentsIdGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentApiService
	id         string
}

func (r ApiApiEnvironmentsIdGetRequest) Execute() (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdGetExecute(r)
}

/*
ApiEnvironmentsIdGet Retrieves a Environment resource.

Retrieves a Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return ApiApiEnvironmentsIdGetRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdGet(ctx context.Context, id string) ApiApiEnvironmentsIdGetRequest {
	return ApiApiEnvironmentsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentJsonhalEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdGetExecute(r ApiApiEnvironmentsIdGetRequest) (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentJsonhalEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentsIdPatchRequest struct {
	ctx                        context.Context
	ApiService                 *EnvironmentApiService
	id                         string
	environmentEnvironmentPost *EnvironmentEnvironmentPost
}

// The updated Environment resource
func (r ApiApiEnvironmentsIdPatchRequest) EnvironmentEnvironmentPost(environmentEnvironmentPost EnvironmentEnvironmentPost) ApiApiEnvironmentsIdPatchRequest {
	r.environmentEnvironmentPost = &environmentEnvironmentPost
	return r
}

func (r ApiApiEnvironmentsIdPatchRequest) Execute() (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdPatchExecute(r)
}

/*
ApiEnvironmentsIdPatch Updates the Environment resource.

Updates the Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return ApiApiEnvironmentsIdPatchRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdPatch(ctx context.Context, id string) ApiApiEnvironmentsIdPatchRequest {
	return ApiApiEnvironmentsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentJsonhalEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdPatchExecute(r ApiApiEnvironmentsIdPatchRequest) (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentJsonhalEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentEnvironmentPost == nil {
		return localVarReturnValue, nil, reportError("environmentEnvironmentPost is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentEnvironmentPost
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentsIdPutRequest struct {
	ctx                               context.Context
	ApiService                        *EnvironmentApiService
	id                                string
	environmentJsonhalEnvironmentPost *EnvironmentJsonhalEnvironmentPost
}

// The updated Environment resource
func (r ApiApiEnvironmentsIdPutRequest) EnvironmentJsonhalEnvironmentPost(environmentJsonhalEnvironmentPost EnvironmentJsonhalEnvironmentPost) ApiApiEnvironmentsIdPutRequest {
	r.environmentJsonhalEnvironmentPost = &environmentJsonhalEnvironmentPost
	return r
}

func (r ApiApiEnvironmentsIdPutRequest) Execute() (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdPutExecute(r)
}

/*
ApiEnvironmentsIdPut Replaces the Environment resource.

Replaces the Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return ApiApiEnvironmentsIdPutRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdPut(ctx context.Context, id string) ApiApiEnvironmentsIdPutRequest {
	return ApiApiEnvironmentsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentJsonhalEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdPutExecute(r ApiApiEnvironmentsIdPutRequest) (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentJsonhalEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentJsonhalEnvironmentPost == nil {
		return localVarReturnValue, nil, reportError("environmentJsonhalEnvironmentPost is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentJsonhalEnvironmentPost
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentsIdcostsGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentApiService
	id         string
}

func (r ApiApiEnvironmentsIdcostsGetRequest) Execute() (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdcostsGetExecute(r)
}

/*
ApiEnvironmentsIdcostsGet Retrieves a Environment resource.

Retrieves a Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return ApiApiEnvironmentsIdcostsGetRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdcostsGet(ctx context.Context, id string) ApiApiEnvironmentsIdcostsGetRequest {
	return ApiApiEnvironmentsIdcostsGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentJsonhalEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdcostsGetExecute(r ApiApiEnvironmentsIdcostsGetRequest) (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentJsonhalEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdcostsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}/costs"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentsIdexportDatabasePutRequest struct {
	ctx                               context.Context
	ApiService                        *EnvironmentApiService
	id                                string
	environmentJsonhalEnvironmentPost *EnvironmentJsonhalEnvironmentPost
}

// The updated Environment resource
func (r ApiApiEnvironmentsIdexportDatabasePutRequest) EnvironmentJsonhalEnvironmentPost(environmentJsonhalEnvironmentPost EnvironmentJsonhalEnvironmentPost) ApiApiEnvironmentsIdexportDatabasePutRequest {
	r.environmentJsonhalEnvironmentPost = &environmentJsonhalEnvironmentPost
	return r
}

func (r ApiApiEnvironmentsIdexportDatabasePutRequest) Execute() (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdexportDatabasePutExecute(r)
}

/*
ApiEnvironmentsIdexportDatabasePut Replaces the Environment resource.

Replaces the Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return ApiApiEnvironmentsIdexportDatabasePutRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdexportDatabasePut(ctx context.Context, id string) ApiApiEnvironmentsIdexportDatabasePutRequest {
	return ApiApiEnvironmentsIdexportDatabasePutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentJsonhalEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdexportDatabasePutExecute(r ApiApiEnvironmentsIdexportDatabasePutRequest) (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentJsonhalEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdexportDatabasePut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}/export-database"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentJsonhalEnvironmentPost == nil {
		return localVarReturnValue, nil, reportError("environmentJsonhalEnvironmentPost is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentJsonhalEnvironmentPost
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentsIdexportMediaPutRequest struct {
	ctx                               context.Context
	ApiService                        *EnvironmentApiService
	id                                string
	environmentJsonhalEnvironmentPost *EnvironmentJsonhalEnvironmentPost
}

// The updated Environment resource
func (r ApiApiEnvironmentsIdexportMediaPutRequest) EnvironmentJsonhalEnvironmentPost(environmentJsonhalEnvironmentPost EnvironmentJsonhalEnvironmentPost) ApiApiEnvironmentsIdexportMediaPutRequest {
	r.environmentJsonhalEnvironmentPost = &environmentJsonhalEnvironmentPost
	return r
}

func (r ApiApiEnvironmentsIdexportMediaPutRequest) Execute() (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdexportMediaPutExecute(r)
}

/*
ApiEnvironmentsIdexportMediaPut Replaces the Environment resource.

Replaces the Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return ApiApiEnvironmentsIdexportMediaPutRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdexportMediaPut(ctx context.Context, id string) ApiApiEnvironmentsIdexportMediaPutRequest {
	return ApiApiEnvironmentsIdexportMediaPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentJsonhalEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdexportMediaPutExecute(r ApiApiEnvironmentsIdexportMediaPutRequest) (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentJsonhalEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdexportMediaPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}/export-media"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentJsonhalEnvironmentPost == nil {
		return localVarReturnValue, nil, reportError("environmentJsonhalEnvironmentPost is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentJsonhalEnvironmentPost
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentsIdimportDatabasePostRequest struct {
	ctx                   context.Context
	ApiService            *EnvironmentApiService
	id                    string
	templateIri           *string
	project               *string
	provider              *string
	state                 *string
	region                *string
	exportedData          *[]string
	importedData          *[]string
	name                  *string
	cpu                   *int32
	memory                *int32
	storage               *int32
	dataTransferSettings  *string
	isStripDatabase       *bool
	isAllowOutgoingEmails *bool
	isInitSampleData      *bool
	envVar                *[]EnvironmentEnvVarEnvironmentPost
	environmentComponent  *[]EnvironmentComponentEnvironmentPost
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) TemplateIri(templateIri string) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.templateIri = &templateIri
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) Project(project string) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.project = &project
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) Provider(provider string) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.provider = &provider
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) State(state string) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.state = &state
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) Region(region string) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.region = &region
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) ExportedData(exportedData []string) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.exportedData = &exportedData
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) ImportedData(importedData []string) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.importedData = &importedData
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) Name(name string) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.name = &name
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) Cpu(cpu int32) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.cpu = &cpu
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) Memory(memory int32) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.memory = &memory
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) Storage(storage int32) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.storage = &storage
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) DataTransferSettings(dataTransferSettings string) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.dataTransferSettings = &dataTransferSettings
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) IsStripDatabase(isStripDatabase bool) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.isStripDatabase = &isStripDatabase
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) IsAllowOutgoingEmails(isAllowOutgoingEmails bool) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.isAllowOutgoingEmails = &isAllowOutgoingEmails
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) IsInitSampleData(isInitSampleData bool) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.isInitSampleData = &isInitSampleData
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) EnvVar(envVar []EnvironmentEnvVarEnvironmentPost) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.envVar = &envVar
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) EnvironmentComponent(environmentComponent []EnvironmentComponentEnvironmentPost) ApiApiEnvironmentsIdimportDatabasePostRequest {
	r.environmentComponent = &environmentComponent
	return r
}

func (r ApiApiEnvironmentsIdimportDatabasePostRequest) Execute() (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdimportDatabasePostExecute(r)
}

/*
ApiEnvironmentsIdimportDatabasePost Creates a Environment resource.

Creates a Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return ApiApiEnvironmentsIdimportDatabasePostRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdimportDatabasePost(ctx context.Context, id string) ApiApiEnvironmentsIdimportDatabasePostRequest {
	return ApiApiEnvironmentsIdimportDatabasePostRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentJsonhalEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdimportDatabasePostExecute(r ApiApiEnvironmentsIdimportDatabasePostRequest) (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentJsonhalEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdimportDatabasePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}/import-database"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.templateIri != nil {
		localVarFormParams.Add("templateIri", parameterToString(*r.templateIri, ""))
	}
	if r.project != nil {
		localVarFormParams.Add("project", parameterToString(*r.project, ""))
	}
	if r.provider != nil {
		localVarFormParams.Add("provider", parameterToString(*r.provider, ""))
	}
	if r.state != nil {
		localVarFormParams.Add("state", parameterToString(*r.state, ""))
	}
	if r.region != nil {
		localVarFormParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.exportedData != nil {
		localVarFormParams.Add("exportedData", parameterToString(*r.exportedData, "csv"))
	}
	if r.importedData != nil {
		localVarFormParams.Add("importedData", parameterToString(*r.importedData, "csv"))
	}
	if r.name != nil {
		localVarFormParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.cpu != nil {
		localVarFormParams.Add("cpu", parameterToString(*r.cpu, ""))
	}
	if r.memory != nil {
		localVarFormParams.Add("memory", parameterToString(*r.memory, ""))
	}
	if r.storage != nil {
		localVarFormParams.Add("storage", parameterToString(*r.storage, ""))
	}
	if r.dataTransferSettings != nil {
		localVarFormParams.Add("dataTransferSettings", parameterToString(*r.dataTransferSettings, ""))
	}
	if r.isStripDatabase != nil {
		localVarFormParams.Add("isStripDatabase", parameterToString(*r.isStripDatabase, ""))
	}
	if r.isAllowOutgoingEmails != nil {
		localVarFormParams.Add("isAllowOutgoingEmails", parameterToString(*r.isAllowOutgoingEmails, ""))
	}
	if r.isInitSampleData != nil {
		localVarFormParams.Add("isInitSampleData", parameterToString(*r.isInitSampleData, ""))
	}
	if r.envVar != nil {
		localVarFormParams.Add("envVar", parameterToString(*r.envVar, "csv"))
	}
	if r.environmentComponent != nil {
		localVarFormParams.Add("environmentComponent", parameterToString(*r.environmentComponent, "csv"))
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentsIdimportMediaPostRequest struct {
	ctx                   context.Context
	ApiService            *EnvironmentApiService
	id                    string
	templateIri           *string
	project               *string
	provider              *string
	state                 *string
	region                *string
	exportedData          *[]string
	importedData          *[]string
	name                  *string
	cpu                   *int32
	memory                *int32
	storage               *int32
	dataTransferSettings  *string
	isStripDatabase       *bool
	isAllowOutgoingEmails *bool
	isInitSampleData      *bool
	envVar                *[]EnvironmentEnvVarEnvironmentPost
	environmentComponent  *[]EnvironmentComponentEnvironmentPost
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) TemplateIri(templateIri string) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.templateIri = &templateIri
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) Project(project string) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.project = &project
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) Provider(provider string) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.provider = &provider
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) State(state string) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.state = &state
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) Region(region string) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.region = &region
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) ExportedData(exportedData []string) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.exportedData = &exportedData
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) ImportedData(importedData []string) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.importedData = &importedData
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) Name(name string) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.name = &name
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) Cpu(cpu int32) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.cpu = &cpu
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) Memory(memory int32) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.memory = &memory
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) Storage(storage int32) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.storage = &storage
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) DataTransferSettings(dataTransferSettings string) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.dataTransferSettings = &dataTransferSettings
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) IsStripDatabase(isStripDatabase bool) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.isStripDatabase = &isStripDatabase
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) IsAllowOutgoingEmails(isAllowOutgoingEmails bool) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.isAllowOutgoingEmails = &isAllowOutgoingEmails
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) IsInitSampleData(isInitSampleData bool) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.isInitSampleData = &isInitSampleData
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) EnvVar(envVar []EnvironmentEnvVarEnvironmentPost) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.envVar = &envVar
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) EnvironmentComponent(environmentComponent []EnvironmentComponentEnvironmentPost) ApiApiEnvironmentsIdimportMediaPostRequest {
	r.environmentComponent = &environmentComponent
	return r
}

func (r ApiApiEnvironmentsIdimportMediaPostRequest) Execute() (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsIdimportMediaPostExecute(r)
}

/*
ApiEnvironmentsIdimportMediaPost Creates a Environment resource.

Creates a Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Environment identifier
	@return ApiApiEnvironmentsIdimportMediaPostRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsIdimportMediaPost(ctx context.Context, id string) ApiApiEnvironmentsIdimportMediaPostRequest {
	return ApiApiEnvironmentsIdimportMediaPostRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentJsonhalEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsIdimportMediaPostExecute(r ApiApiEnvironmentsIdimportMediaPostRequest) (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentJsonhalEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsIdimportMediaPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments/{id}/import-media"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.templateIri != nil {
		localVarFormParams.Add("templateIri", parameterToString(*r.templateIri, ""))
	}
	if r.project != nil {
		localVarFormParams.Add("project", parameterToString(*r.project, ""))
	}
	if r.provider != nil {
		localVarFormParams.Add("provider", parameterToString(*r.provider, ""))
	}
	if r.state != nil {
		localVarFormParams.Add("state", parameterToString(*r.state, ""))
	}
	if r.region != nil {
		localVarFormParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.exportedData != nil {
		localVarFormParams.Add("exportedData", parameterToString(*r.exportedData, "csv"))
	}
	if r.importedData != nil {
		localVarFormParams.Add("importedData", parameterToString(*r.importedData, "csv"))
	}
	if r.name != nil {
		localVarFormParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.cpu != nil {
		localVarFormParams.Add("cpu", parameterToString(*r.cpu, ""))
	}
	if r.memory != nil {
		localVarFormParams.Add("memory", parameterToString(*r.memory, ""))
	}
	if r.storage != nil {
		localVarFormParams.Add("storage", parameterToString(*r.storage, ""))
	}
	if r.dataTransferSettings != nil {
		localVarFormParams.Add("dataTransferSettings", parameterToString(*r.dataTransferSettings, ""))
	}
	if r.isStripDatabase != nil {
		localVarFormParams.Add("isStripDatabase", parameterToString(*r.isStripDatabase, ""))
	}
	if r.isAllowOutgoingEmails != nil {
		localVarFormParams.Add("isAllowOutgoingEmails", parameterToString(*r.isAllowOutgoingEmails, ""))
	}
	if r.isInitSampleData != nil {
		localVarFormParams.Add("isInitSampleData", parameterToString(*r.isInitSampleData, ""))
	}
	if r.envVar != nil {
		localVarFormParams.Add("envVar", parameterToString(*r.envVar, "csv"))
	}
	if r.environmentComponent != nil {
		localVarFormParams.Add("environmentComponent", parameterToString(*r.environmentComponent, "csv"))
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentsPostRequest struct {
	ctx                               context.Context
	ApiService                        *EnvironmentApiService
	environmentJsonhalEnvironmentPost *EnvironmentJsonhalEnvironmentPost
}

// The new Environment resource
func (r ApiApiEnvironmentsPostRequest) EnvironmentJsonhalEnvironmentPost(environmentJsonhalEnvironmentPost EnvironmentJsonhalEnvironmentPost) ApiApiEnvironmentsPostRequest {
	r.environmentJsonhalEnvironmentPost = &environmentJsonhalEnvironmentPost
	return r
}

func (r ApiApiEnvironmentsPostRequest) Execute() (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	return r.ApiService.ApiEnvironmentsPostExecute(r)
}

/*
ApiEnvironmentsPost Creates a Environment resource.

Creates a Environment resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiEnvironmentsPostRequest
*/
func (a *EnvironmentApiService) ApiEnvironmentsPost(ctx context.Context) ApiApiEnvironmentsPostRequest {
	return ApiApiEnvironmentsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EnvironmentJsonhalEnvironmentGet
func (a *EnvironmentApiService) ApiEnvironmentsPostExecute(r ApiApiEnvironmentsPostRequest) (*EnvironmentJsonhalEnvironmentGet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentJsonhalEnvironmentGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentApiService.ApiEnvironmentsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentJsonhalEnvironmentPost == nil {
		return localVarReturnValue, nil, reportError("environmentJsonhalEnvironmentPost is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentJsonhalEnvironmentPost
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
