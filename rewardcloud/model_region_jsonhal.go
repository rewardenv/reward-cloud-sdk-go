/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"encoding/json"
	"time"
)

// checks if the RegionJsonhal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionJsonhal{}

// RegionJsonhal Class Region
type RegionJsonhal struct {
	Links              *AbstractEnvironmentJsonhalLinks `json:"_links,omitempty"`
	Id                 *int32                           `json:"id,omitempty"`
	Uuid               NullableString                   `json:"uuid,omitempty"`
	Name               NullableString                   `json:"name,omitempty"`
	KubecostUrl        NullableString                   `json:"kubecostUrl,omitempty"`
	KubecostUser       NullableString                   `json:"kubecostUser,omitempty"`
	KubecostPass       NullableString                   `json:"kubecostPass,omitempty"`
	ChangeKubecostPass NullableString                   `json:"changeKubecostPass,omitempty"`
	IsDefault          NullableBool                     `json:"isDefault,omitempty"`
	Environment        []string                         `json:"environment,omitempty"`
	Provider           NullableString                   `json:"provider,omitempty"`
	Products           []string                         `json:"products,omitempty"`
	CreatedBy          NullableString                   `json:"createdBy,omitempty"`
	UpdatedBy          NullableString                   `json:"updatedBy,omitempty"`
	CreatedAt          *time.Time                       `json:"createdAt,omitempty"`
	UpdatedAt          *time.Time                       `json:"updatedAt,omitempty"`
}

// NewRegionJsonhal instantiates a new RegionJsonhal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionJsonhal() *RegionJsonhal {
	this := RegionJsonhal{}
	return &this
}

// NewRegionJsonhalWithDefaults instantiates a new RegionJsonhal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionJsonhalWithDefaults() *RegionJsonhal {
	this := RegionJsonhal{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RegionJsonhal) GetLinks() AbstractEnvironmentJsonhalLinks {
	if o == nil || IsNil(o.Links) {
		var ret AbstractEnvironmentJsonhalLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionJsonhal) GetLinksOk() (*AbstractEnvironmentJsonhalLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RegionJsonhal) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given AbstractEnvironmentJsonhalLinks and assigns it to the Links field.
func (o *RegionJsonhal) SetLinks(v AbstractEnvironmentJsonhalLinks) {
	o.Links = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegionJsonhal) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionJsonhal) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegionJsonhal) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RegionJsonhal) SetId(v int32) {
	o.Id = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegionJsonhal) GetUuid() string {
	if o == nil || IsNil(o.Uuid.Get()) {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionJsonhal) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *RegionJsonhal) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *RegionJsonhal) SetUuid(v string) {
	o.Uuid.Set(&v)
}

// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *RegionJsonhal) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *RegionJsonhal) UnsetUuid() {
	o.Uuid.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegionJsonhal) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionJsonhal) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RegionJsonhal) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RegionJsonhal) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *RegionJsonhal) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RegionJsonhal) UnsetName() {
	o.Name.Unset()
}

// GetKubecostUrl returns the KubecostUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegionJsonhal) GetKubecostUrl() string {
	if o == nil || IsNil(o.KubecostUrl.Get()) {
		var ret string
		return ret
	}
	return *o.KubecostUrl.Get()
}

// GetKubecostUrlOk returns a tuple with the KubecostUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionJsonhal) GetKubecostUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KubecostUrl.Get(), o.KubecostUrl.IsSet()
}

// HasKubecostUrl returns a boolean if a field has been set.
func (o *RegionJsonhal) HasKubecostUrl() bool {
	if o != nil && o.KubecostUrl.IsSet() {
		return true
	}

	return false
}

// SetKubecostUrl gets a reference to the given NullableString and assigns it to the KubecostUrl field.
func (o *RegionJsonhal) SetKubecostUrl(v string) {
	o.KubecostUrl.Set(&v)
}

// SetKubecostUrlNil sets the value for KubecostUrl to be an explicit nil
func (o *RegionJsonhal) SetKubecostUrlNil() {
	o.KubecostUrl.Set(nil)
}

// UnsetKubecostUrl ensures that no value is present for KubecostUrl, not even an explicit nil
func (o *RegionJsonhal) UnsetKubecostUrl() {
	o.KubecostUrl.Unset()
}

// GetKubecostUser returns the KubecostUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegionJsonhal) GetKubecostUser() string {
	if o == nil || IsNil(o.KubecostUser.Get()) {
		var ret string
		return ret
	}
	return *o.KubecostUser.Get()
}

// GetKubecostUserOk returns a tuple with the KubecostUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionJsonhal) GetKubecostUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KubecostUser.Get(), o.KubecostUser.IsSet()
}

// HasKubecostUser returns a boolean if a field has been set.
func (o *RegionJsonhal) HasKubecostUser() bool {
	if o != nil && o.KubecostUser.IsSet() {
		return true
	}

	return false
}

// SetKubecostUser gets a reference to the given NullableString and assigns it to the KubecostUser field.
func (o *RegionJsonhal) SetKubecostUser(v string) {
	o.KubecostUser.Set(&v)
}

// SetKubecostUserNil sets the value for KubecostUser to be an explicit nil
func (o *RegionJsonhal) SetKubecostUserNil() {
	o.KubecostUser.Set(nil)
}

// UnsetKubecostUser ensures that no value is present for KubecostUser, not even an explicit nil
func (o *RegionJsonhal) UnsetKubecostUser() {
	o.KubecostUser.Unset()
}

// GetKubecostPass returns the KubecostPass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegionJsonhal) GetKubecostPass() string {
	if o == nil || IsNil(o.KubecostPass.Get()) {
		var ret string
		return ret
	}
	return *o.KubecostPass.Get()
}

// GetKubecostPassOk returns a tuple with the KubecostPass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionJsonhal) GetKubecostPassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KubecostPass.Get(), o.KubecostPass.IsSet()
}

// HasKubecostPass returns a boolean if a field has been set.
func (o *RegionJsonhal) HasKubecostPass() bool {
	if o != nil && o.KubecostPass.IsSet() {
		return true
	}

	return false
}

// SetKubecostPass gets a reference to the given NullableString and assigns it to the KubecostPass field.
func (o *RegionJsonhal) SetKubecostPass(v string) {
	o.KubecostPass.Set(&v)
}

// SetKubecostPassNil sets the value for KubecostPass to be an explicit nil
func (o *RegionJsonhal) SetKubecostPassNil() {
	o.KubecostPass.Set(nil)
}

// UnsetKubecostPass ensures that no value is present for KubecostPass, not even an explicit nil
func (o *RegionJsonhal) UnsetKubecostPass() {
	o.KubecostPass.Unset()
}

// GetChangeKubecostPass returns the ChangeKubecostPass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegionJsonhal) GetChangeKubecostPass() string {
	if o == nil || IsNil(o.ChangeKubecostPass.Get()) {
		var ret string
		return ret
	}
	return *o.ChangeKubecostPass.Get()
}

// GetChangeKubecostPassOk returns a tuple with the ChangeKubecostPass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionJsonhal) GetChangeKubecostPassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChangeKubecostPass.Get(), o.ChangeKubecostPass.IsSet()
}

// HasChangeKubecostPass returns a boolean if a field has been set.
func (o *RegionJsonhal) HasChangeKubecostPass() bool {
	if o != nil && o.ChangeKubecostPass.IsSet() {
		return true
	}

	return false
}

// SetChangeKubecostPass gets a reference to the given NullableString and assigns it to the ChangeKubecostPass field.
func (o *RegionJsonhal) SetChangeKubecostPass(v string) {
	o.ChangeKubecostPass.Set(&v)
}

// SetChangeKubecostPassNil sets the value for ChangeKubecostPass to be an explicit nil
func (o *RegionJsonhal) SetChangeKubecostPassNil() {
	o.ChangeKubecostPass.Set(nil)
}

// UnsetChangeKubecostPass ensures that no value is present for ChangeKubecostPass, not even an explicit nil
func (o *RegionJsonhal) UnsetChangeKubecostPass() {
	o.ChangeKubecostPass.Unset()
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegionJsonhal) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDefault.Get()
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionJsonhal) GetIsDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDefault.Get(), o.IsDefault.IsSet()
}

// HasIsDefault returns a boolean if a field has been set.
func (o *RegionJsonhal) HasIsDefault() bool {
	if o != nil && o.IsDefault.IsSet() {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given NullableBool and assigns it to the IsDefault field.
func (o *RegionJsonhal) SetIsDefault(v bool) {
	o.IsDefault.Set(&v)
}

// SetIsDefaultNil sets the value for IsDefault to be an explicit nil
func (o *RegionJsonhal) SetIsDefaultNil() {
	o.IsDefault.Set(nil)
}

// UnsetIsDefault ensures that no value is present for IsDefault, not even an explicit nil
func (o *RegionJsonhal) UnsetIsDefault() {
	o.IsDefault.Unset()
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *RegionJsonhal) GetEnvironment() []string {
	if o == nil || IsNil(o.Environment) {
		var ret []string
		return ret
	}
	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionJsonhal) GetEnvironmentOk() ([]string, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *RegionJsonhal) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given []string and assigns it to the Environment field.
func (o *RegionJsonhal) SetEnvironment(v []string) {
	o.Environment = v
}

// GetProvider returns the Provider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegionJsonhal) GetProvider() string {
	if o == nil || IsNil(o.Provider.Get()) {
		var ret string
		return ret
	}
	return *o.Provider.Get()
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionJsonhal) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Provider.Get(), o.Provider.IsSet()
}

// HasProvider returns a boolean if a field has been set.
func (o *RegionJsonhal) HasProvider() bool {
	if o != nil && o.Provider.IsSet() {
		return true
	}

	return false
}

// SetProvider gets a reference to the given NullableString and assigns it to the Provider field.
func (o *RegionJsonhal) SetProvider(v string) {
	o.Provider.Set(&v)
}

// SetProviderNil sets the value for Provider to be an explicit nil
func (o *RegionJsonhal) SetProviderNil() {
	o.Provider.Set(nil)
}

// UnsetProvider ensures that no value is present for Provider, not even an explicit nil
func (o *RegionJsonhal) UnsetProvider() {
	o.Provider.Unset()
}

// GetProducts returns the Products field value if set, zero value otherwise.
func (o *RegionJsonhal) GetProducts() []string {
	if o == nil || IsNil(o.Products) {
		var ret []string
		return ret
	}
	return o.Products
}

// GetProductsOk returns a tuple with the Products field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionJsonhal) GetProductsOk() ([]string, bool) {
	if o == nil || IsNil(o.Products) {
		return nil, false
	}
	return o.Products, true
}

// HasProducts returns a boolean if a field has been set.
func (o *RegionJsonhal) HasProducts() bool {
	if o != nil && !IsNil(o.Products) {
		return true
	}

	return false
}

// SetProducts gets a reference to the given []string and assigns it to the Products field.
func (o *RegionJsonhal) SetProducts(v []string) {
	o.Products = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegionJsonhal) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedBy.Get()
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionJsonhal) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedBy.Get(), o.CreatedBy.IsSet()
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *RegionJsonhal) HasCreatedBy() bool {
	if o != nil && o.CreatedBy.IsSet() {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given NullableString and assigns it to the CreatedBy field.
func (o *RegionJsonhal) SetCreatedBy(v string) {
	o.CreatedBy.Set(&v)
}

// SetCreatedByNil sets the value for CreatedBy to be an explicit nil
func (o *RegionJsonhal) SetCreatedByNil() {
	o.CreatedBy.Set(nil)
}

// UnsetCreatedBy ensures that no value is present for CreatedBy, not even an explicit nil
func (o *RegionJsonhal) UnsetCreatedBy() {
	o.CreatedBy.Unset()
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegionJsonhal) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy.Get()) {
		var ret string
		return ret
	}
	return *o.UpdatedBy.Get()
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionJsonhal) GetUpdatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedBy.Get(), o.UpdatedBy.IsSet()
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *RegionJsonhal) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy.IsSet() {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given NullableString and assigns it to the UpdatedBy field.
func (o *RegionJsonhal) SetUpdatedBy(v string) {
	o.UpdatedBy.Set(&v)
}

// SetUpdatedByNil sets the value for UpdatedBy to be an explicit nil
func (o *RegionJsonhal) SetUpdatedByNil() {
	o.UpdatedBy.Set(nil)
}

// UnsetUpdatedBy ensures that no value is present for UpdatedBy, not even an explicit nil
func (o *RegionJsonhal) UnsetUpdatedBy() {
	o.UpdatedBy.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RegionJsonhal) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionJsonhal) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RegionJsonhal) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *RegionJsonhal) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RegionJsonhal) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionJsonhal) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RegionJsonhal) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *RegionJsonhal) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o RegionJsonhal) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionJsonhal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	// skip: id is readOnly
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.KubecostUrl.IsSet() {
		toSerialize["kubecostUrl"] = o.KubecostUrl.Get()
	}
	if o.KubecostUser.IsSet() {
		toSerialize["kubecostUser"] = o.KubecostUser.Get()
	}
	if o.KubecostPass.IsSet() {
		toSerialize["kubecostPass"] = o.KubecostPass.Get()
	}
	if o.ChangeKubecostPass.IsSet() {
		toSerialize["changeKubecostPass"] = o.ChangeKubecostPass.Get()
	}
	if o.IsDefault.IsSet() {
		toSerialize["isDefault"] = o.IsDefault.Get()
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if o.Provider.IsSet() {
		toSerialize["provider"] = o.Provider.Get()
	}
	if !IsNil(o.Products) {
		toSerialize["products"] = o.Products
	}
	if o.CreatedBy.IsSet() {
		toSerialize["createdBy"] = o.CreatedBy.Get()
	}
	if o.UpdatedBy.IsSet() {
		toSerialize["updatedBy"] = o.UpdatedBy.Get()
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableRegionJsonhal struct {
	value *RegionJsonhal
	isSet bool
}

func (v NullableRegionJsonhal) Get() *RegionJsonhal {
	return v.value
}

func (v *NullableRegionJsonhal) Set(val *RegionJsonhal) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionJsonhal) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionJsonhal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionJsonhal(val *RegionJsonhal) *NullableRegionJsonhal {
	return &NullableRegionJsonhal{value: val, isSet: true}
}

func (v NullableRegionJsonhal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionJsonhal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
