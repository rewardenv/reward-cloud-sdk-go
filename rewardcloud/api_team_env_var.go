/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// TeamEnvVarApiService TeamEnvVarApi service
type TeamEnvVarApiService service

type TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest struct {
	ctx          context.Context
	ApiService   *TeamEnvVarApiService
	page         *int32
	itemsPerPage *int32
	team         *string
	team2        *[]string
	envVarType   *string
	envVarType2  *[]string
}

// The collection page number
func (r TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest) Page(page int32) TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest) Team(team string) TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest {
	r.team = &team
	return r
}

func (r TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest) Team2(team2 []string) TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest {
	r.team2 = &team2
	return r
}

func (r TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest) EnvVarType(envVarType string) TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest {
	r.envVarType = &envVarType
	return r
}

func (r TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest) EnvVarType2(envVarType2 []string) TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest {
	r.envVarType2 = &envVarType2
	return r
}

func (r TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest) Execute() ([]TeamEnvVar, *http.Response, error) {
	return r.ApiService.ApiTeamEnvVarsGetCollectionExecute(r)
}

/*
ApiTeamEnvVarsGetCollection Retrieves the collection of TeamEnvVar resources.

Retrieves the collection of TeamEnvVar resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest
*/
func (a *TeamEnvVarApiService) ApiTeamEnvVarsGetCollection(ctx context.Context) TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest {
	return TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []TeamEnvVar
func (a *TeamEnvVarApiService) ApiTeamEnvVarsGetCollectionExecute(r TeamEnvVarApiApiTeamEnvVarsGetCollectionRequest) ([]TeamEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []TeamEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamEnvVarApiService.ApiTeamEnvVarsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/team_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	if r.team != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "team", r.team, "")
	}
	if r.team2 != nil {
		t := *r.team2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "team[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "team[]", t, "multi")
		}
	}
	if r.envVarType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "envVarType", r.envVarType, "")
	}
	if r.envVarType2 != nil {
		t := *r.envVarType2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "envVarType[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "envVarType[]", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TeamEnvVarApiApiTeamEnvVarsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *TeamEnvVarApiService
	id         string
}

func (r TeamEnvVarApiApiTeamEnvVarsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiTeamEnvVarsIdDeleteExecute(r)
}

/*
ApiTeamEnvVarsIdDelete Removes the TeamEnvVar resource.

Removes the TeamEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id TeamEnvVar identifier
	@return TeamEnvVarApiApiTeamEnvVarsIdDeleteRequest
*/
func (a *TeamEnvVarApiService) ApiTeamEnvVarsIdDelete(ctx context.Context, id string) TeamEnvVarApiApiTeamEnvVarsIdDeleteRequest {
	return TeamEnvVarApiApiTeamEnvVarsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *TeamEnvVarApiService) ApiTeamEnvVarsIdDeleteExecute(r TeamEnvVarApiApiTeamEnvVarsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamEnvVarApiService.ApiTeamEnvVarsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/team_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TeamEnvVarApiApiTeamEnvVarsIdGetRequest struct {
	ctx        context.Context
	ApiService *TeamEnvVarApiService
	id         string
}

func (r TeamEnvVarApiApiTeamEnvVarsIdGetRequest) Execute() (*TeamEnvVar, *http.Response, error) {
	return r.ApiService.ApiTeamEnvVarsIdGetExecute(r)
}

/*
ApiTeamEnvVarsIdGet Retrieves a TeamEnvVar resource.

Retrieves a TeamEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id TeamEnvVar identifier
	@return TeamEnvVarApiApiTeamEnvVarsIdGetRequest
*/
func (a *TeamEnvVarApiService) ApiTeamEnvVarsIdGet(ctx context.Context, id string) TeamEnvVarApiApiTeamEnvVarsIdGetRequest {
	return TeamEnvVarApiApiTeamEnvVarsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TeamEnvVar
func (a *TeamEnvVarApiService) ApiTeamEnvVarsIdGetExecute(r TeamEnvVarApiApiTeamEnvVarsIdGetRequest) (*TeamEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TeamEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamEnvVarApiService.ApiTeamEnvVarsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/team_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TeamEnvVarApiApiTeamEnvVarsIdPatchRequest struct {
	ctx        context.Context
	ApiService *TeamEnvVarApiService
	teamEnvVar *TeamEnvVar
	id         string
}

// The updated TeamEnvVar resource
func (r TeamEnvVarApiApiTeamEnvVarsIdPatchRequest) TeamEnvVar(teamEnvVar TeamEnvVar) TeamEnvVarApiApiTeamEnvVarsIdPatchRequest {
	r.teamEnvVar = &teamEnvVar
	return r
}

func (r TeamEnvVarApiApiTeamEnvVarsIdPatchRequest) Execute() (*TeamEnvVar, *http.Response, error) {
	return r.ApiService.ApiTeamEnvVarsIdPatchExecute(r)
}

/*
ApiTeamEnvVarsIdPatch Updates the TeamEnvVar resource.

Updates the TeamEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id TeamEnvVar identifier
	@return TeamEnvVarApiApiTeamEnvVarsIdPatchRequest
*/
func (a *TeamEnvVarApiService) ApiTeamEnvVarsIdPatch(ctx context.Context, id string) TeamEnvVarApiApiTeamEnvVarsIdPatchRequest {
	return TeamEnvVarApiApiTeamEnvVarsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TeamEnvVar
func (a *TeamEnvVarApiService) ApiTeamEnvVarsIdPatchExecute(r TeamEnvVarApiApiTeamEnvVarsIdPatchRequest) (*TeamEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TeamEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamEnvVarApiService.ApiTeamEnvVarsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/team_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.teamEnvVar == nil {
		return localVarReturnValue, nil, reportError("teamEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json", "application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.teamEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TeamEnvVarApiApiTeamEnvVarsIdPutRequest struct {
	ctx        context.Context
	ApiService *TeamEnvVarApiService
	teamEnvVar *TeamEnvVar
	id         string
}

// The updated TeamEnvVar resource
func (r TeamEnvVarApiApiTeamEnvVarsIdPutRequest) TeamEnvVar(teamEnvVar TeamEnvVar) TeamEnvVarApiApiTeamEnvVarsIdPutRequest {
	r.teamEnvVar = &teamEnvVar
	return r
}

func (r TeamEnvVarApiApiTeamEnvVarsIdPutRequest) Execute() (*TeamEnvVar, *http.Response, error) {
	return r.ApiService.ApiTeamEnvVarsIdPutExecute(r)
}

/*
ApiTeamEnvVarsIdPut Replaces the TeamEnvVar resource.

Replaces the TeamEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id TeamEnvVar identifier
	@return TeamEnvVarApiApiTeamEnvVarsIdPutRequest
*/
func (a *TeamEnvVarApiService) ApiTeamEnvVarsIdPut(ctx context.Context, id string) TeamEnvVarApiApiTeamEnvVarsIdPutRequest {
	return TeamEnvVarApiApiTeamEnvVarsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TeamEnvVar
func (a *TeamEnvVarApiService) ApiTeamEnvVarsIdPutExecute(r TeamEnvVarApiApiTeamEnvVarsIdPutRequest) (*TeamEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TeamEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamEnvVarApiService.ApiTeamEnvVarsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/team_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.teamEnvVar == nil {
		return localVarReturnValue, nil, reportError("teamEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.teamEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TeamEnvVarApiApiTeamEnvVarsPostRequest struct {
	ctx        context.Context
	ApiService *TeamEnvVarApiService
	teamEnvVar *TeamEnvVar
}

// The new TeamEnvVar resource
func (r TeamEnvVarApiApiTeamEnvVarsPostRequest) TeamEnvVar(teamEnvVar TeamEnvVar) TeamEnvVarApiApiTeamEnvVarsPostRequest {
	r.teamEnvVar = &teamEnvVar
	return r
}

func (r TeamEnvVarApiApiTeamEnvVarsPostRequest) Execute() (*TeamEnvVar, *http.Response, error) {
	return r.ApiService.ApiTeamEnvVarsPostExecute(r)
}

/*
ApiTeamEnvVarsPost Creates a TeamEnvVar resource.

Creates a TeamEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TeamEnvVarApiApiTeamEnvVarsPostRequest
*/
func (a *TeamEnvVarApiService) ApiTeamEnvVarsPost(ctx context.Context) TeamEnvVarApiApiTeamEnvVarsPostRequest {
	return TeamEnvVarApiApiTeamEnvVarsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TeamEnvVar
func (a *TeamEnvVarApiService) ApiTeamEnvVarsPostExecute(r TeamEnvVarApiApiTeamEnvVarsPostRequest) (*TeamEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TeamEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamEnvVarApiService.ApiTeamEnvVarsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/team_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.teamEnvVar == nil {
		return localVarReturnValue, nil, reportError("teamEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.teamEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
