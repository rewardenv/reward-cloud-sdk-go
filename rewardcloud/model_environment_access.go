/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"encoding/json"
	"time"
)

// EnvironmentAccess Class EnvironmentAccess
type EnvironmentAccess struct {
	Id *int32 `json:"id,omitempty"`
	Uuid NullableString `json:"uuid,omitempty"`
	Environment NullableString `json:"environment,omitempty"`
	Frontend NullableString `json:"frontend,omitempty"`
	Backend NullableString `json:"backend,omitempty"`
	Database NullableString `json:"database,omitempty"`
	DevTools NullableString `json:"devTools,omitempty"`
	Redis NullableString `json:"redis,omitempty"`
	Rabbit NullableString `json:"rabbit,omitempty"`
	CreatedBy NullableString `json:"createdBy,omitempty"`
	UpdatedBy NullableString `json:"updatedBy,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NewEnvironmentAccess instantiates a new EnvironmentAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentAccess() *EnvironmentAccess {
	this := EnvironmentAccess{}
	return &this
}

// NewEnvironmentAccessWithDefaults instantiates a new EnvironmentAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentAccessWithDefaults() *EnvironmentAccess {
	this := EnvironmentAccess{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EnvironmentAccess) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentAccess) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EnvironmentAccess) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *EnvironmentAccess) SetId(v int32) {
	o.Id = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentAccess) GetUuid() string {
	if o == nil || isNil(o.Uuid.Get()) {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentAccess) GetUuidOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *EnvironmentAccess) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *EnvironmentAccess) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *EnvironmentAccess) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *EnvironmentAccess) UnsetUuid() {
	o.Uuid.Unset()
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentAccess) GetEnvironment() string {
	if o == nil || isNil(o.Environment.Get()) {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentAccess) GetEnvironmentOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *EnvironmentAccess) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *EnvironmentAccess) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *EnvironmentAccess) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *EnvironmentAccess) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetFrontend returns the Frontend field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentAccess) GetFrontend() string {
	if o == nil || isNil(o.Frontend.Get()) {
		var ret string
		return ret
	}
	return *o.Frontend.Get()
}

// GetFrontendOk returns a tuple with the Frontend field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentAccess) GetFrontendOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Frontend.Get(), o.Frontend.IsSet()
}

// HasFrontend returns a boolean if a field has been set.
func (o *EnvironmentAccess) HasFrontend() bool {
	if o != nil && o.Frontend.IsSet() {
		return true
	}

	return false
}

// SetFrontend gets a reference to the given NullableString and assigns it to the Frontend field.
func (o *EnvironmentAccess) SetFrontend(v string) {
	o.Frontend.Set(&v)
}
// SetFrontendNil sets the value for Frontend to be an explicit nil
func (o *EnvironmentAccess) SetFrontendNil() {
	o.Frontend.Set(nil)
}

// UnsetFrontend ensures that no value is present for Frontend, not even an explicit nil
func (o *EnvironmentAccess) UnsetFrontend() {
	o.Frontend.Unset()
}

// GetBackend returns the Backend field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentAccess) GetBackend() string {
	if o == nil || isNil(o.Backend.Get()) {
		var ret string
		return ret
	}
	return *o.Backend.Get()
}

// GetBackendOk returns a tuple with the Backend field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentAccess) GetBackendOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Backend.Get(), o.Backend.IsSet()
}

// HasBackend returns a boolean if a field has been set.
func (o *EnvironmentAccess) HasBackend() bool {
	if o != nil && o.Backend.IsSet() {
		return true
	}

	return false
}

// SetBackend gets a reference to the given NullableString and assigns it to the Backend field.
func (o *EnvironmentAccess) SetBackend(v string) {
	o.Backend.Set(&v)
}
// SetBackendNil sets the value for Backend to be an explicit nil
func (o *EnvironmentAccess) SetBackendNil() {
	o.Backend.Set(nil)
}

// UnsetBackend ensures that no value is present for Backend, not even an explicit nil
func (o *EnvironmentAccess) UnsetBackend() {
	o.Backend.Unset()
}

// GetDatabase returns the Database field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentAccess) GetDatabase() string {
	if o == nil || isNil(o.Database.Get()) {
		var ret string
		return ret
	}
	return *o.Database.Get()
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentAccess) GetDatabaseOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Database.Get(), o.Database.IsSet()
}

// HasDatabase returns a boolean if a field has been set.
func (o *EnvironmentAccess) HasDatabase() bool {
	if o != nil && o.Database.IsSet() {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given NullableString and assigns it to the Database field.
func (o *EnvironmentAccess) SetDatabase(v string) {
	o.Database.Set(&v)
}
// SetDatabaseNil sets the value for Database to be an explicit nil
func (o *EnvironmentAccess) SetDatabaseNil() {
	o.Database.Set(nil)
}

// UnsetDatabase ensures that no value is present for Database, not even an explicit nil
func (o *EnvironmentAccess) UnsetDatabase() {
	o.Database.Unset()
}

// GetDevTools returns the DevTools field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentAccess) GetDevTools() string {
	if o == nil || isNil(o.DevTools.Get()) {
		var ret string
		return ret
	}
	return *o.DevTools.Get()
}

// GetDevToolsOk returns a tuple with the DevTools field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentAccess) GetDevToolsOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.DevTools.Get(), o.DevTools.IsSet()
}

// HasDevTools returns a boolean if a field has been set.
func (o *EnvironmentAccess) HasDevTools() bool {
	if o != nil && o.DevTools.IsSet() {
		return true
	}

	return false
}

// SetDevTools gets a reference to the given NullableString and assigns it to the DevTools field.
func (o *EnvironmentAccess) SetDevTools(v string) {
	o.DevTools.Set(&v)
}
// SetDevToolsNil sets the value for DevTools to be an explicit nil
func (o *EnvironmentAccess) SetDevToolsNil() {
	o.DevTools.Set(nil)
}

// UnsetDevTools ensures that no value is present for DevTools, not even an explicit nil
func (o *EnvironmentAccess) UnsetDevTools() {
	o.DevTools.Unset()
}

// GetRedis returns the Redis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentAccess) GetRedis() string {
	if o == nil || isNil(o.Redis.Get()) {
		var ret string
		return ret
	}
	return *o.Redis.Get()
}

// GetRedisOk returns a tuple with the Redis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentAccess) GetRedisOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Redis.Get(), o.Redis.IsSet()
}

// HasRedis returns a boolean if a field has been set.
func (o *EnvironmentAccess) HasRedis() bool {
	if o != nil && o.Redis.IsSet() {
		return true
	}

	return false
}

// SetRedis gets a reference to the given NullableString and assigns it to the Redis field.
func (o *EnvironmentAccess) SetRedis(v string) {
	o.Redis.Set(&v)
}
// SetRedisNil sets the value for Redis to be an explicit nil
func (o *EnvironmentAccess) SetRedisNil() {
	o.Redis.Set(nil)
}

// UnsetRedis ensures that no value is present for Redis, not even an explicit nil
func (o *EnvironmentAccess) UnsetRedis() {
	o.Redis.Unset()
}

// GetRabbit returns the Rabbit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentAccess) GetRabbit() string {
	if o == nil || isNil(o.Rabbit.Get()) {
		var ret string
		return ret
	}
	return *o.Rabbit.Get()
}

// GetRabbitOk returns a tuple with the Rabbit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentAccess) GetRabbitOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Rabbit.Get(), o.Rabbit.IsSet()
}

// HasRabbit returns a boolean if a field has been set.
func (o *EnvironmentAccess) HasRabbit() bool {
	if o != nil && o.Rabbit.IsSet() {
		return true
	}

	return false
}

// SetRabbit gets a reference to the given NullableString and assigns it to the Rabbit field.
func (o *EnvironmentAccess) SetRabbit(v string) {
	o.Rabbit.Set(&v)
}
// SetRabbitNil sets the value for Rabbit to be an explicit nil
func (o *EnvironmentAccess) SetRabbitNil() {
	o.Rabbit.Set(nil)
}

// UnsetRabbit ensures that no value is present for Rabbit, not even an explicit nil
func (o *EnvironmentAccess) UnsetRabbit() {
	o.Rabbit.Unset()
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentAccess) GetCreatedBy() string {
	if o == nil || isNil(o.CreatedBy.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedBy.Get()
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentAccess) GetCreatedByOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.CreatedBy.Get(), o.CreatedBy.IsSet()
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *EnvironmentAccess) HasCreatedBy() bool {
	if o != nil && o.CreatedBy.IsSet() {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given NullableString and assigns it to the CreatedBy field.
func (o *EnvironmentAccess) SetCreatedBy(v string) {
	o.CreatedBy.Set(&v)
}
// SetCreatedByNil sets the value for CreatedBy to be an explicit nil
func (o *EnvironmentAccess) SetCreatedByNil() {
	o.CreatedBy.Set(nil)
}

// UnsetCreatedBy ensures that no value is present for CreatedBy, not even an explicit nil
func (o *EnvironmentAccess) UnsetCreatedBy() {
	o.CreatedBy.Unset()
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentAccess) GetUpdatedBy() string {
	if o == nil || isNil(o.UpdatedBy.Get()) {
		var ret string
		return ret
	}
	return *o.UpdatedBy.Get()
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentAccess) GetUpdatedByOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.UpdatedBy.Get(), o.UpdatedBy.IsSet()
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *EnvironmentAccess) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy.IsSet() {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given NullableString and assigns it to the UpdatedBy field.
func (o *EnvironmentAccess) SetUpdatedBy(v string) {
	o.UpdatedBy.Set(&v)
}
// SetUpdatedByNil sets the value for UpdatedBy to be an explicit nil
func (o *EnvironmentAccess) SetUpdatedByNil() {
	o.UpdatedBy.Set(nil)
}

// UnsetUpdatedBy ensures that no value is present for UpdatedBy, not even an explicit nil
func (o *EnvironmentAccess) UnsetUpdatedBy() {
	o.UpdatedBy.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *EnvironmentAccess) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentAccess) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *EnvironmentAccess) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *EnvironmentAccess) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *EnvironmentAccess) GetUpdatedAt() time.Time {
	if o == nil || isNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentAccess) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.UpdatedAt) {
    return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *EnvironmentAccess) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *EnvironmentAccess) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o EnvironmentAccess) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.Frontend.IsSet() {
		toSerialize["frontend"] = o.Frontend.Get()
	}
	if o.Backend.IsSet() {
		toSerialize["backend"] = o.Backend.Get()
	}
	if o.Database.IsSet() {
		toSerialize["database"] = o.Database.Get()
	}
	if o.DevTools.IsSet() {
		toSerialize["devTools"] = o.DevTools.Get()
	}
	if o.Redis.IsSet() {
		toSerialize["redis"] = o.Redis.Get()
	}
	if o.Rabbit.IsSet() {
		toSerialize["rabbit"] = o.Rabbit.Get()
	}
	if o.CreatedBy.IsSet() {
		toSerialize["createdBy"] = o.CreatedBy.Get()
	}
	if o.UpdatedBy.IsSet() {
		toSerialize["updatedBy"] = o.UpdatedBy.Get()
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentAccess struct {
	value *EnvironmentAccess
	isSet bool
}

func (v NullableEnvironmentAccess) Get() *EnvironmentAccess {
	return v.value
}

func (v *NullableEnvironmentAccess) Set(val *EnvironmentAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentAccess(val *EnvironmentAccess) *NullableEnvironmentAccess {
	return &NullableEnvironmentAccess{value: val, isSet: true}
}

func (v NullableEnvironmentAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


