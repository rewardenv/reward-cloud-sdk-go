/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"encoding/json"
	"time"
)

// checks if the ResourceTypeLimitJsonhal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceTypeLimitJsonhal{}

// ResourceTypeLimitJsonhal Class ResourceTypeLimit
type ResourceTypeLimitJsonhal struct {
	Links *AbstractEnvironmentJsonhalLinks `json:"_links,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Uuid NullableString `json:"uuid,omitempty"`
	ProjectMinValue NullableInt32 `json:"projectMinValue,omitempty"`
	ProjectMaxValue NullableInt32 `json:"projectMaxValue,omitempty"`
	EnvironmentMinValue NullableInt32 `json:"environmentMinValue,omitempty"`
	EnvironmentMaxValue NullableInt32 `json:"environmentMaxValue,omitempty"`
	ComponentMinValue NullableInt32 `json:"componentMinValue,omitempty"`
	ComponentMaxValue NullableInt32 `json:"componentMaxValue,omitempty"`
	CreatedBy NullableString `json:"createdBy,omitempty"`
	UpdatedBy NullableString `json:"updatedBy,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NewResourceTypeLimitJsonhal instantiates a new ResourceTypeLimitJsonhal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceTypeLimitJsonhal() *ResourceTypeLimitJsonhal {
	this := ResourceTypeLimitJsonhal{}
	return &this
}

// NewResourceTypeLimitJsonhalWithDefaults instantiates a new ResourceTypeLimitJsonhal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceTypeLimitJsonhalWithDefaults() *ResourceTypeLimitJsonhal {
	this := ResourceTypeLimitJsonhal{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ResourceTypeLimitJsonhal) GetLinks() AbstractEnvironmentJsonhalLinks {
	if o == nil || IsNil(o.Links) {
		var ret AbstractEnvironmentJsonhalLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeLimitJsonhal) GetLinksOk() (*AbstractEnvironmentJsonhalLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ResourceTypeLimitJsonhal) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given AbstractEnvironmentJsonhalLinks and assigns it to the Links field.
func (o *ResourceTypeLimitJsonhal) SetLinks(v AbstractEnvironmentJsonhalLinks) {
	o.Links = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResourceTypeLimitJsonhal) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeLimitJsonhal) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResourceTypeLimitJsonhal) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ResourceTypeLimitJsonhal) SetId(v int32) {
	o.Id = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceTypeLimitJsonhal) GetUuid() string {
	if o == nil || IsNil(o.Uuid.Get()) {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceTypeLimitJsonhal) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *ResourceTypeLimitJsonhal) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *ResourceTypeLimitJsonhal) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *ResourceTypeLimitJsonhal) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *ResourceTypeLimitJsonhal) UnsetUuid() {
	o.Uuid.Unset()
}

// GetProjectMinValue returns the ProjectMinValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceTypeLimitJsonhal) GetProjectMinValue() int32 {
	if o == nil || IsNil(o.ProjectMinValue.Get()) {
		var ret int32
		return ret
	}
	return *o.ProjectMinValue.Get()
}

// GetProjectMinValueOk returns a tuple with the ProjectMinValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceTypeLimitJsonhal) GetProjectMinValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectMinValue.Get(), o.ProjectMinValue.IsSet()
}

// HasProjectMinValue returns a boolean if a field has been set.
func (o *ResourceTypeLimitJsonhal) HasProjectMinValue() bool {
	if o != nil && o.ProjectMinValue.IsSet() {
		return true
	}

	return false
}

// SetProjectMinValue gets a reference to the given NullableInt32 and assigns it to the ProjectMinValue field.
func (o *ResourceTypeLimitJsonhal) SetProjectMinValue(v int32) {
	o.ProjectMinValue.Set(&v)
}
// SetProjectMinValueNil sets the value for ProjectMinValue to be an explicit nil
func (o *ResourceTypeLimitJsonhal) SetProjectMinValueNil() {
	o.ProjectMinValue.Set(nil)
}

// UnsetProjectMinValue ensures that no value is present for ProjectMinValue, not even an explicit nil
func (o *ResourceTypeLimitJsonhal) UnsetProjectMinValue() {
	o.ProjectMinValue.Unset()
}

// GetProjectMaxValue returns the ProjectMaxValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceTypeLimitJsonhal) GetProjectMaxValue() int32 {
	if o == nil || IsNil(o.ProjectMaxValue.Get()) {
		var ret int32
		return ret
	}
	return *o.ProjectMaxValue.Get()
}

// GetProjectMaxValueOk returns a tuple with the ProjectMaxValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceTypeLimitJsonhal) GetProjectMaxValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectMaxValue.Get(), o.ProjectMaxValue.IsSet()
}

// HasProjectMaxValue returns a boolean if a field has been set.
func (o *ResourceTypeLimitJsonhal) HasProjectMaxValue() bool {
	if o != nil && o.ProjectMaxValue.IsSet() {
		return true
	}

	return false
}

// SetProjectMaxValue gets a reference to the given NullableInt32 and assigns it to the ProjectMaxValue field.
func (o *ResourceTypeLimitJsonhal) SetProjectMaxValue(v int32) {
	o.ProjectMaxValue.Set(&v)
}
// SetProjectMaxValueNil sets the value for ProjectMaxValue to be an explicit nil
func (o *ResourceTypeLimitJsonhal) SetProjectMaxValueNil() {
	o.ProjectMaxValue.Set(nil)
}

// UnsetProjectMaxValue ensures that no value is present for ProjectMaxValue, not even an explicit nil
func (o *ResourceTypeLimitJsonhal) UnsetProjectMaxValue() {
	o.ProjectMaxValue.Unset()
}

// GetEnvironmentMinValue returns the EnvironmentMinValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceTypeLimitJsonhal) GetEnvironmentMinValue() int32 {
	if o == nil || IsNil(o.EnvironmentMinValue.Get()) {
		var ret int32
		return ret
	}
	return *o.EnvironmentMinValue.Get()
}

// GetEnvironmentMinValueOk returns a tuple with the EnvironmentMinValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceTypeLimitJsonhal) GetEnvironmentMinValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvironmentMinValue.Get(), o.EnvironmentMinValue.IsSet()
}

// HasEnvironmentMinValue returns a boolean if a field has been set.
func (o *ResourceTypeLimitJsonhal) HasEnvironmentMinValue() bool {
	if o != nil && o.EnvironmentMinValue.IsSet() {
		return true
	}

	return false
}

// SetEnvironmentMinValue gets a reference to the given NullableInt32 and assigns it to the EnvironmentMinValue field.
func (o *ResourceTypeLimitJsonhal) SetEnvironmentMinValue(v int32) {
	o.EnvironmentMinValue.Set(&v)
}
// SetEnvironmentMinValueNil sets the value for EnvironmentMinValue to be an explicit nil
func (o *ResourceTypeLimitJsonhal) SetEnvironmentMinValueNil() {
	o.EnvironmentMinValue.Set(nil)
}

// UnsetEnvironmentMinValue ensures that no value is present for EnvironmentMinValue, not even an explicit nil
func (o *ResourceTypeLimitJsonhal) UnsetEnvironmentMinValue() {
	o.EnvironmentMinValue.Unset()
}

// GetEnvironmentMaxValue returns the EnvironmentMaxValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceTypeLimitJsonhal) GetEnvironmentMaxValue() int32 {
	if o == nil || IsNil(o.EnvironmentMaxValue.Get()) {
		var ret int32
		return ret
	}
	return *o.EnvironmentMaxValue.Get()
}

// GetEnvironmentMaxValueOk returns a tuple with the EnvironmentMaxValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceTypeLimitJsonhal) GetEnvironmentMaxValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvironmentMaxValue.Get(), o.EnvironmentMaxValue.IsSet()
}

// HasEnvironmentMaxValue returns a boolean if a field has been set.
func (o *ResourceTypeLimitJsonhal) HasEnvironmentMaxValue() bool {
	if o != nil && o.EnvironmentMaxValue.IsSet() {
		return true
	}

	return false
}

// SetEnvironmentMaxValue gets a reference to the given NullableInt32 and assigns it to the EnvironmentMaxValue field.
func (o *ResourceTypeLimitJsonhal) SetEnvironmentMaxValue(v int32) {
	o.EnvironmentMaxValue.Set(&v)
}
// SetEnvironmentMaxValueNil sets the value for EnvironmentMaxValue to be an explicit nil
func (o *ResourceTypeLimitJsonhal) SetEnvironmentMaxValueNil() {
	o.EnvironmentMaxValue.Set(nil)
}

// UnsetEnvironmentMaxValue ensures that no value is present for EnvironmentMaxValue, not even an explicit nil
func (o *ResourceTypeLimitJsonhal) UnsetEnvironmentMaxValue() {
	o.EnvironmentMaxValue.Unset()
}

// GetComponentMinValue returns the ComponentMinValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceTypeLimitJsonhal) GetComponentMinValue() int32 {
	if o == nil || IsNil(o.ComponentMinValue.Get()) {
		var ret int32
		return ret
	}
	return *o.ComponentMinValue.Get()
}

// GetComponentMinValueOk returns a tuple with the ComponentMinValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceTypeLimitJsonhal) GetComponentMinValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComponentMinValue.Get(), o.ComponentMinValue.IsSet()
}

// HasComponentMinValue returns a boolean if a field has been set.
func (o *ResourceTypeLimitJsonhal) HasComponentMinValue() bool {
	if o != nil && o.ComponentMinValue.IsSet() {
		return true
	}

	return false
}

// SetComponentMinValue gets a reference to the given NullableInt32 and assigns it to the ComponentMinValue field.
func (o *ResourceTypeLimitJsonhal) SetComponentMinValue(v int32) {
	o.ComponentMinValue.Set(&v)
}
// SetComponentMinValueNil sets the value for ComponentMinValue to be an explicit nil
func (o *ResourceTypeLimitJsonhal) SetComponentMinValueNil() {
	o.ComponentMinValue.Set(nil)
}

// UnsetComponentMinValue ensures that no value is present for ComponentMinValue, not even an explicit nil
func (o *ResourceTypeLimitJsonhal) UnsetComponentMinValue() {
	o.ComponentMinValue.Unset()
}

// GetComponentMaxValue returns the ComponentMaxValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceTypeLimitJsonhal) GetComponentMaxValue() int32 {
	if o == nil || IsNil(o.ComponentMaxValue.Get()) {
		var ret int32
		return ret
	}
	return *o.ComponentMaxValue.Get()
}

// GetComponentMaxValueOk returns a tuple with the ComponentMaxValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceTypeLimitJsonhal) GetComponentMaxValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComponentMaxValue.Get(), o.ComponentMaxValue.IsSet()
}

// HasComponentMaxValue returns a boolean if a field has been set.
func (o *ResourceTypeLimitJsonhal) HasComponentMaxValue() bool {
	if o != nil && o.ComponentMaxValue.IsSet() {
		return true
	}

	return false
}

// SetComponentMaxValue gets a reference to the given NullableInt32 and assigns it to the ComponentMaxValue field.
func (o *ResourceTypeLimitJsonhal) SetComponentMaxValue(v int32) {
	o.ComponentMaxValue.Set(&v)
}
// SetComponentMaxValueNil sets the value for ComponentMaxValue to be an explicit nil
func (o *ResourceTypeLimitJsonhal) SetComponentMaxValueNil() {
	o.ComponentMaxValue.Set(nil)
}

// UnsetComponentMaxValue ensures that no value is present for ComponentMaxValue, not even an explicit nil
func (o *ResourceTypeLimitJsonhal) UnsetComponentMaxValue() {
	o.ComponentMaxValue.Unset()
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceTypeLimitJsonhal) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedBy.Get()
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceTypeLimitJsonhal) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedBy.Get(), o.CreatedBy.IsSet()
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ResourceTypeLimitJsonhal) HasCreatedBy() bool {
	if o != nil && o.CreatedBy.IsSet() {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given NullableString and assigns it to the CreatedBy field.
func (o *ResourceTypeLimitJsonhal) SetCreatedBy(v string) {
	o.CreatedBy.Set(&v)
}
// SetCreatedByNil sets the value for CreatedBy to be an explicit nil
func (o *ResourceTypeLimitJsonhal) SetCreatedByNil() {
	o.CreatedBy.Set(nil)
}

// UnsetCreatedBy ensures that no value is present for CreatedBy, not even an explicit nil
func (o *ResourceTypeLimitJsonhal) UnsetCreatedBy() {
	o.CreatedBy.Unset()
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceTypeLimitJsonhal) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy.Get()) {
		var ret string
		return ret
	}
	return *o.UpdatedBy.Get()
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceTypeLimitJsonhal) GetUpdatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedBy.Get(), o.UpdatedBy.IsSet()
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *ResourceTypeLimitJsonhal) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy.IsSet() {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given NullableString and assigns it to the UpdatedBy field.
func (o *ResourceTypeLimitJsonhal) SetUpdatedBy(v string) {
	o.UpdatedBy.Set(&v)
}
// SetUpdatedByNil sets the value for UpdatedBy to be an explicit nil
func (o *ResourceTypeLimitJsonhal) SetUpdatedByNil() {
	o.UpdatedBy.Set(nil)
}

// UnsetUpdatedBy ensures that no value is present for UpdatedBy, not even an explicit nil
func (o *ResourceTypeLimitJsonhal) UnsetUpdatedBy() {
	o.UpdatedBy.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ResourceTypeLimitJsonhal) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeLimitJsonhal) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ResourceTypeLimitJsonhal) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ResourceTypeLimitJsonhal) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ResourceTypeLimitJsonhal) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeLimitJsonhal) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ResourceTypeLimitJsonhal) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ResourceTypeLimitJsonhal) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ResourceTypeLimitJsonhal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceTypeLimitJsonhal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	// skip: id is readOnly
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	if o.ProjectMinValue.IsSet() {
		toSerialize["projectMinValue"] = o.ProjectMinValue.Get()
	}
	if o.ProjectMaxValue.IsSet() {
		toSerialize["projectMaxValue"] = o.ProjectMaxValue.Get()
	}
	if o.EnvironmentMinValue.IsSet() {
		toSerialize["environmentMinValue"] = o.EnvironmentMinValue.Get()
	}
	if o.EnvironmentMaxValue.IsSet() {
		toSerialize["environmentMaxValue"] = o.EnvironmentMaxValue.Get()
	}
	if o.ComponentMinValue.IsSet() {
		toSerialize["componentMinValue"] = o.ComponentMinValue.Get()
	}
	if o.ComponentMaxValue.IsSet() {
		toSerialize["componentMaxValue"] = o.ComponentMaxValue.Get()
	}
	if o.CreatedBy.IsSet() {
		toSerialize["createdBy"] = o.CreatedBy.Get()
	}
	if o.UpdatedBy.IsSet() {
		toSerialize["updatedBy"] = o.UpdatedBy.Get()
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableResourceTypeLimitJsonhal struct {
	value *ResourceTypeLimitJsonhal
	isSet bool
}

func (v NullableResourceTypeLimitJsonhal) Get() *ResourceTypeLimitJsonhal {
	return v.value
}

func (v *NullableResourceTypeLimitJsonhal) Set(val *ResourceTypeLimitJsonhal) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceTypeLimitJsonhal) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceTypeLimitJsonhal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceTypeLimitJsonhal(val *ResourceTypeLimitJsonhal) *NullableResourceTypeLimitJsonhal {
	return &NullableResourceTypeLimitJsonhal{value: val, isSet: true}
}

func (v NullableResourceTypeLimitJsonhal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceTypeLimitJsonhal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


