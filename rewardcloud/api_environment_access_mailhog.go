/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.7.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// EnvironmentAccessMailhogApiService EnvironmentAccessMailhogApi service
type EnvironmentAccessMailhogApiService service

type EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsGetCollectionRequest struct {
	ctx          context.Context
	ApiService   *EnvironmentAccessMailhogApiService
	page         *int32
	itemsPerPage *int32
}

// The collection page number
func (r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsGetCollectionRequest) Page(page int32) EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsGetCollectionRequest) Execute() ([]EnvironmentAccessMailhog, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessMailhogsGetCollectionExecute(r)
}

/*
ApiEnvironmentAccessMailhogsGetCollection Retrieves the collection of EnvironmentAccessMailhog resources.

Retrieves the collection of EnvironmentAccessMailhog resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsGetCollectionRequest
*/
func (a *EnvironmentAccessMailhogApiService) ApiEnvironmentAccessMailhogsGetCollection(ctx context.Context) EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsGetCollectionRequest {
	return EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []EnvironmentAccessMailhog
func (a *EnvironmentAccessMailhogApiService) ApiEnvironmentAccessMailhogsGetCollectionExecute(r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsGetCollectionRequest) ([]EnvironmentAccessMailhog, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []EnvironmentAccessMailhog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessMailhogApiService.ApiEnvironmentAccessMailhogsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_mailhogs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessMailhogApiService
	id         string
}

func (r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessMailhogsIdDeleteExecute(r)
}

/*
ApiEnvironmentAccessMailhogsIdDelete Removes the EnvironmentAccessMailhog resource.

Removes the EnvironmentAccessMailhog resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessMailhog identifier
	@return EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdDeleteRequest
*/
func (a *EnvironmentAccessMailhogApiService) ApiEnvironmentAccessMailhogsIdDelete(ctx context.Context, id string) EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdDeleteRequest {
	return EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EnvironmentAccessMailhogApiService) ApiEnvironmentAccessMailhogsIdDeleteExecute(r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessMailhogApiService.ApiEnvironmentAccessMailhogsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_mailhogs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessMailhogApiService
	id         string
}

func (r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdGetRequest) Execute() (*EnvironmentAccessMailhog, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessMailhogsIdGetExecute(r)
}

/*
ApiEnvironmentAccessMailhogsIdGet Retrieves a EnvironmentAccessMailhog resource.

Retrieves a EnvironmentAccessMailhog resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessMailhog identifier
	@return EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdGetRequest
*/
func (a *EnvironmentAccessMailhogApiService) ApiEnvironmentAccessMailhogsIdGet(ctx context.Context, id string) EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdGetRequest {
	return EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessMailhog
func (a *EnvironmentAccessMailhogApiService) ApiEnvironmentAccessMailhogsIdGetExecute(r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdGetRequest) (*EnvironmentAccessMailhog, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessMailhog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessMailhogApiService.ApiEnvironmentAccessMailhogsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_mailhogs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPatchRequest struct {
	ctx                      context.Context
	ApiService               *EnvironmentAccessMailhogApiService
	environmentAccessMailhog *EnvironmentAccessMailhog
	id                       string
}

// The updated EnvironmentAccessMailhog resource
func (r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPatchRequest) EnvironmentAccessMailhog(environmentAccessMailhog EnvironmentAccessMailhog) EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPatchRequest {
	r.environmentAccessMailhog = &environmentAccessMailhog
	return r
}

func (r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPatchRequest) Execute() (*EnvironmentAccessMailhog, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessMailhogsIdPatchExecute(r)
}

/*
ApiEnvironmentAccessMailhogsIdPatch Updates the EnvironmentAccessMailhog resource.

Updates the EnvironmentAccessMailhog resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessMailhog identifier
	@return EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPatchRequest
*/
func (a *EnvironmentAccessMailhogApiService) ApiEnvironmentAccessMailhogsIdPatch(ctx context.Context, id string) EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPatchRequest {
	return EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessMailhog
func (a *EnvironmentAccessMailhogApiService) ApiEnvironmentAccessMailhogsIdPatchExecute(r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPatchRequest) (*EnvironmentAccessMailhog, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessMailhog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessMailhogApiService.ApiEnvironmentAccessMailhogsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_mailhogs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessMailhog == nil {
		return localVarReturnValue, nil, reportError("environmentAccessMailhog is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessMailhog
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPutRequest struct {
	ctx                      context.Context
	ApiService               *EnvironmentAccessMailhogApiService
	environmentAccessMailhog *EnvironmentAccessMailhog
	id                       string
}

// The updated EnvironmentAccessMailhog resource
func (r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPutRequest) EnvironmentAccessMailhog(environmentAccessMailhog EnvironmentAccessMailhog) EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPutRequest {
	r.environmentAccessMailhog = &environmentAccessMailhog
	return r
}

func (r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPutRequest) Execute() (*EnvironmentAccessMailhog, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessMailhogsIdPutExecute(r)
}

/*
ApiEnvironmentAccessMailhogsIdPut Replaces the EnvironmentAccessMailhog resource.

Replaces the EnvironmentAccessMailhog resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessMailhog identifier
	@return EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPutRequest
*/
func (a *EnvironmentAccessMailhogApiService) ApiEnvironmentAccessMailhogsIdPut(ctx context.Context, id string) EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPutRequest {
	return EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessMailhog
func (a *EnvironmentAccessMailhogApiService) ApiEnvironmentAccessMailhogsIdPutExecute(r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsIdPutRequest) (*EnvironmentAccessMailhog, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessMailhog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessMailhogApiService.ApiEnvironmentAccessMailhogsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_mailhogs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessMailhog == nil {
		return localVarReturnValue, nil, reportError("environmentAccessMailhog is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessMailhog
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsPostRequest struct {
	ctx                      context.Context
	ApiService               *EnvironmentAccessMailhogApiService
	environmentAccessMailhog *EnvironmentAccessMailhog
}

// The new EnvironmentAccessMailhog resource
func (r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsPostRequest) EnvironmentAccessMailhog(environmentAccessMailhog EnvironmentAccessMailhog) EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsPostRequest {
	r.environmentAccessMailhog = &environmentAccessMailhog
	return r
}

func (r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsPostRequest) Execute() (*EnvironmentAccessMailhog, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessMailhogsPostExecute(r)
}

/*
ApiEnvironmentAccessMailhogsPost Creates a EnvironmentAccessMailhog resource.

Creates a EnvironmentAccessMailhog resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsPostRequest
*/
func (a *EnvironmentAccessMailhogApiService) ApiEnvironmentAccessMailhogsPost(ctx context.Context) EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsPostRequest {
	return EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessMailhog
func (a *EnvironmentAccessMailhogApiService) ApiEnvironmentAccessMailhogsPostExecute(r EnvironmentAccessMailhogApiApiEnvironmentAccessMailhogsPostRequest) (*EnvironmentAccessMailhog, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessMailhog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessMailhogApiService.ApiEnvironmentAccessMailhogsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_mailhogs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessMailhog == nil {
		return localVarReturnValue, nil, reportError("environmentAccessMailhog is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessMailhog
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
