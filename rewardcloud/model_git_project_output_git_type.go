/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.7.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"encoding/json"
	"fmt"
)

// GitProjectOutputGitType struct for GitProjectOutputGitType
type GitProjectOutputGitType struct {
	GitTypeProjectOutput *GitTypeProjectOutput
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *GitProjectOutputGitType) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into GitTypeProjectOutput
	err = json.Unmarshal(data, &dst.GitTypeProjectOutput)
	if err == nil {
		jsonGitTypeProjectOutput, _ := json.Marshal(dst.GitTypeProjectOutput)
		if string(jsonGitTypeProjectOutput) == "{}" { // empty struct
			dst.GitTypeProjectOutput = nil
		} else {
			return nil // data stored in dst.GitTypeProjectOutput, return on the first match
		}
	} else {
		dst.GitTypeProjectOutput = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(GitProjectOutputGitType)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *GitProjectOutputGitType) MarshalJSON() ([]byte, error) {
	if src.GitTypeProjectOutput != nil {
		return json.Marshal(&src.GitTypeProjectOutput)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableGitProjectOutputGitType struct {
	value *GitProjectOutputGitType
	isSet bool
}

func (v NullableGitProjectOutputGitType) Get() *GitProjectOutputGitType {
	return v.value
}

func (v *NullableGitProjectOutputGitType) Set(val *GitProjectOutputGitType) {
	v.value = val
	v.isSet = true
}

func (v NullableGitProjectOutputGitType) IsSet() bool {
	return v.isSet
}

func (v *NullableGitProjectOutputGitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitProjectOutputGitType(val *GitProjectOutputGitType) *NullableGitProjectOutputGitType {
	return &NullableGitProjectOutputGitType{value: val, isSet: true}
}

func (v NullableGitProjectOutputGitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitProjectOutputGitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
