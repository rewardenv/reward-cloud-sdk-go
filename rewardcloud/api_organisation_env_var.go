/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// OrganisationEnvVarApiService OrganisationEnvVarApi service
type OrganisationEnvVarApiService service

type ApiApiOrganisationEnvVarsGetCollectionRequest struct {
	ctx context.Context
	ApiService *OrganisationEnvVarApiService
	page *int32
	itemsPerPage *int32
	organisation *string
	organisation2 *[]string
	envVarType *string
	envVarType2 *[]string
}

// The collection page number
func (r ApiApiOrganisationEnvVarsGetCollectionRequest) Page(page int32) ApiApiOrganisationEnvVarsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ApiApiOrganisationEnvVarsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ApiApiOrganisationEnvVarsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

// 
func (r ApiApiOrganisationEnvVarsGetCollectionRequest) Organisation(organisation string) ApiApiOrganisationEnvVarsGetCollectionRequest {
	r.organisation = &organisation
	return r
}

// 
func (r ApiApiOrganisationEnvVarsGetCollectionRequest) Organisation2(organisation2 []string) ApiApiOrganisationEnvVarsGetCollectionRequest {
	r.organisation2 = &organisation2
	return r
}

// 
func (r ApiApiOrganisationEnvVarsGetCollectionRequest) EnvVarType(envVarType string) ApiApiOrganisationEnvVarsGetCollectionRequest {
	r.envVarType = &envVarType
	return r
}

// 
func (r ApiApiOrganisationEnvVarsGetCollectionRequest) EnvVarType2(envVarType2 []string) ApiApiOrganisationEnvVarsGetCollectionRequest {
	r.envVarType2 = &envVarType2
	return r
}

func (r ApiApiOrganisationEnvVarsGetCollectionRequest) Execute() ([]OrganisationEnvVar, *http.Response, error) {
	return r.ApiService.ApiOrganisationEnvVarsGetCollectionExecute(r)
}

/*
ApiOrganisationEnvVarsGetCollection Retrieves the collection of OrganisationEnvVar resources.

Retrieves the collection of OrganisationEnvVar resources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiOrganisationEnvVarsGetCollectionRequest
*/
func (a *OrganisationEnvVarApiService) ApiOrganisationEnvVarsGetCollection(ctx context.Context) ApiApiOrganisationEnvVarsGetCollectionRequest {
	return ApiApiOrganisationEnvVarsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OrganisationEnvVar
func (a *OrganisationEnvVarApiService) ApiOrganisationEnvVarsGetCollectionExecute(r ApiApiOrganisationEnvVarsGetCollectionRequest) ([]OrganisationEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OrganisationEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganisationEnvVarApiService.ApiOrganisationEnvVarsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/organisation_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.itemsPerPage != nil {
		localVarQueryParams.Add("itemsPerPage", parameterToString(*r.itemsPerPage, ""))
	}
	if r.organisation != nil {
		localVarQueryParams.Add("organisation", parameterToString(*r.organisation, ""))
	}
	if r.organisation2 != nil {
		t := *r.organisation2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("organisation[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("organisation[]", parameterToString(t, "multi"))
		}
	}
	if r.envVarType != nil {
		localVarQueryParams.Add("envVarType", parameterToString(*r.envVarType, ""))
	}
	if r.envVarType2 != nil {
		t := *r.envVarType2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("envVarType[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("envVarType[]", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiOrganisationEnvVarsIdDeleteRequest struct {
	ctx context.Context
	ApiService *OrganisationEnvVarApiService
	id string
}

func (r ApiApiOrganisationEnvVarsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiOrganisationEnvVarsIdDeleteExecute(r)
}

/*
ApiOrganisationEnvVarsIdDelete Removes the OrganisationEnvVar resource.

Removes the OrganisationEnvVar resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id OrganisationEnvVar identifier
 @return ApiApiOrganisationEnvVarsIdDeleteRequest
*/
func (a *OrganisationEnvVarApiService) ApiOrganisationEnvVarsIdDelete(ctx context.Context, id string) ApiApiOrganisationEnvVarsIdDeleteRequest {
	return ApiApiOrganisationEnvVarsIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *OrganisationEnvVarApiService) ApiOrganisationEnvVarsIdDeleteExecute(r ApiApiOrganisationEnvVarsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganisationEnvVarApiService.ApiOrganisationEnvVarsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/organisation_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiOrganisationEnvVarsIdGetRequest struct {
	ctx context.Context
	ApiService *OrganisationEnvVarApiService
	id string
}

func (r ApiApiOrganisationEnvVarsIdGetRequest) Execute() (*OrganisationEnvVar, *http.Response, error) {
	return r.ApiService.ApiOrganisationEnvVarsIdGetExecute(r)
}

/*
ApiOrganisationEnvVarsIdGet Retrieves a OrganisationEnvVar resource.

Retrieves a OrganisationEnvVar resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id OrganisationEnvVar identifier
 @return ApiApiOrganisationEnvVarsIdGetRequest
*/
func (a *OrganisationEnvVarApiService) ApiOrganisationEnvVarsIdGet(ctx context.Context, id string) ApiApiOrganisationEnvVarsIdGetRequest {
	return ApiApiOrganisationEnvVarsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OrganisationEnvVar
func (a *OrganisationEnvVarApiService) ApiOrganisationEnvVarsIdGetExecute(r ApiApiOrganisationEnvVarsIdGetRequest) (*OrganisationEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganisationEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganisationEnvVarApiService.ApiOrganisationEnvVarsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/organisation_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiOrganisationEnvVarsIdPatchRequest struct {
	ctx context.Context
	ApiService *OrganisationEnvVarApiService
	id string
	organisationEnvVar *OrganisationEnvVar
}

// The updated OrganisationEnvVar resource
func (r ApiApiOrganisationEnvVarsIdPatchRequest) OrganisationEnvVar(organisationEnvVar OrganisationEnvVar) ApiApiOrganisationEnvVarsIdPatchRequest {
	r.organisationEnvVar = &organisationEnvVar
	return r
}

func (r ApiApiOrganisationEnvVarsIdPatchRequest) Execute() (*OrganisationEnvVar, *http.Response, error) {
	return r.ApiService.ApiOrganisationEnvVarsIdPatchExecute(r)
}

/*
ApiOrganisationEnvVarsIdPatch Updates the OrganisationEnvVar resource.

Updates the OrganisationEnvVar resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id OrganisationEnvVar identifier
 @return ApiApiOrganisationEnvVarsIdPatchRequest
*/
func (a *OrganisationEnvVarApiService) ApiOrganisationEnvVarsIdPatch(ctx context.Context, id string) ApiApiOrganisationEnvVarsIdPatchRequest {
	return ApiApiOrganisationEnvVarsIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OrganisationEnvVar
func (a *OrganisationEnvVarApiService) ApiOrganisationEnvVarsIdPatchExecute(r ApiApiOrganisationEnvVarsIdPatchRequest) (*OrganisationEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganisationEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganisationEnvVarApiService.ApiOrganisationEnvVarsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/organisation_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.organisationEnvVar == nil {
		return localVarReturnValue, nil, reportError("organisationEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.organisationEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiOrganisationEnvVarsIdPutRequest struct {
	ctx context.Context
	ApiService *OrganisationEnvVarApiService
	id string
	organisationEnvVar *OrganisationEnvVar
}

// The updated OrganisationEnvVar resource
func (r ApiApiOrganisationEnvVarsIdPutRequest) OrganisationEnvVar(organisationEnvVar OrganisationEnvVar) ApiApiOrganisationEnvVarsIdPutRequest {
	r.organisationEnvVar = &organisationEnvVar
	return r
}

func (r ApiApiOrganisationEnvVarsIdPutRequest) Execute() (*OrganisationEnvVar, *http.Response, error) {
	return r.ApiService.ApiOrganisationEnvVarsIdPutExecute(r)
}

/*
ApiOrganisationEnvVarsIdPut Replaces the OrganisationEnvVar resource.

Replaces the OrganisationEnvVar resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id OrganisationEnvVar identifier
 @return ApiApiOrganisationEnvVarsIdPutRequest
*/
func (a *OrganisationEnvVarApiService) ApiOrganisationEnvVarsIdPut(ctx context.Context, id string) ApiApiOrganisationEnvVarsIdPutRequest {
	return ApiApiOrganisationEnvVarsIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OrganisationEnvVar
func (a *OrganisationEnvVarApiService) ApiOrganisationEnvVarsIdPutExecute(r ApiApiOrganisationEnvVarsIdPutRequest) (*OrganisationEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganisationEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganisationEnvVarApiService.ApiOrganisationEnvVarsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/organisation_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.organisationEnvVar == nil {
		return localVarReturnValue, nil, reportError("organisationEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.organisationEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiOrganisationEnvVarsPostRequest struct {
	ctx context.Context
	ApiService *OrganisationEnvVarApiService
	organisationEnvVar *OrganisationEnvVar
}

// The new OrganisationEnvVar resource
func (r ApiApiOrganisationEnvVarsPostRequest) OrganisationEnvVar(organisationEnvVar OrganisationEnvVar) ApiApiOrganisationEnvVarsPostRequest {
	r.organisationEnvVar = &organisationEnvVar
	return r
}

func (r ApiApiOrganisationEnvVarsPostRequest) Execute() (*OrganisationEnvVar, *http.Response, error) {
	return r.ApiService.ApiOrganisationEnvVarsPostExecute(r)
}

/*
ApiOrganisationEnvVarsPost Creates a OrganisationEnvVar resource.

Creates a OrganisationEnvVar resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiOrganisationEnvVarsPostRequest
*/
func (a *OrganisationEnvVarApiService) ApiOrganisationEnvVarsPost(ctx context.Context) ApiApiOrganisationEnvVarsPostRequest {
	return ApiApiOrganisationEnvVarsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OrganisationEnvVar
func (a *OrganisationEnvVarApiService) ApiOrganisationEnvVarsPostExecute(r ApiApiOrganisationEnvVarsPostRequest) (*OrganisationEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganisationEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganisationEnvVarApiService.ApiOrganisationEnvVarsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/organisation_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.organisationEnvVar == nil {
		return localVarReturnValue, nil, reportError("organisationEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.organisationEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
