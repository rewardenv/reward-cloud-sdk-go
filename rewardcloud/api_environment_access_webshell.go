/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.7.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// EnvironmentAccessWebshellApiService EnvironmentAccessWebshellApi service
type EnvironmentAccessWebshellApiService service

type EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsGetCollectionRequest struct {
	ctx          context.Context
	ApiService   *EnvironmentAccessWebshellApiService
	page         *int32
	itemsPerPage *int32
}

// The collection page number
func (r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsGetCollectionRequest) Page(page int32) EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsGetCollectionRequest) Execute() ([]EnvironmentAccessWebshell, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessWebshellsGetCollectionExecute(r)
}

/*
ApiEnvironmentAccessWebshellsGetCollection Retrieves the collection of EnvironmentAccessWebshell resources.

Retrieves the collection of EnvironmentAccessWebshell resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsGetCollectionRequest
*/
func (a *EnvironmentAccessWebshellApiService) ApiEnvironmentAccessWebshellsGetCollection(ctx context.Context) EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsGetCollectionRequest {
	return EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []EnvironmentAccessWebshell
func (a *EnvironmentAccessWebshellApiService) ApiEnvironmentAccessWebshellsGetCollectionExecute(r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsGetCollectionRequest) ([]EnvironmentAccessWebshell, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []EnvironmentAccessWebshell
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessWebshellApiService.ApiEnvironmentAccessWebshellsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_webshells"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessWebshellApiService
	id         string
}

func (r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessWebshellsIdDeleteExecute(r)
}

/*
ApiEnvironmentAccessWebshellsIdDelete Removes the EnvironmentAccessWebshell resource.

Removes the EnvironmentAccessWebshell resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessWebshell identifier
	@return EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdDeleteRequest
*/
func (a *EnvironmentAccessWebshellApiService) ApiEnvironmentAccessWebshellsIdDelete(ctx context.Context, id string) EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdDeleteRequest {
	return EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EnvironmentAccessWebshellApiService) ApiEnvironmentAccessWebshellsIdDeleteExecute(r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessWebshellApiService.ApiEnvironmentAccessWebshellsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_webshells/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessWebshellApiService
	id         string
}

func (r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdGetRequest) Execute() (*EnvironmentAccessWebshell, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessWebshellsIdGetExecute(r)
}

/*
ApiEnvironmentAccessWebshellsIdGet Retrieves a EnvironmentAccessWebshell resource.

Retrieves a EnvironmentAccessWebshell resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessWebshell identifier
	@return EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdGetRequest
*/
func (a *EnvironmentAccessWebshellApiService) ApiEnvironmentAccessWebshellsIdGet(ctx context.Context, id string) EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdGetRequest {
	return EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessWebshell
func (a *EnvironmentAccessWebshellApiService) ApiEnvironmentAccessWebshellsIdGetExecute(r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdGetRequest) (*EnvironmentAccessWebshell, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessWebshell
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessWebshellApiService.ApiEnvironmentAccessWebshellsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_webshells/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPatchRequest struct {
	ctx                       context.Context
	ApiService                *EnvironmentAccessWebshellApiService
	environmentAccessWebshell *EnvironmentAccessWebshell
	id                        string
}

// The updated EnvironmentAccessWebshell resource
func (r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPatchRequest) EnvironmentAccessWebshell(environmentAccessWebshell EnvironmentAccessWebshell) EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPatchRequest {
	r.environmentAccessWebshell = &environmentAccessWebshell
	return r
}

func (r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPatchRequest) Execute() (*EnvironmentAccessWebshell, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessWebshellsIdPatchExecute(r)
}

/*
ApiEnvironmentAccessWebshellsIdPatch Updates the EnvironmentAccessWebshell resource.

Updates the EnvironmentAccessWebshell resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessWebshell identifier
	@return EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPatchRequest
*/
func (a *EnvironmentAccessWebshellApiService) ApiEnvironmentAccessWebshellsIdPatch(ctx context.Context, id string) EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPatchRequest {
	return EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessWebshell
func (a *EnvironmentAccessWebshellApiService) ApiEnvironmentAccessWebshellsIdPatchExecute(r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPatchRequest) (*EnvironmentAccessWebshell, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessWebshell
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessWebshellApiService.ApiEnvironmentAccessWebshellsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_webshells/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessWebshell == nil {
		return localVarReturnValue, nil, reportError("environmentAccessWebshell is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessWebshell
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPutRequest struct {
	ctx                       context.Context
	ApiService                *EnvironmentAccessWebshellApiService
	environmentAccessWebshell *EnvironmentAccessWebshell
	id                        string
}

// The updated EnvironmentAccessWebshell resource
func (r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPutRequest) EnvironmentAccessWebshell(environmentAccessWebshell EnvironmentAccessWebshell) EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPutRequest {
	r.environmentAccessWebshell = &environmentAccessWebshell
	return r
}

func (r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPutRequest) Execute() (*EnvironmentAccessWebshell, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessWebshellsIdPutExecute(r)
}

/*
ApiEnvironmentAccessWebshellsIdPut Replaces the EnvironmentAccessWebshell resource.

Replaces the EnvironmentAccessWebshell resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessWebshell identifier
	@return EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPutRequest
*/
func (a *EnvironmentAccessWebshellApiService) ApiEnvironmentAccessWebshellsIdPut(ctx context.Context, id string) EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPutRequest {
	return EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessWebshell
func (a *EnvironmentAccessWebshellApiService) ApiEnvironmentAccessWebshellsIdPutExecute(r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsIdPutRequest) (*EnvironmentAccessWebshell, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessWebshell
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessWebshellApiService.ApiEnvironmentAccessWebshellsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_webshells/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessWebshell == nil {
		return localVarReturnValue, nil, reportError("environmentAccessWebshell is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessWebshell
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsPostRequest struct {
	ctx                       context.Context
	ApiService                *EnvironmentAccessWebshellApiService
	environmentAccessWebshell *EnvironmentAccessWebshell
}

// The new EnvironmentAccessWebshell resource
func (r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsPostRequest) EnvironmentAccessWebshell(environmentAccessWebshell EnvironmentAccessWebshell) EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsPostRequest {
	r.environmentAccessWebshell = &environmentAccessWebshell
	return r
}

func (r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsPostRequest) Execute() (*EnvironmentAccessWebshell, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessWebshellsPostExecute(r)
}

/*
ApiEnvironmentAccessWebshellsPost Creates a EnvironmentAccessWebshell resource.

Creates a EnvironmentAccessWebshell resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsPostRequest
*/
func (a *EnvironmentAccessWebshellApiService) ApiEnvironmentAccessWebshellsPost(ctx context.Context) EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsPostRequest {
	return EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessWebshell
func (a *EnvironmentAccessWebshellApiService) ApiEnvironmentAccessWebshellsPostExecute(r EnvironmentAccessWebshellApiApiEnvironmentAccessWebshellsPostRequest) (*EnvironmentAccessWebshell, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessWebshell
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessWebshellApiService.ApiEnvironmentAccessWebshellsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_webshells"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessWebshell == nil {
		return localVarReturnValue, nil, reportError("environmentAccessWebshell is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessWebshell
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
