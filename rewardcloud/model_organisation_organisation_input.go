/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.7.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"encoding/json"
)

// checks if the OrganisationOrganisationInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganisationOrganisationInput{}

// OrganisationOrganisationInput Class Organisation
type OrganisationOrganisationInput struct {
	Name     NullableString `json:"name,omitempty"`
	CodeName NullableString `json:"codeName,omitempty"`
	// User related property - One user can only have 1 pcs default Organisation
	IsDefault          NullableBool                          `json:"isDefault,omitempty"`
	Team               []string                              `json:"team,omitempty"`
	OrganisationEnvVar []OrganisationEnvVarOrganisationInput `json:"organisationEnvVar,omitempty"`
}

// NewOrganisationOrganisationInput instantiates a new OrganisationOrganisationInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganisationOrganisationInput() *OrganisationOrganisationInput {
	this := OrganisationOrganisationInput{}
	return &this
}

// NewOrganisationOrganisationInputWithDefaults instantiates a new OrganisationOrganisationInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganisationOrganisationInputWithDefaults() *OrganisationOrganisationInput {
	this := OrganisationOrganisationInput{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganisationOrganisationInput) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganisationOrganisationInput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *OrganisationOrganisationInput) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *OrganisationOrganisationInput) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *OrganisationOrganisationInput) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *OrganisationOrganisationInput) UnsetName() {
	o.Name.Unset()
}

// GetCodeName returns the CodeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganisationOrganisationInput) GetCodeName() string {
	if o == nil || IsNil(o.CodeName.Get()) {
		var ret string
		return ret
	}
	return *o.CodeName.Get()
}

// GetCodeNameOk returns a tuple with the CodeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganisationOrganisationInput) GetCodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CodeName.Get(), o.CodeName.IsSet()
}

// HasCodeName returns a boolean if a field has been set.
func (o *OrganisationOrganisationInput) HasCodeName() bool {
	if o != nil && o.CodeName.IsSet() {
		return true
	}

	return false
}

// SetCodeName gets a reference to the given NullableString and assigns it to the CodeName field.
func (o *OrganisationOrganisationInput) SetCodeName(v string) {
	o.CodeName.Set(&v)
}

// SetCodeNameNil sets the value for CodeName to be an explicit nil
func (o *OrganisationOrganisationInput) SetCodeNameNil() {
	o.CodeName.Set(nil)
}

// UnsetCodeName ensures that no value is present for CodeName, not even an explicit nil
func (o *OrganisationOrganisationInput) UnsetCodeName() {
	o.CodeName.Unset()
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganisationOrganisationInput) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDefault.Get()
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganisationOrganisationInput) GetIsDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDefault.Get(), o.IsDefault.IsSet()
}

// HasIsDefault returns a boolean if a field has been set.
func (o *OrganisationOrganisationInput) HasIsDefault() bool {
	if o != nil && o.IsDefault.IsSet() {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given NullableBool and assigns it to the IsDefault field.
func (o *OrganisationOrganisationInput) SetIsDefault(v bool) {
	o.IsDefault.Set(&v)
}

// SetIsDefaultNil sets the value for IsDefault to be an explicit nil
func (o *OrganisationOrganisationInput) SetIsDefaultNil() {
	o.IsDefault.Set(nil)
}

// UnsetIsDefault ensures that no value is present for IsDefault, not even an explicit nil
func (o *OrganisationOrganisationInput) UnsetIsDefault() {
	o.IsDefault.Unset()
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *OrganisationOrganisationInput) GetTeam() []string {
	if o == nil || IsNil(o.Team) {
		var ret []string
		return ret
	}
	return o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganisationOrganisationInput) GetTeamOk() ([]string, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *OrganisationOrganisationInput) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given []string and assigns it to the Team field.
func (o *OrganisationOrganisationInput) SetTeam(v []string) {
	o.Team = v
}

// GetOrganisationEnvVar returns the OrganisationEnvVar field value if set, zero value otherwise.
func (o *OrganisationOrganisationInput) GetOrganisationEnvVar() []OrganisationEnvVarOrganisationInput {
	if o == nil || IsNil(o.OrganisationEnvVar) {
		var ret []OrganisationEnvVarOrganisationInput
		return ret
	}
	return o.OrganisationEnvVar
}

// GetOrganisationEnvVarOk returns a tuple with the OrganisationEnvVar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganisationOrganisationInput) GetOrganisationEnvVarOk() ([]OrganisationEnvVarOrganisationInput, bool) {
	if o == nil || IsNil(o.OrganisationEnvVar) {
		return nil, false
	}
	return o.OrganisationEnvVar, true
}

// HasOrganisationEnvVar returns a boolean if a field has been set.
func (o *OrganisationOrganisationInput) HasOrganisationEnvVar() bool {
	if o != nil && !IsNil(o.OrganisationEnvVar) {
		return true
	}

	return false
}

// SetOrganisationEnvVar gets a reference to the given []OrganisationEnvVarOrganisationInput and assigns it to the OrganisationEnvVar field.
func (o *OrganisationOrganisationInput) SetOrganisationEnvVar(v []OrganisationEnvVarOrganisationInput) {
	o.OrganisationEnvVar = v
}

func (o OrganisationOrganisationInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganisationOrganisationInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.CodeName.IsSet() {
		toSerialize["codeName"] = o.CodeName.Get()
	}
	if o.IsDefault.IsSet() {
		toSerialize["isDefault"] = o.IsDefault.Get()
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	if !IsNil(o.OrganisationEnvVar) {
		toSerialize["organisationEnvVar"] = o.OrganisationEnvVar
	}
	return toSerialize, nil
}

type NullableOrganisationOrganisationInput struct {
	value *OrganisationOrganisationInput
	isSet bool
}

func (v NullableOrganisationOrganisationInput) Get() *OrganisationOrganisationInput {
	return v.value
}

func (v *NullableOrganisationOrganisationInput) Set(val *OrganisationOrganisationInput) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganisationOrganisationInput) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganisationOrganisationInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganisationOrganisationInput(val *OrganisationOrganisationInput) *NullableOrganisationOrganisationInput {
	return &NullableOrganisationOrganisationInput{value: val, isSet: true}
}

func (v NullableOrganisationOrganisationInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganisationOrganisationInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
