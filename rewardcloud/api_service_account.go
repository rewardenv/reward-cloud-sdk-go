/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.7.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// ServiceAccountApiService ServiceAccountApi service
type ServiceAccountApiService service

type ServiceAccountApiApiServiceAccountsGetCollectionRequest struct {
	ctx                     context.Context
	ApiService              *ServiceAccountApiService
	page                    *int32
	itemsPerPage            *int32
	project                 *string
	project2                *[]string
	serviceAccountGit       *string
	serviceAccountGit2      *[]string
	serviceAccountRegistry  *string
	serviceAccountRegistry2 *[]string
}

// The collection page number
func (r ServiceAccountApiApiServiceAccountsGetCollectionRequest) Page(page int32) ServiceAccountApiApiServiceAccountsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ServiceAccountApiApiServiceAccountsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ServiceAccountApiApiServiceAccountsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r ServiceAccountApiApiServiceAccountsGetCollectionRequest) Project(project string) ServiceAccountApiApiServiceAccountsGetCollectionRequest {
	r.project = &project
	return r
}

func (r ServiceAccountApiApiServiceAccountsGetCollectionRequest) Project2(project2 []string) ServiceAccountApiApiServiceAccountsGetCollectionRequest {
	r.project2 = &project2
	return r
}

func (r ServiceAccountApiApiServiceAccountsGetCollectionRequest) ServiceAccountGit(serviceAccountGit string) ServiceAccountApiApiServiceAccountsGetCollectionRequest {
	r.serviceAccountGit = &serviceAccountGit
	return r
}

func (r ServiceAccountApiApiServiceAccountsGetCollectionRequest) ServiceAccountGit2(serviceAccountGit2 []string) ServiceAccountApiApiServiceAccountsGetCollectionRequest {
	r.serviceAccountGit2 = &serviceAccountGit2
	return r
}

func (r ServiceAccountApiApiServiceAccountsGetCollectionRequest) ServiceAccountRegistry(serviceAccountRegistry string) ServiceAccountApiApiServiceAccountsGetCollectionRequest {
	r.serviceAccountRegistry = &serviceAccountRegistry
	return r
}

func (r ServiceAccountApiApiServiceAccountsGetCollectionRequest) ServiceAccountRegistry2(serviceAccountRegistry2 []string) ServiceAccountApiApiServiceAccountsGetCollectionRequest {
	r.serviceAccountRegistry2 = &serviceAccountRegistry2
	return r
}

func (r ServiceAccountApiApiServiceAccountsGetCollectionRequest) Execute() ([]ServiceAccount, *http.Response, error) {
	return r.ApiService.ApiServiceAccountsGetCollectionExecute(r)
}

/*
ApiServiceAccountsGetCollection Retrieves the collection of ServiceAccount resources.

Retrieves the collection of ServiceAccount resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ServiceAccountApiApiServiceAccountsGetCollectionRequest
*/
func (a *ServiceAccountApiService) ApiServiceAccountsGetCollection(ctx context.Context) ServiceAccountApiApiServiceAccountsGetCollectionRequest {
	return ServiceAccountApiApiServiceAccountsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ServiceAccount
func (a *ServiceAccountApiService) ApiServiceAccountsGetCollectionExecute(r ServiceAccountApiApiServiceAccountsGetCollectionRequest) ([]ServiceAccount, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ServiceAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceAccountApiService.ApiServiceAccountsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/service_accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	if r.project != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "project", r.project, "")
	}
	if r.project2 != nil {
		t := *r.project2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "project[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "project[]", t, "multi")
		}
	}
	if r.serviceAccountGit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serviceAccountGit", r.serviceAccountGit, "")
	}
	if r.serviceAccountGit2 != nil {
		t := *r.serviceAccountGit2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serviceAccountGit[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serviceAccountGit[]", t, "multi")
		}
	}
	if r.serviceAccountRegistry != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serviceAccountRegistry", r.serviceAccountRegistry, "")
	}
	if r.serviceAccountRegistry2 != nil {
		t := *r.serviceAccountRegistry2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serviceAccountRegistry[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serviceAccountRegistry[]", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServiceAccountApiApiServiceAccountsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *ServiceAccountApiService
	id         string
}

func (r ServiceAccountApiApiServiceAccountsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiServiceAccountsIdDeleteExecute(r)
}

/*
ApiServiceAccountsIdDelete Removes the ServiceAccount resource.

Removes the ServiceAccount resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ServiceAccount identifier
	@return ServiceAccountApiApiServiceAccountsIdDeleteRequest
*/
func (a *ServiceAccountApiService) ApiServiceAccountsIdDelete(ctx context.Context, id string) ServiceAccountApiApiServiceAccountsIdDeleteRequest {
	return ServiceAccountApiApiServiceAccountsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ServiceAccountApiService) ApiServiceAccountsIdDeleteExecute(r ServiceAccountApiApiServiceAccountsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceAccountApiService.ApiServiceAccountsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/service_accounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ServiceAccountApiApiServiceAccountsIdGetRequest struct {
	ctx        context.Context
	ApiService *ServiceAccountApiService
	id         string
}

func (r ServiceAccountApiApiServiceAccountsIdGetRequest) Execute() (*ServiceAccount, *http.Response, error) {
	return r.ApiService.ApiServiceAccountsIdGetExecute(r)
}

/*
ApiServiceAccountsIdGet Retrieves a ServiceAccount resource.

Retrieves a ServiceAccount resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ServiceAccount identifier
	@return ServiceAccountApiApiServiceAccountsIdGetRequest
*/
func (a *ServiceAccountApiService) ApiServiceAccountsIdGet(ctx context.Context, id string) ServiceAccountApiApiServiceAccountsIdGetRequest {
	return ServiceAccountApiApiServiceAccountsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ServiceAccount
func (a *ServiceAccountApiService) ApiServiceAccountsIdGetExecute(r ServiceAccountApiApiServiceAccountsIdGetRequest) (*ServiceAccount, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceAccountApiService.ApiServiceAccountsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/service_accounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServiceAccountApiApiServiceAccountsIdPatchRequest struct {
	ctx            context.Context
	ApiService     *ServiceAccountApiService
	serviceAccount *ServiceAccount
	id             string
}

// The updated ServiceAccount resource
func (r ServiceAccountApiApiServiceAccountsIdPatchRequest) ServiceAccount(serviceAccount ServiceAccount) ServiceAccountApiApiServiceAccountsIdPatchRequest {
	r.serviceAccount = &serviceAccount
	return r
}

func (r ServiceAccountApiApiServiceAccountsIdPatchRequest) Execute() (*ServiceAccount, *http.Response, error) {
	return r.ApiService.ApiServiceAccountsIdPatchExecute(r)
}

/*
ApiServiceAccountsIdPatch Updates the ServiceAccount resource.

Updates the ServiceAccount resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ServiceAccount identifier
	@return ServiceAccountApiApiServiceAccountsIdPatchRequest
*/
func (a *ServiceAccountApiService) ApiServiceAccountsIdPatch(ctx context.Context, id string) ServiceAccountApiApiServiceAccountsIdPatchRequest {
	return ServiceAccountApiApiServiceAccountsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ServiceAccount
func (a *ServiceAccountApiService) ApiServiceAccountsIdPatchExecute(r ServiceAccountApiApiServiceAccountsIdPatchRequest) (*ServiceAccount, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceAccountApiService.ApiServiceAccountsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/service_accounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serviceAccount == nil {
		return localVarReturnValue, nil, reportError("serviceAccount is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceAccount
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServiceAccountApiApiServiceAccountsIdPutRequest struct {
	ctx            context.Context
	ApiService     *ServiceAccountApiService
	serviceAccount *ServiceAccount
	id             string
}

// The updated ServiceAccount resource
func (r ServiceAccountApiApiServiceAccountsIdPutRequest) ServiceAccount(serviceAccount ServiceAccount) ServiceAccountApiApiServiceAccountsIdPutRequest {
	r.serviceAccount = &serviceAccount
	return r
}

func (r ServiceAccountApiApiServiceAccountsIdPutRequest) Execute() (*ServiceAccount, *http.Response, error) {
	return r.ApiService.ApiServiceAccountsIdPutExecute(r)
}

/*
ApiServiceAccountsIdPut Replaces the ServiceAccount resource.

Replaces the ServiceAccount resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ServiceAccount identifier
	@return ServiceAccountApiApiServiceAccountsIdPutRequest
*/
func (a *ServiceAccountApiService) ApiServiceAccountsIdPut(ctx context.Context, id string) ServiceAccountApiApiServiceAccountsIdPutRequest {
	return ServiceAccountApiApiServiceAccountsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ServiceAccount
func (a *ServiceAccountApiService) ApiServiceAccountsIdPutExecute(r ServiceAccountApiApiServiceAccountsIdPutRequest) (*ServiceAccount, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceAccountApiService.ApiServiceAccountsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/service_accounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serviceAccount == nil {
		return localVarReturnValue, nil, reportError("serviceAccount is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceAccount
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServiceAccountApiApiServiceAccountsPostRequest struct {
	ctx            context.Context
	ApiService     *ServiceAccountApiService
	serviceAccount *ServiceAccount
}

// The new ServiceAccount resource
func (r ServiceAccountApiApiServiceAccountsPostRequest) ServiceAccount(serviceAccount ServiceAccount) ServiceAccountApiApiServiceAccountsPostRequest {
	r.serviceAccount = &serviceAccount
	return r
}

func (r ServiceAccountApiApiServiceAccountsPostRequest) Execute() (*ServiceAccount, *http.Response, error) {
	return r.ApiService.ApiServiceAccountsPostExecute(r)
}

/*
ApiServiceAccountsPost Creates a ServiceAccount resource.

Creates a ServiceAccount resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ServiceAccountApiApiServiceAccountsPostRequest
*/
func (a *ServiceAccountApiService) ApiServiceAccountsPost(ctx context.Context) ServiceAccountApiApiServiceAccountsPostRequest {
	return ServiceAccountApiApiServiceAccountsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServiceAccount
func (a *ServiceAccountApiService) ApiServiceAccountsPostExecute(r ServiceAccountApiApiServiceAccountsPostRequest) (*ServiceAccount, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceAccountApiService.ApiServiceAccountsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/service_accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serviceAccount == nil {
		return localVarReturnValue, nil, reportError("serviceAccount is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceAccount
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
