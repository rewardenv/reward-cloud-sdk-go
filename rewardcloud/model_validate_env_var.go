/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.7.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"encoding/json"
)

// checks if the ValidateEnvVar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateEnvVar{}

// ValidateEnvVar struct for ValidateEnvVar
type ValidateEnvVar struct {
	Word *string `json:"word,omitempty"`
	Iri  *string `json:"iri,omitempty"`
}

// NewValidateEnvVar instantiates a new ValidateEnvVar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateEnvVar() *ValidateEnvVar {
	this := ValidateEnvVar{}
	return &this
}

// NewValidateEnvVarWithDefaults instantiates a new ValidateEnvVar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateEnvVarWithDefaults() *ValidateEnvVar {
	this := ValidateEnvVar{}
	return &this
}

// GetWord returns the Word field value if set, zero value otherwise.
func (o *ValidateEnvVar) GetWord() string {
	if o == nil || IsNil(o.Word) {
		var ret string
		return ret
	}
	return *o.Word
}

// GetWordOk returns a tuple with the Word field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateEnvVar) GetWordOk() (*string, bool) {
	if o == nil || IsNil(o.Word) {
		return nil, false
	}
	return o.Word, true
}

// HasWord returns a boolean if a field has been set.
func (o *ValidateEnvVar) HasWord() bool {
	if o != nil && !IsNil(o.Word) {
		return true
	}

	return false
}

// SetWord gets a reference to the given string and assigns it to the Word field.
func (o *ValidateEnvVar) SetWord(v string) {
	o.Word = &v
}

// GetIri returns the Iri field value if set, zero value otherwise.
func (o *ValidateEnvVar) GetIri() string {
	if o == nil || IsNil(o.Iri) {
		var ret string
		return ret
	}
	return *o.Iri
}

// GetIriOk returns a tuple with the Iri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateEnvVar) GetIriOk() (*string, bool) {
	if o == nil || IsNil(o.Iri) {
		return nil, false
	}
	return o.Iri, true
}

// HasIri returns a boolean if a field has been set.
func (o *ValidateEnvVar) HasIri() bool {
	if o != nil && !IsNil(o.Iri) {
		return true
	}

	return false
}

// SetIri gets a reference to the given string and assigns it to the Iri field.
func (o *ValidateEnvVar) SetIri(v string) {
	o.Iri = &v
}

func (o ValidateEnvVar) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateEnvVar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Word) {
		toSerialize["word"] = o.Word
	}
	if !IsNil(o.Iri) {
		toSerialize["iri"] = o.Iri
	}
	return toSerialize, nil
}

type NullableValidateEnvVar struct {
	value *ValidateEnvVar
	isSet bool
}

func (v NullableValidateEnvVar) Get() *ValidateEnvVar {
	return v.value
}

func (v *NullableValidateEnvVar) Set(val *ValidateEnvVar) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateEnvVar) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateEnvVar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateEnvVar(val *ValidateEnvVar) *NullableValidateEnvVar {
	return &NullableValidateEnvVar{value: val, isSet: true}
}

func (v NullableValidateEnvVar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateEnvVar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
