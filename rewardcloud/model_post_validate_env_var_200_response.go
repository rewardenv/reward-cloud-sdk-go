/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.7.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"encoding/json"
)

// checks if the PostValidateEnvVar200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostValidateEnvVar200Response{}

// PostValidateEnvVar200Response struct for PostValidateEnvVar200Response
type PostValidateEnvVar200Response struct {
	IsValid  *bool    `json:"isValid,omitempty"`
	Messages []string `json:"messages,omitempty"`
}

// NewPostValidateEnvVar200Response instantiates a new PostValidateEnvVar200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostValidateEnvVar200Response() *PostValidateEnvVar200Response {
	this := PostValidateEnvVar200Response{}
	return &this
}

// NewPostValidateEnvVar200ResponseWithDefaults instantiates a new PostValidateEnvVar200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostValidateEnvVar200ResponseWithDefaults() *PostValidateEnvVar200Response {
	this := PostValidateEnvVar200Response{}
	return &this
}

// GetIsValid returns the IsValid field value if set, zero value otherwise.
func (o *PostValidateEnvVar200Response) GetIsValid() bool {
	if o == nil || IsNil(o.IsValid) {
		var ret bool
		return ret
	}
	return *o.IsValid
}

// GetIsValidOk returns a tuple with the IsValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostValidateEnvVar200Response) GetIsValidOk() (*bool, bool) {
	if o == nil || IsNil(o.IsValid) {
		return nil, false
	}
	return o.IsValid, true
}

// HasIsValid returns a boolean if a field has been set.
func (o *PostValidateEnvVar200Response) HasIsValid() bool {
	if o != nil && !IsNil(o.IsValid) {
		return true
	}

	return false
}

// SetIsValid gets a reference to the given bool and assigns it to the IsValid field.
func (o *PostValidateEnvVar200Response) SetIsValid(v bool) {
	o.IsValid = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *PostValidateEnvVar200Response) GetMessages() []string {
	if o == nil || IsNil(o.Messages) {
		var ret []string
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostValidateEnvVar200Response) GetMessagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *PostValidateEnvVar200Response) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []string and assigns it to the Messages field.
func (o *PostValidateEnvVar200Response) SetMessages(v []string) {
	o.Messages = v
}

func (o PostValidateEnvVar200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostValidateEnvVar200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsValid) {
		toSerialize["isValid"] = o.IsValid
	}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	return toSerialize, nil
}

type NullablePostValidateEnvVar200Response struct {
	value *PostValidateEnvVar200Response
	isSet bool
}

func (v NullablePostValidateEnvVar200Response) Get() *PostValidateEnvVar200Response {
	return v.value
}

func (v *NullablePostValidateEnvVar200Response) Set(val *PostValidateEnvVar200Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePostValidateEnvVar200Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePostValidateEnvVar200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostValidateEnvVar200Response(val *PostValidateEnvVar200Response) *NullablePostValidateEnvVar200Response {
	return &NullablePostValidateEnvVar200Response{value: val, isSet: true}
}

func (v NullablePostValidateEnvVar200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostValidateEnvVar200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
