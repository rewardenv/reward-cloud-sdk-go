/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// ProjectTypeVersionEnvVarApiService ProjectTypeVersionEnvVarApi service
type ProjectTypeVersionEnvVarApiService service

type ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest struct {
	ctx                 context.Context
	ApiService          *ProjectTypeVersionEnvVarApiService
	page                *int32
	itemsPerPage        *int32
	projectTypeVersion  *string
	projectTypeVersion2 *[]string
}

// The collection page number
func (r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest) Page(page int32) ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest) ProjectTypeVersion(projectTypeVersion string) ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest {
	r.projectTypeVersion = &projectTypeVersion
	return r
}

func (r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest) ProjectTypeVersion2(projectTypeVersion2 []string) ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest {
	r.projectTypeVersion2 = &projectTypeVersion2
	return r
}

func (r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest) Execute() ([]ProjectTypeVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarsGetCollectionExecute(r)
}

/*
ApiProjectTypeVersionEnvVarsGetCollection Retrieves the collection of ProjectTypeVersionEnvVar resources.

Retrieves the collection of ProjectTypeVersionEnvVar resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest
*/
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsGetCollection(ctx context.Context) ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest {
	return ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ProjectTypeVersionEnvVar
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsGetCollectionExecute(r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsGetCollectionRequest) ([]ProjectTypeVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProjectTypeVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarApiService.ApiProjectTypeVersionEnvVarsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	if r.projectTypeVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectTypeVersion", r.projectTypeVersion, "")
	}
	if r.projectTypeVersion2 != nil {
		t := *r.projectTypeVersion2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "projectTypeVersion[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "projectTypeVersion[]", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *ProjectTypeVersionEnvVarApiService
	id         string
}

func (r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarsIdDeleteExecute(r)
}

/*
ApiProjectTypeVersionEnvVarsIdDelete Removes the ProjectTypeVersionEnvVar resource.

Removes the ProjectTypeVersionEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTypeVersionEnvVar identifier
	@return ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdDeleteRequest
*/
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdDelete(ctx context.Context, id string) ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdDeleteRequest {
	return ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdDeleteExecute(r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarApiService.ApiProjectTypeVersionEnvVarsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdGetRequest struct {
	ctx        context.Context
	ApiService *ProjectTypeVersionEnvVarApiService
	id         string
}

func (r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdGetRequest) Execute() (*ProjectTypeVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarsIdGetExecute(r)
}

/*
ApiProjectTypeVersionEnvVarsIdGet Retrieves a ProjectTypeVersionEnvVar resource.

Retrieves a ProjectTypeVersionEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTypeVersionEnvVar identifier
	@return ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdGetRequest
*/
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdGet(ctx context.Context, id string) ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdGetRequest {
	return ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectTypeVersionEnvVar
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdGetExecute(r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdGetRequest) (*ProjectTypeVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTypeVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarApiService.ApiProjectTypeVersionEnvVarsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPatchRequest struct {
	ctx                      context.Context
	ApiService               *ProjectTypeVersionEnvVarApiService
	projectTypeVersionEnvVar *ProjectTypeVersionEnvVar
	id                       string
}

// The updated ProjectTypeVersionEnvVar resource
func (r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPatchRequest) ProjectTypeVersionEnvVar(projectTypeVersionEnvVar ProjectTypeVersionEnvVar) ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPatchRequest {
	r.projectTypeVersionEnvVar = &projectTypeVersionEnvVar
	return r
}

func (r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPatchRequest) Execute() (*ProjectTypeVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarsIdPatchExecute(r)
}

/*
ApiProjectTypeVersionEnvVarsIdPatch Updates the ProjectTypeVersionEnvVar resource.

Updates the ProjectTypeVersionEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTypeVersionEnvVar identifier
	@return ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPatchRequest
*/
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdPatch(ctx context.Context, id string) ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPatchRequest {
	return ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectTypeVersionEnvVar
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdPatchExecute(r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPatchRequest) (*ProjectTypeVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTypeVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarApiService.ApiProjectTypeVersionEnvVarsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTypeVersionEnvVar == nil {
		return localVarReturnValue, nil, reportError("projectTypeVersionEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectTypeVersionEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPutRequest struct {
	ctx                      context.Context
	ApiService               *ProjectTypeVersionEnvVarApiService
	projectTypeVersionEnvVar *ProjectTypeVersionEnvVar
	id                       string
}

// The updated ProjectTypeVersionEnvVar resource
func (r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPutRequest) ProjectTypeVersionEnvVar(projectTypeVersionEnvVar ProjectTypeVersionEnvVar) ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPutRequest {
	r.projectTypeVersionEnvVar = &projectTypeVersionEnvVar
	return r
}

func (r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPutRequest) Execute() (*ProjectTypeVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarsIdPutExecute(r)
}

/*
ApiProjectTypeVersionEnvVarsIdPut Replaces the ProjectTypeVersionEnvVar resource.

Replaces the ProjectTypeVersionEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTypeVersionEnvVar identifier
	@return ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPutRequest
*/
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdPut(ctx context.Context, id string) ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPutRequest {
	return ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectTypeVersionEnvVar
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdPutExecute(r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsIdPutRequest) (*ProjectTypeVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTypeVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarApiService.ApiProjectTypeVersionEnvVarsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTypeVersionEnvVar == nil {
		return localVarReturnValue, nil, reportError("projectTypeVersionEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectTypeVersionEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsPostRequest struct {
	ctx                      context.Context
	ApiService               *ProjectTypeVersionEnvVarApiService
	projectTypeVersionEnvVar *ProjectTypeVersionEnvVar
}

// The new ProjectTypeVersionEnvVar resource
func (r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsPostRequest) ProjectTypeVersionEnvVar(projectTypeVersionEnvVar ProjectTypeVersionEnvVar) ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsPostRequest {
	r.projectTypeVersionEnvVar = &projectTypeVersionEnvVar
	return r
}

func (r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsPostRequest) Execute() (*ProjectTypeVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarsPostExecute(r)
}

/*
ApiProjectTypeVersionEnvVarsPost Creates a ProjectTypeVersionEnvVar resource.

Creates a ProjectTypeVersionEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsPostRequest
*/
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsPost(ctx context.Context) ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsPostRequest {
	return ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ProjectTypeVersionEnvVar
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsPostExecute(r ProjectTypeVersionEnvVarApiApiProjectTypeVersionEnvVarsPostRequest) (*ProjectTypeVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTypeVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarApiService.ApiProjectTypeVersionEnvVarsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTypeVersionEnvVar == nil {
		return localVarReturnValue, nil, reportError("projectTypeVersionEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectTypeVersionEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
