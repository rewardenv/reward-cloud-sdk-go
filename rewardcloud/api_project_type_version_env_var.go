/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ProjectTypeVersionEnvVarApiService ProjectTypeVersionEnvVarApi service
type ProjectTypeVersionEnvVarApiService service

type ApiApiProjectTypeVersionEnvVarsGetCollectionRequest struct {
	ctx context.Context
	ApiService *ProjectTypeVersionEnvVarApiService
	page *int32
	itemsPerPage *int32
	projectTypeVersion *string
	projectTypeVersion2 *[]string
}

// The collection page number
func (r ApiApiProjectTypeVersionEnvVarsGetCollectionRequest) Page(page int32) ApiApiProjectTypeVersionEnvVarsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ApiApiProjectTypeVersionEnvVarsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ApiApiProjectTypeVersionEnvVarsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

// 
func (r ApiApiProjectTypeVersionEnvVarsGetCollectionRequest) ProjectTypeVersion(projectTypeVersion string) ApiApiProjectTypeVersionEnvVarsGetCollectionRequest {
	r.projectTypeVersion = &projectTypeVersion
	return r
}

// 
func (r ApiApiProjectTypeVersionEnvVarsGetCollectionRequest) ProjectTypeVersion2(projectTypeVersion2 []string) ApiApiProjectTypeVersionEnvVarsGetCollectionRequest {
	r.projectTypeVersion2 = &projectTypeVersion2
	return r
}

func (r ApiApiProjectTypeVersionEnvVarsGetCollectionRequest) Execute() ([]ProjectTypeVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarsGetCollectionExecute(r)
}

/*
ApiProjectTypeVersionEnvVarsGetCollection Retrieves the collection of ProjectTypeVersionEnvVar resources.

Retrieves the collection of ProjectTypeVersionEnvVar resources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiProjectTypeVersionEnvVarsGetCollectionRequest
*/
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsGetCollection(ctx context.Context) ApiApiProjectTypeVersionEnvVarsGetCollectionRequest {
	return ApiApiProjectTypeVersionEnvVarsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ProjectTypeVersionEnvVar
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsGetCollectionExecute(r ApiApiProjectTypeVersionEnvVarsGetCollectionRequest) ([]ProjectTypeVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectTypeVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarApiService.ApiProjectTypeVersionEnvVarsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.itemsPerPage != nil {
		localVarQueryParams.Add("itemsPerPage", parameterToString(*r.itemsPerPage, ""))
	}
	if r.projectTypeVersion != nil {
		localVarQueryParams.Add("projectTypeVersion", parameterToString(*r.projectTypeVersion, ""))
	}
	if r.projectTypeVersion2 != nil {
		t := *r.projectTypeVersion2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("projectTypeVersion[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("projectTypeVersion[]", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiProjectTypeVersionEnvVarsIdDeleteRequest struct {
	ctx context.Context
	ApiService *ProjectTypeVersionEnvVarApiService
	id string
}

func (r ApiApiProjectTypeVersionEnvVarsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarsIdDeleteExecute(r)
}

/*
ApiProjectTypeVersionEnvVarsIdDelete Removes the ProjectTypeVersionEnvVar resource.

Removes the ProjectTypeVersionEnvVar resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTypeVersionEnvVar identifier
 @return ApiApiProjectTypeVersionEnvVarsIdDeleteRequest
*/
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdDelete(ctx context.Context, id string) ApiApiProjectTypeVersionEnvVarsIdDeleteRequest {
	return ApiApiProjectTypeVersionEnvVarsIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdDeleteExecute(r ApiApiProjectTypeVersionEnvVarsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarApiService.ApiProjectTypeVersionEnvVarsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiProjectTypeVersionEnvVarsIdGetRequest struct {
	ctx context.Context
	ApiService *ProjectTypeVersionEnvVarApiService
	id string
}

func (r ApiApiProjectTypeVersionEnvVarsIdGetRequest) Execute() (*ProjectTypeVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarsIdGetExecute(r)
}

/*
ApiProjectTypeVersionEnvVarsIdGet Retrieves a ProjectTypeVersionEnvVar resource.

Retrieves a ProjectTypeVersionEnvVar resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTypeVersionEnvVar identifier
 @return ApiApiProjectTypeVersionEnvVarsIdGetRequest
*/
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdGet(ctx context.Context, id string) ApiApiProjectTypeVersionEnvVarsIdGetRequest {
	return ApiApiProjectTypeVersionEnvVarsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProjectTypeVersionEnvVar
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdGetExecute(r ApiApiProjectTypeVersionEnvVarsIdGetRequest) (*ProjectTypeVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTypeVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarApiService.ApiProjectTypeVersionEnvVarsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiProjectTypeVersionEnvVarsIdPatchRequest struct {
	ctx context.Context
	ApiService *ProjectTypeVersionEnvVarApiService
	id string
	projectTypeVersionEnvVar *ProjectTypeVersionEnvVar
}

// The updated ProjectTypeVersionEnvVar resource
func (r ApiApiProjectTypeVersionEnvVarsIdPatchRequest) ProjectTypeVersionEnvVar(projectTypeVersionEnvVar ProjectTypeVersionEnvVar) ApiApiProjectTypeVersionEnvVarsIdPatchRequest {
	r.projectTypeVersionEnvVar = &projectTypeVersionEnvVar
	return r
}

func (r ApiApiProjectTypeVersionEnvVarsIdPatchRequest) Execute() (*ProjectTypeVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarsIdPatchExecute(r)
}

/*
ApiProjectTypeVersionEnvVarsIdPatch Updates the ProjectTypeVersionEnvVar resource.

Updates the ProjectTypeVersionEnvVar resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTypeVersionEnvVar identifier
 @return ApiApiProjectTypeVersionEnvVarsIdPatchRequest
*/
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdPatch(ctx context.Context, id string) ApiApiProjectTypeVersionEnvVarsIdPatchRequest {
	return ApiApiProjectTypeVersionEnvVarsIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProjectTypeVersionEnvVar
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdPatchExecute(r ApiApiProjectTypeVersionEnvVarsIdPatchRequest) (*ProjectTypeVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTypeVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarApiService.ApiProjectTypeVersionEnvVarsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTypeVersionEnvVar == nil {
		return localVarReturnValue, nil, reportError("projectTypeVersionEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectTypeVersionEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiProjectTypeVersionEnvVarsIdPutRequest struct {
	ctx context.Context
	ApiService *ProjectTypeVersionEnvVarApiService
	id string
	projectTypeVersionEnvVar *ProjectTypeVersionEnvVar
}

// The updated ProjectTypeVersionEnvVar resource
func (r ApiApiProjectTypeVersionEnvVarsIdPutRequest) ProjectTypeVersionEnvVar(projectTypeVersionEnvVar ProjectTypeVersionEnvVar) ApiApiProjectTypeVersionEnvVarsIdPutRequest {
	r.projectTypeVersionEnvVar = &projectTypeVersionEnvVar
	return r
}

func (r ApiApiProjectTypeVersionEnvVarsIdPutRequest) Execute() (*ProjectTypeVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarsIdPutExecute(r)
}

/*
ApiProjectTypeVersionEnvVarsIdPut Replaces the ProjectTypeVersionEnvVar resource.

Replaces the ProjectTypeVersionEnvVar resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTypeVersionEnvVar identifier
 @return ApiApiProjectTypeVersionEnvVarsIdPutRequest
*/
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdPut(ctx context.Context, id string) ApiApiProjectTypeVersionEnvVarsIdPutRequest {
	return ApiApiProjectTypeVersionEnvVarsIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProjectTypeVersionEnvVar
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsIdPutExecute(r ApiApiProjectTypeVersionEnvVarsIdPutRequest) (*ProjectTypeVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTypeVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarApiService.ApiProjectTypeVersionEnvVarsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTypeVersionEnvVar == nil {
		return localVarReturnValue, nil, reportError("projectTypeVersionEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectTypeVersionEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiProjectTypeVersionEnvVarsPostRequest struct {
	ctx context.Context
	ApiService *ProjectTypeVersionEnvVarApiService
	projectTypeVersionEnvVar *ProjectTypeVersionEnvVar
}

// The new ProjectTypeVersionEnvVar resource
func (r ApiApiProjectTypeVersionEnvVarsPostRequest) ProjectTypeVersionEnvVar(projectTypeVersionEnvVar ProjectTypeVersionEnvVar) ApiApiProjectTypeVersionEnvVarsPostRequest {
	r.projectTypeVersionEnvVar = &projectTypeVersionEnvVar
	return r
}

func (r ApiApiProjectTypeVersionEnvVarsPostRequest) Execute() (*ProjectTypeVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarsPostExecute(r)
}

/*
ApiProjectTypeVersionEnvVarsPost Creates a ProjectTypeVersionEnvVar resource.

Creates a ProjectTypeVersionEnvVar resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiProjectTypeVersionEnvVarsPostRequest
*/
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsPost(ctx context.Context) ApiApiProjectTypeVersionEnvVarsPostRequest {
	return ApiApiProjectTypeVersionEnvVarsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProjectTypeVersionEnvVar
func (a *ProjectTypeVersionEnvVarApiService) ApiProjectTypeVersionEnvVarsPostExecute(r ApiApiProjectTypeVersionEnvVarsPostRequest) (*ProjectTypeVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTypeVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarApiService.ApiProjectTypeVersionEnvVarsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTypeVersionEnvVar == nil {
		return localVarReturnValue, nil, reportError("projectTypeVersionEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectTypeVersionEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
