/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ResourceTypeLimitApiService ResourceTypeLimitApi service
type ResourceTypeLimitApiService service

type ResourceTypeLimitApiApiResourceTypeLimitsGetCollectionRequest struct {
	ctx          context.Context
	ApiService   *ResourceTypeLimitApiService
	page         *int32
	itemsPerPage *int32
}

// The collection page number
func (r ResourceTypeLimitApiApiResourceTypeLimitsGetCollectionRequest) Page(page int32) ResourceTypeLimitApiApiResourceTypeLimitsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ResourceTypeLimitApiApiResourceTypeLimitsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ResourceTypeLimitApiApiResourceTypeLimitsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r ResourceTypeLimitApiApiResourceTypeLimitsGetCollectionRequest) Execute() ([]ResourceTypeLimit, *http.Response, error) {
	return r.ApiService.ApiResourceTypeLimitsGetCollectionExecute(r)
}

/*
ApiResourceTypeLimitsGetCollection Retrieves the collection of ResourceTypeLimit resources.

Retrieves the collection of ResourceTypeLimit resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ResourceTypeLimitApiApiResourceTypeLimitsGetCollectionRequest
*/
func (a *ResourceTypeLimitApiService) ApiResourceTypeLimitsGetCollection(ctx context.Context) ResourceTypeLimitApiApiResourceTypeLimitsGetCollectionRequest {
	return ResourceTypeLimitApiApiResourceTypeLimitsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ResourceTypeLimit
func (a *ResourceTypeLimitApiService) ApiResourceTypeLimitsGetCollectionExecute(r ResourceTypeLimitApiApiResourceTypeLimitsGetCollectionRequest) ([]ResourceTypeLimit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ResourceTypeLimit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceTypeLimitApiService.ApiResourceTypeLimitsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/resource_type_limits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourceTypeLimitApiApiResourceTypeLimitsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *ResourceTypeLimitApiService
	id         string
}

func (r ResourceTypeLimitApiApiResourceTypeLimitsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiResourceTypeLimitsIdDeleteExecute(r)
}

/*
ApiResourceTypeLimitsIdDelete Removes the ResourceTypeLimit resource.

Removes the ResourceTypeLimit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ResourceTypeLimit identifier
	@return ResourceTypeLimitApiApiResourceTypeLimitsIdDeleteRequest
*/
func (a *ResourceTypeLimitApiService) ApiResourceTypeLimitsIdDelete(ctx context.Context, id string) ResourceTypeLimitApiApiResourceTypeLimitsIdDeleteRequest {
	return ResourceTypeLimitApiApiResourceTypeLimitsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ResourceTypeLimitApiService) ApiResourceTypeLimitsIdDeleteExecute(r ResourceTypeLimitApiApiResourceTypeLimitsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceTypeLimitApiService.ApiResourceTypeLimitsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/resource_type_limits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ResourceTypeLimitApiApiResourceTypeLimitsIdGetRequest struct {
	ctx        context.Context
	ApiService *ResourceTypeLimitApiService
	id         string
}

func (r ResourceTypeLimitApiApiResourceTypeLimitsIdGetRequest) Execute() (*ResourceTypeLimit, *http.Response, error) {
	return r.ApiService.ApiResourceTypeLimitsIdGetExecute(r)
}

/*
ApiResourceTypeLimitsIdGet Retrieves a ResourceTypeLimit resource.

Retrieves a ResourceTypeLimit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ResourceTypeLimit identifier
	@return ResourceTypeLimitApiApiResourceTypeLimitsIdGetRequest
*/
func (a *ResourceTypeLimitApiService) ApiResourceTypeLimitsIdGet(ctx context.Context, id string) ResourceTypeLimitApiApiResourceTypeLimitsIdGetRequest {
	return ResourceTypeLimitApiApiResourceTypeLimitsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ResourceTypeLimit
func (a *ResourceTypeLimitApiService) ApiResourceTypeLimitsIdGetExecute(r ResourceTypeLimitApiApiResourceTypeLimitsIdGetRequest) (*ResourceTypeLimit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceTypeLimit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceTypeLimitApiService.ApiResourceTypeLimitsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/resource_type_limits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourceTypeLimitApiApiResourceTypeLimitsIdPatchRequest struct {
	ctx               context.Context
	ApiService        *ResourceTypeLimitApiService
	resourceTypeLimit *ResourceTypeLimit
	id                string
}

// The updated ResourceTypeLimit resource
func (r ResourceTypeLimitApiApiResourceTypeLimitsIdPatchRequest) ResourceTypeLimit(resourceTypeLimit ResourceTypeLimit) ResourceTypeLimitApiApiResourceTypeLimitsIdPatchRequest {
	r.resourceTypeLimit = &resourceTypeLimit
	return r
}

func (r ResourceTypeLimitApiApiResourceTypeLimitsIdPatchRequest) Execute() (*ResourceTypeLimit, *http.Response, error) {
	return r.ApiService.ApiResourceTypeLimitsIdPatchExecute(r)
}

/*
ApiResourceTypeLimitsIdPatch Updates the ResourceTypeLimit resource.

Updates the ResourceTypeLimit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ResourceTypeLimit identifier
	@return ResourceTypeLimitApiApiResourceTypeLimitsIdPatchRequest
*/
func (a *ResourceTypeLimitApiService) ApiResourceTypeLimitsIdPatch(ctx context.Context, id string) ResourceTypeLimitApiApiResourceTypeLimitsIdPatchRequest {
	return ResourceTypeLimitApiApiResourceTypeLimitsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ResourceTypeLimit
func (a *ResourceTypeLimitApiService) ApiResourceTypeLimitsIdPatchExecute(r ResourceTypeLimitApiApiResourceTypeLimitsIdPatchRequest) (*ResourceTypeLimit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceTypeLimit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceTypeLimitApiService.ApiResourceTypeLimitsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/resource_type_limits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceTypeLimit == nil {
		return localVarReturnValue, nil, reportError("resourceTypeLimit is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json", "application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceTypeLimit
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourceTypeLimitApiApiResourceTypeLimitsIdPutRequest struct {
	ctx               context.Context
	ApiService        *ResourceTypeLimitApiService
	resourceTypeLimit *ResourceTypeLimit
	id                string
}

// The updated ResourceTypeLimit resource
func (r ResourceTypeLimitApiApiResourceTypeLimitsIdPutRequest) ResourceTypeLimit(resourceTypeLimit ResourceTypeLimit) ResourceTypeLimitApiApiResourceTypeLimitsIdPutRequest {
	r.resourceTypeLimit = &resourceTypeLimit
	return r
}

func (r ResourceTypeLimitApiApiResourceTypeLimitsIdPutRequest) Execute() (*ResourceTypeLimit, *http.Response, error) {
	return r.ApiService.ApiResourceTypeLimitsIdPutExecute(r)
}

/*
ApiResourceTypeLimitsIdPut Replaces the ResourceTypeLimit resource.

Replaces the ResourceTypeLimit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ResourceTypeLimit identifier
	@return ResourceTypeLimitApiApiResourceTypeLimitsIdPutRequest
*/
func (a *ResourceTypeLimitApiService) ApiResourceTypeLimitsIdPut(ctx context.Context, id string) ResourceTypeLimitApiApiResourceTypeLimitsIdPutRequest {
	return ResourceTypeLimitApiApiResourceTypeLimitsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ResourceTypeLimit
func (a *ResourceTypeLimitApiService) ApiResourceTypeLimitsIdPutExecute(r ResourceTypeLimitApiApiResourceTypeLimitsIdPutRequest) (*ResourceTypeLimit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceTypeLimit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceTypeLimitApiService.ApiResourceTypeLimitsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/resource_type_limits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceTypeLimit == nil {
		return localVarReturnValue, nil, reportError("resourceTypeLimit is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceTypeLimit
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourceTypeLimitApiApiResourceTypeLimitsPostRequest struct {
	ctx               context.Context
	ApiService        *ResourceTypeLimitApiService
	resourceTypeLimit *ResourceTypeLimit
}

// The new ResourceTypeLimit resource
func (r ResourceTypeLimitApiApiResourceTypeLimitsPostRequest) ResourceTypeLimit(resourceTypeLimit ResourceTypeLimit) ResourceTypeLimitApiApiResourceTypeLimitsPostRequest {
	r.resourceTypeLimit = &resourceTypeLimit
	return r
}

func (r ResourceTypeLimitApiApiResourceTypeLimitsPostRequest) Execute() (*ResourceTypeLimit, *http.Response, error) {
	return r.ApiService.ApiResourceTypeLimitsPostExecute(r)
}

/*
ApiResourceTypeLimitsPost Creates a ResourceTypeLimit resource.

Creates a ResourceTypeLimit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ResourceTypeLimitApiApiResourceTypeLimitsPostRequest
*/
func (a *ResourceTypeLimitApiService) ApiResourceTypeLimitsPost(ctx context.Context) ResourceTypeLimitApiApiResourceTypeLimitsPostRequest {
	return ResourceTypeLimitApiApiResourceTypeLimitsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResourceTypeLimit
func (a *ResourceTypeLimitApiService) ApiResourceTypeLimitsPostExecute(r ResourceTypeLimitApiApiResourceTypeLimitsPostRequest) (*ResourceTypeLimit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceTypeLimit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceTypeLimitApiService.ApiResourceTypeLimitsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/resource_type_limits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceTypeLimit == nil {
		return localVarReturnValue, nil, reportError("resourceTypeLimit is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceTypeLimit
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
