/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ProjectTypeVersionEnvVarExampleApiService ProjectTypeVersionEnvVarExampleApi service
type ProjectTypeVersionEnvVarExampleApiService service

type ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest struct {
	ctx context.Context
	ApiService *ProjectTypeVersionEnvVarExampleApiService
	page *int32
	itemsPerPage *int32
	projectTypeVersionEnvVar *string
	projectTypeVersionEnvVar2 *[]string
}

// The collection page number
func (r ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest) Page(page int32) ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

// 
func (r ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest) ProjectTypeVersionEnvVar(projectTypeVersionEnvVar string) ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest {
	r.projectTypeVersionEnvVar = &projectTypeVersionEnvVar
	return r
}

// 
func (r ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest) ProjectTypeVersionEnvVar2(projectTypeVersionEnvVar2 []string) ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest {
	r.projectTypeVersionEnvVar2 = &projectTypeVersionEnvVar2
	return r
}

func (r ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest) Execute() ([]ProjectTypeVersionEnvVarExample, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarExamplesGetCollectionExecute(r)
}

/*
ApiProjectTypeVersionEnvVarExamplesGetCollection Retrieves the collection of ProjectTypeVersionEnvVarExample resources.

Retrieves the collection of ProjectTypeVersionEnvVarExample resources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest
*/
func (a *ProjectTypeVersionEnvVarExampleApiService) ApiProjectTypeVersionEnvVarExamplesGetCollection(ctx context.Context) ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest {
	return ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ProjectTypeVersionEnvVarExample
func (a *ProjectTypeVersionEnvVarExampleApiService) ApiProjectTypeVersionEnvVarExamplesGetCollectionExecute(r ApiApiProjectTypeVersionEnvVarExamplesGetCollectionRequest) ([]ProjectTypeVersionEnvVarExample, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectTypeVersionEnvVarExample
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarExampleApiService.ApiProjectTypeVersionEnvVarExamplesGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_var_examples"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.itemsPerPage != nil {
		localVarQueryParams.Add("itemsPerPage", parameterToString(*r.itemsPerPage, ""))
	}
	if r.projectTypeVersionEnvVar != nil {
		localVarQueryParams.Add("projectTypeVersionEnvVar", parameterToString(*r.projectTypeVersionEnvVar, ""))
	}
	if r.projectTypeVersionEnvVar2 != nil {
		t := *r.projectTypeVersionEnvVar2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("projectTypeVersionEnvVar[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("projectTypeVersionEnvVar[]", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiProjectTypeVersionEnvVarExamplesIdDeleteRequest struct {
	ctx context.Context
	ApiService *ProjectTypeVersionEnvVarExampleApiService
	id string
}

func (r ApiApiProjectTypeVersionEnvVarExamplesIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarExamplesIdDeleteExecute(r)
}

/*
ApiProjectTypeVersionEnvVarExamplesIdDelete Removes the ProjectTypeVersionEnvVarExample resource.

Removes the ProjectTypeVersionEnvVarExample resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTypeVersionEnvVarExample identifier
 @return ApiApiProjectTypeVersionEnvVarExamplesIdDeleteRequest
*/
func (a *ProjectTypeVersionEnvVarExampleApiService) ApiProjectTypeVersionEnvVarExamplesIdDelete(ctx context.Context, id string) ApiApiProjectTypeVersionEnvVarExamplesIdDeleteRequest {
	return ApiApiProjectTypeVersionEnvVarExamplesIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ProjectTypeVersionEnvVarExampleApiService) ApiProjectTypeVersionEnvVarExamplesIdDeleteExecute(r ApiApiProjectTypeVersionEnvVarExamplesIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarExampleApiService.ApiProjectTypeVersionEnvVarExamplesIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_var_examples/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiProjectTypeVersionEnvVarExamplesIdGetRequest struct {
	ctx context.Context
	ApiService *ProjectTypeVersionEnvVarExampleApiService
	id string
}

func (r ApiApiProjectTypeVersionEnvVarExamplesIdGetRequest) Execute() (*ProjectTypeVersionEnvVarExample, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarExamplesIdGetExecute(r)
}

/*
ApiProjectTypeVersionEnvVarExamplesIdGet Retrieves a ProjectTypeVersionEnvVarExample resource.

Retrieves a ProjectTypeVersionEnvVarExample resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTypeVersionEnvVarExample identifier
 @return ApiApiProjectTypeVersionEnvVarExamplesIdGetRequest
*/
func (a *ProjectTypeVersionEnvVarExampleApiService) ApiProjectTypeVersionEnvVarExamplesIdGet(ctx context.Context, id string) ApiApiProjectTypeVersionEnvVarExamplesIdGetRequest {
	return ApiApiProjectTypeVersionEnvVarExamplesIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProjectTypeVersionEnvVarExample
func (a *ProjectTypeVersionEnvVarExampleApiService) ApiProjectTypeVersionEnvVarExamplesIdGetExecute(r ApiApiProjectTypeVersionEnvVarExamplesIdGetRequest) (*ProjectTypeVersionEnvVarExample, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTypeVersionEnvVarExample
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarExampleApiService.ApiProjectTypeVersionEnvVarExamplesIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_var_examples/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiProjectTypeVersionEnvVarExamplesIdPatchRequest struct {
	ctx context.Context
	ApiService *ProjectTypeVersionEnvVarExampleApiService
	id string
	projectTypeVersionEnvVarExample *ProjectTypeVersionEnvVarExample
}

// The updated ProjectTypeVersionEnvVarExample resource
func (r ApiApiProjectTypeVersionEnvVarExamplesIdPatchRequest) ProjectTypeVersionEnvVarExample(projectTypeVersionEnvVarExample ProjectTypeVersionEnvVarExample) ApiApiProjectTypeVersionEnvVarExamplesIdPatchRequest {
	r.projectTypeVersionEnvVarExample = &projectTypeVersionEnvVarExample
	return r
}

func (r ApiApiProjectTypeVersionEnvVarExamplesIdPatchRequest) Execute() (*ProjectTypeVersionEnvVarExample, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarExamplesIdPatchExecute(r)
}

/*
ApiProjectTypeVersionEnvVarExamplesIdPatch Updates the ProjectTypeVersionEnvVarExample resource.

Updates the ProjectTypeVersionEnvVarExample resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTypeVersionEnvVarExample identifier
 @return ApiApiProjectTypeVersionEnvVarExamplesIdPatchRequest
*/
func (a *ProjectTypeVersionEnvVarExampleApiService) ApiProjectTypeVersionEnvVarExamplesIdPatch(ctx context.Context, id string) ApiApiProjectTypeVersionEnvVarExamplesIdPatchRequest {
	return ApiApiProjectTypeVersionEnvVarExamplesIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProjectTypeVersionEnvVarExample
func (a *ProjectTypeVersionEnvVarExampleApiService) ApiProjectTypeVersionEnvVarExamplesIdPatchExecute(r ApiApiProjectTypeVersionEnvVarExamplesIdPatchRequest) (*ProjectTypeVersionEnvVarExample, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTypeVersionEnvVarExample
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarExampleApiService.ApiProjectTypeVersionEnvVarExamplesIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_var_examples/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTypeVersionEnvVarExample == nil {
		return localVarReturnValue, nil, reportError("projectTypeVersionEnvVarExample is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectTypeVersionEnvVarExample
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiProjectTypeVersionEnvVarExamplesIdPutRequest struct {
	ctx context.Context
	ApiService *ProjectTypeVersionEnvVarExampleApiService
	id string
	projectTypeVersionEnvVarExample *ProjectTypeVersionEnvVarExample
}

// The updated ProjectTypeVersionEnvVarExample resource
func (r ApiApiProjectTypeVersionEnvVarExamplesIdPutRequest) ProjectTypeVersionEnvVarExample(projectTypeVersionEnvVarExample ProjectTypeVersionEnvVarExample) ApiApiProjectTypeVersionEnvVarExamplesIdPutRequest {
	r.projectTypeVersionEnvVarExample = &projectTypeVersionEnvVarExample
	return r
}

func (r ApiApiProjectTypeVersionEnvVarExamplesIdPutRequest) Execute() (*ProjectTypeVersionEnvVarExample, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarExamplesIdPutExecute(r)
}

/*
ApiProjectTypeVersionEnvVarExamplesIdPut Replaces the ProjectTypeVersionEnvVarExample resource.

Replaces the ProjectTypeVersionEnvVarExample resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTypeVersionEnvVarExample identifier
 @return ApiApiProjectTypeVersionEnvVarExamplesIdPutRequest
*/
func (a *ProjectTypeVersionEnvVarExampleApiService) ApiProjectTypeVersionEnvVarExamplesIdPut(ctx context.Context, id string) ApiApiProjectTypeVersionEnvVarExamplesIdPutRequest {
	return ApiApiProjectTypeVersionEnvVarExamplesIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProjectTypeVersionEnvVarExample
func (a *ProjectTypeVersionEnvVarExampleApiService) ApiProjectTypeVersionEnvVarExamplesIdPutExecute(r ApiApiProjectTypeVersionEnvVarExamplesIdPutRequest) (*ProjectTypeVersionEnvVarExample, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTypeVersionEnvVarExample
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarExampleApiService.ApiProjectTypeVersionEnvVarExamplesIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_var_examples/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTypeVersionEnvVarExample == nil {
		return localVarReturnValue, nil, reportError("projectTypeVersionEnvVarExample is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectTypeVersionEnvVarExample
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiProjectTypeVersionEnvVarExamplesPostRequest struct {
	ctx context.Context
	ApiService *ProjectTypeVersionEnvVarExampleApiService
	projectTypeVersionEnvVarExample *ProjectTypeVersionEnvVarExample
}

// The new ProjectTypeVersionEnvVarExample resource
func (r ApiApiProjectTypeVersionEnvVarExamplesPostRequest) ProjectTypeVersionEnvVarExample(projectTypeVersionEnvVarExample ProjectTypeVersionEnvVarExample) ApiApiProjectTypeVersionEnvVarExamplesPostRequest {
	r.projectTypeVersionEnvVarExample = &projectTypeVersionEnvVarExample
	return r
}

func (r ApiApiProjectTypeVersionEnvVarExamplesPostRequest) Execute() (*ProjectTypeVersionEnvVarExample, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionEnvVarExamplesPostExecute(r)
}

/*
ApiProjectTypeVersionEnvVarExamplesPost Creates a ProjectTypeVersionEnvVarExample resource.

Creates a ProjectTypeVersionEnvVarExample resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiProjectTypeVersionEnvVarExamplesPostRequest
*/
func (a *ProjectTypeVersionEnvVarExampleApiService) ApiProjectTypeVersionEnvVarExamplesPost(ctx context.Context) ApiApiProjectTypeVersionEnvVarExamplesPostRequest {
	return ApiApiProjectTypeVersionEnvVarExamplesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProjectTypeVersionEnvVarExample
func (a *ProjectTypeVersionEnvVarExampleApiService) ApiProjectTypeVersionEnvVarExamplesPostExecute(r ApiApiProjectTypeVersionEnvVarExamplesPostRequest) (*ProjectTypeVersionEnvVarExample, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTypeVersionEnvVarExample
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionEnvVarExampleApiService.ApiProjectTypeVersionEnvVarExamplesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_version_env_var_examples"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTypeVersionEnvVarExample == nil {
		return localVarReturnValue, nil, reportError("projectTypeVersionEnvVarExample is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectTypeVersionEnvVarExample
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
