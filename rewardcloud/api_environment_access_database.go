/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// EnvironmentAccessDatabaseApiService EnvironmentAccessDatabaseApi service
type EnvironmentAccessDatabaseApiService service

type EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesGetCollectionRequest struct {
	ctx          context.Context
	ApiService   *EnvironmentAccessDatabaseApiService
	page         *int32
	itemsPerPage *int32
}

// The collection page number
func (r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesGetCollectionRequest) Page(page int32) EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesGetCollectionRequest) ItemsPerPage(itemsPerPage int32) EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesGetCollectionRequest) Execute() ([]EnvironmentAccessDatabase, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessDatabasesGetCollectionExecute(r)
}

/*
ApiEnvironmentAccessDatabasesGetCollection Retrieves the collection of EnvironmentAccessDatabase resources.

Retrieves the collection of EnvironmentAccessDatabase resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesGetCollectionRequest
*/
func (a *EnvironmentAccessDatabaseApiService) ApiEnvironmentAccessDatabasesGetCollection(ctx context.Context) EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesGetCollectionRequest {
	return EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []EnvironmentAccessDatabase
func (a *EnvironmentAccessDatabaseApiService) ApiEnvironmentAccessDatabasesGetCollectionExecute(r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesGetCollectionRequest) ([]EnvironmentAccessDatabase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []EnvironmentAccessDatabase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessDatabaseApiService.ApiEnvironmentAccessDatabasesGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_databases"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdDeleteRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessDatabaseApiService
	id         string
}

func (r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessDatabasesIdDeleteExecute(r)
}

/*
ApiEnvironmentAccessDatabasesIdDelete Removes the EnvironmentAccessDatabase resource.

Removes the EnvironmentAccessDatabase resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessDatabase identifier
	@return EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdDeleteRequest
*/
func (a *EnvironmentAccessDatabaseApiService) ApiEnvironmentAccessDatabasesIdDelete(ctx context.Context, id string) EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdDeleteRequest {
	return EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EnvironmentAccessDatabaseApiService) ApiEnvironmentAccessDatabasesIdDeleteExecute(r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessDatabaseApiService.ApiEnvironmentAccessDatabasesIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_databases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessDatabaseApiService
	id         string
}

func (r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdGetRequest) Execute() (*EnvironmentAccessDatabase, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessDatabasesIdGetExecute(r)
}

/*
ApiEnvironmentAccessDatabasesIdGet Retrieves a EnvironmentAccessDatabase resource.

Retrieves a EnvironmentAccessDatabase resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessDatabase identifier
	@return EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdGetRequest
*/
func (a *EnvironmentAccessDatabaseApiService) ApiEnvironmentAccessDatabasesIdGet(ctx context.Context, id string) EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdGetRequest {
	return EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessDatabase
func (a *EnvironmentAccessDatabaseApiService) ApiEnvironmentAccessDatabasesIdGetExecute(r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdGetRequest) (*EnvironmentAccessDatabase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessDatabase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessDatabaseApiService.ApiEnvironmentAccessDatabasesIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_databases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPatchRequest struct {
	ctx                       context.Context
	ApiService                *EnvironmentAccessDatabaseApiService
	environmentAccessDatabase *EnvironmentAccessDatabase
	id                        string
}

// The updated EnvironmentAccessDatabase resource
func (r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPatchRequest) EnvironmentAccessDatabase(environmentAccessDatabase EnvironmentAccessDatabase) EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPatchRequest {
	r.environmentAccessDatabase = &environmentAccessDatabase
	return r
}

func (r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPatchRequest) Execute() (*EnvironmentAccessDatabase, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessDatabasesIdPatchExecute(r)
}

/*
ApiEnvironmentAccessDatabasesIdPatch Updates the EnvironmentAccessDatabase resource.

Updates the EnvironmentAccessDatabase resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessDatabase identifier
	@return EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPatchRequest
*/
func (a *EnvironmentAccessDatabaseApiService) ApiEnvironmentAccessDatabasesIdPatch(ctx context.Context, id string) EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPatchRequest {
	return EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessDatabase
func (a *EnvironmentAccessDatabaseApiService) ApiEnvironmentAccessDatabasesIdPatchExecute(r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPatchRequest) (*EnvironmentAccessDatabase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessDatabase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessDatabaseApiService.ApiEnvironmentAccessDatabasesIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_databases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessDatabase == nil {
		return localVarReturnValue, nil, reportError("environmentAccessDatabase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessDatabase
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPutRequest struct {
	ctx                       context.Context
	ApiService                *EnvironmentAccessDatabaseApiService
	environmentAccessDatabase *EnvironmentAccessDatabase
	id                        string
}

// The updated EnvironmentAccessDatabase resource
func (r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPutRequest) EnvironmentAccessDatabase(environmentAccessDatabase EnvironmentAccessDatabase) EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPutRequest {
	r.environmentAccessDatabase = &environmentAccessDatabase
	return r
}

func (r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPutRequest) Execute() (*EnvironmentAccessDatabase, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessDatabasesIdPutExecute(r)
}

/*
ApiEnvironmentAccessDatabasesIdPut Replaces the EnvironmentAccessDatabase resource.

Replaces the EnvironmentAccessDatabase resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessDatabase identifier
	@return EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPutRequest
*/
func (a *EnvironmentAccessDatabaseApiService) ApiEnvironmentAccessDatabasesIdPut(ctx context.Context, id string) EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPutRequest {
	return EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessDatabase
func (a *EnvironmentAccessDatabaseApiService) ApiEnvironmentAccessDatabasesIdPutExecute(r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesIdPutRequest) (*EnvironmentAccessDatabase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessDatabase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessDatabaseApiService.ApiEnvironmentAccessDatabasesIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_databases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessDatabase == nil {
		return localVarReturnValue, nil, reportError("environmentAccessDatabase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessDatabase
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesPostRequest struct {
	ctx                       context.Context
	ApiService                *EnvironmentAccessDatabaseApiService
	environmentAccessDatabase *EnvironmentAccessDatabase
}

// The new EnvironmentAccessDatabase resource
func (r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesPostRequest) EnvironmentAccessDatabase(environmentAccessDatabase EnvironmentAccessDatabase) EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesPostRequest {
	r.environmentAccessDatabase = &environmentAccessDatabase
	return r
}

func (r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesPostRequest) Execute() (*EnvironmentAccessDatabase, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessDatabasesPostExecute(r)
}

/*
ApiEnvironmentAccessDatabasesPost Creates a EnvironmentAccessDatabase resource.

Creates a EnvironmentAccessDatabase resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesPostRequest
*/
func (a *EnvironmentAccessDatabaseApiService) ApiEnvironmentAccessDatabasesPost(ctx context.Context) EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesPostRequest {
	return EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessDatabase
func (a *EnvironmentAccessDatabaseApiService) ApiEnvironmentAccessDatabasesPostExecute(r EnvironmentAccessDatabaseApiApiEnvironmentAccessDatabasesPostRequest) (*EnvironmentAccessDatabase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessDatabase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessDatabaseApiService.ApiEnvironmentAccessDatabasesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_databases"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessDatabase == nil {
		return localVarReturnValue, nil, reportError("environmentAccessDatabase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessDatabase
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
