/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.7.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// ProjectTypeVersionApiService ProjectTypeVersionApi service
type ProjectTypeVersionApiService service

type ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest struct {
	ctx          context.Context
	ApiService   *ProjectTypeVersionApiService
	page         *int32
	itemsPerPage *int32
	projectType  *string
	projectType2 *[]string
}

// The collection page number
func (r ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest) Page(page int32) ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest) ProjectType(projectType string) ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest {
	r.projectType = &projectType
	return r
}

func (r ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest) ProjectType2(projectType2 []string) ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest {
	r.projectType2 = &projectType2
	return r
}

func (r ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest) Execute() ([]ProjectTypeVersion, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionsGetCollectionExecute(r)
}

/*
ApiProjectTypeVersionsGetCollection Retrieves the collection of ProjectTypeVersion resources.

Retrieves the collection of ProjectTypeVersion resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest
*/
func (a *ProjectTypeVersionApiService) ApiProjectTypeVersionsGetCollection(ctx context.Context) ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest {
	return ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ProjectTypeVersion
func (a *ProjectTypeVersionApiService) ApiProjectTypeVersionsGetCollectionExecute(r ProjectTypeVersionApiApiProjectTypeVersionsGetCollectionRequest) ([]ProjectTypeVersion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProjectTypeVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionApiService.ApiProjectTypeVersionsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_versions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	if r.projectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectType", r.projectType, "")
	}
	if r.projectType2 != nil {
		t := *r.projectType2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "projectType[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "projectType[]", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectTypeVersionApiApiProjectTypeVersionsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *ProjectTypeVersionApiService
	id         string
}

func (r ProjectTypeVersionApiApiProjectTypeVersionsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionsIdDeleteExecute(r)
}

/*
ApiProjectTypeVersionsIdDelete Removes the ProjectTypeVersion resource.

Removes the ProjectTypeVersion resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTypeVersion identifier
	@return ProjectTypeVersionApiApiProjectTypeVersionsIdDeleteRequest
*/
func (a *ProjectTypeVersionApiService) ApiProjectTypeVersionsIdDelete(ctx context.Context, id string) ProjectTypeVersionApiApiProjectTypeVersionsIdDeleteRequest {
	return ProjectTypeVersionApiApiProjectTypeVersionsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ProjectTypeVersionApiService) ApiProjectTypeVersionsIdDeleteExecute(r ProjectTypeVersionApiApiProjectTypeVersionsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionApiService.ApiProjectTypeVersionsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_versions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ProjectTypeVersionApiApiProjectTypeVersionsIdGetRequest struct {
	ctx        context.Context
	ApiService *ProjectTypeVersionApiService
	id         string
}

func (r ProjectTypeVersionApiApiProjectTypeVersionsIdGetRequest) Execute() (*ProjectTypeVersion, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionsIdGetExecute(r)
}

/*
ApiProjectTypeVersionsIdGet Retrieves a ProjectTypeVersion resource.

Retrieves a ProjectTypeVersion resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTypeVersion identifier
	@return ProjectTypeVersionApiApiProjectTypeVersionsIdGetRequest
*/
func (a *ProjectTypeVersionApiService) ApiProjectTypeVersionsIdGet(ctx context.Context, id string) ProjectTypeVersionApiApiProjectTypeVersionsIdGetRequest {
	return ProjectTypeVersionApiApiProjectTypeVersionsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectTypeVersion
func (a *ProjectTypeVersionApiService) ApiProjectTypeVersionsIdGetExecute(r ProjectTypeVersionApiApiProjectTypeVersionsIdGetRequest) (*ProjectTypeVersion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTypeVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionApiService.ApiProjectTypeVersionsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_versions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectTypeVersionApiApiProjectTypeVersionsIdPatchRequest struct {
	ctx                context.Context
	ApiService         *ProjectTypeVersionApiService
	projectTypeVersion *ProjectTypeVersion
	id                 string
}

// The updated ProjectTypeVersion resource
func (r ProjectTypeVersionApiApiProjectTypeVersionsIdPatchRequest) ProjectTypeVersion(projectTypeVersion ProjectTypeVersion) ProjectTypeVersionApiApiProjectTypeVersionsIdPatchRequest {
	r.projectTypeVersion = &projectTypeVersion
	return r
}

func (r ProjectTypeVersionApiApiProjectTypeVersionsIdPatchRequest) Execute() (*ProjectTypeVersion, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionsIdPatchExecute(r)
}

/*
ApiProjectTypeVersionsIdPatch Updates the ProjectTypeVersion resource.

Updates the ProjectTypeVersion resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTypeVersion identifier
	@return ProjectTypeVersionApiApiProjectTypeVersionsIdPatchRequest
*/
func (a *ProjectTypeVersionApiService) ApiProjectTypeVersionsIdPatch(ctx context.Context, id string) ProjectTypeVersionApiApiProjectTypeVersionsIdPatchRequest {
	return ProjectTypeVersionApiApiProjectTypeVersionsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectTypeVersion
func (a *ProjectTypeVersionApiService) ApiProjectTypeVersionsIdPatchExecute(r ProjectTypeVersionApiApiProjectTypeVersionsIdPatchRequest) (*ProjectTypeVersion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTypeVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionApiService.ApiProjectTypeVersionsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_versions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTypeVersion == nil {
		return localVarReturnValue, nil, reportError("projectTypeVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectTypeVersion
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectTypeVersionApiApiProjectTypeVersionsIdPutRequest struct {
	ctx                context.Context
	ApiService         *ProjectTypeVersionApiService
	projectTypeVersion *ProjectTypeVersion
	id                 string
}

// The updated ProjectTypeVersion resource
func (r ProjectTypeVersionApiApiProjectTypeVersionsIdPutRequest) ProjectTypeVersion(projectTypeVersion ProjectTypeVersion) ProjectTypeVersionApiApiProjectTypeVersionsIdPutRequest {
	r.projectTypeVersion = &projectTypeVersion
	return r
}

func (r ProjectTypeVersionApiApiProjectTypeVersionsIdPutRequest) Execute() (*ProjectTypeVersion, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionsIdPutExecute(r)
}

/*
ApiProjectTypeVersionsIdPut Replaces the ProjectTypeVersion resource.

Replaces the ProjectTypeVersion resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTypeVersion identifier
	@return ProjectTypeVersionApiApiProjectTypeVersionsIdPutRequest
*/
func (a *ProjectTypeVersionApiService) ApiProjectTypeVersionsIdPut(ctx context.Context, id string) ProjectTypeVersionApiApiProjectTypeVersionsIdPutRequest {
	return ProjectTypeVersionApiApiProjectTypeVersionsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectTypeVersion
func (a *ProjectTypeVersionApiService) ApiProjectTypeVersionsIdPutExecute(r ProjectTypeVersionApiApiProjectTypeVersionsIdPutRequest) (*ProjectTypeVersion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTypeVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionApiService.ApiProjectTypeVersionsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_versions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTypeVersion == nil {
		return localVarReturnValue, nil, reportError("projectTypeVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectTypeVersion
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectTypeVersionApiApiProjectTypeVersionsPostRequest struct {
	ctx                context.Context
	ApiService         *ProjectTypeVersionApiService
	projectTypeVersion *ProjectTypeVersion
}

// The new ProjectTypeVersion resource
func (r ProjectTypeVersionApiApiProjectTypeVersionsPostRequest) ProjectTypeVersion(projectTypeVersion ProjectTypeVersion) ProjectTypeVersionApiApiProjectTypeVersionsPostRequest {
	r.projectTypeVersion = &projectTypeVersion
	return r
}

func (r ProjectTypeVersionApiApiProjectTypeVersionsPostRequest) Execute() (*ProjectTypeVersion, *http.Response, error) {
	return r.ApiService.ApiProjectTypeVersionsPostExecute(r)
}

/*
ApiProjectTypeVersionsPost Creates a ProjectTypeVersion resource.

Creates a ProjectTypeVersion resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProjectTypeVersionApiApiProjectTypeVersionsPostRequest
*/
func (a *ProjectTypeVersionApiService) ApiProjectTypeVersionsPost(ctx context.Context) ProjectTypeVersionApiApiProjectTypeVersionsPostRequest {
	return ProjectTypeVersionApiApiProjectTypeVersionsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ProjectTypeVersion
func (a *ProjectTypeVersionApiService) ApiProjectTypeVersionsPostExecute(r ProjectTypeVersionApiApiProjectTypeVersionsPostRequest) (*ProjectTypeVersion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTypeVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypeVersionApiService.ApiProjectTypeVersionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_type_versions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTypeVersion == nil {
		return localVarReturnValue, nil, reportError("projectTypeVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectTypeVersion
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
