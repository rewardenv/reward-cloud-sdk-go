/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.7.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// EnvironmentAccessFrontendApiService EnvironmentAccessFrontendApi service
type EnvironmentAccessFrontendApiService service

type EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsGetCollectionRequest struct {
	ctx          context.Context
	ApiService   *EnvironmentAccessFrontendApiService
	page         *int32
	itemsPerPage *int32
}

// The collection page number
func (r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsGetCollectionRequest) Page(page int32) EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsGetCollectionRequest) Execute() ([]EnvironmentAccessFrontend, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessFrontendsGetCollectionExecute(r)
}

/*
ApiEnvironmentAccessFrontendsGetCollection Retrieves the collection of EnvironmentAccessFrontend resources.

Retrieves the collection of EnvironmentAccessFrontend resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsGetCollectionRequest
*/
func (a *EnvironmentAccessFrontendApiService) ApiEnvironmentAccessFrontendsGetCollection(ctx context.Context) EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsGetCollectionRequest {
	return EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []EnvironmentAccessFrontend
func (a *EnvironmentAccessFrontendApiService) ApiEnvironmentAccessFrontendsGetCollectionExecute(r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsGetCollectionRequest) ([]EnvironmentAccessFrontend, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []EnvironmentAccessFrontend
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessFrontendApiService.ApiEnvironmentAccessFrontendsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_frontends"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessFrontendApiService
	id         string
}

func (r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessFrontendsIdDeleteExecute(r)
}

/*
ApiEnvironmentAccessFrontendsIdDelete Removes the EnvironmentAccessFrontend resource.

Removes the EnvironmentAccessFrontend resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessFrontend identifier
	@return EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdDeleteRequest
*/
func (a *EnvironmentAccessFrontendApiService) ApiEnvironmentAccessFrontendsIdDelete(ctx context.Context, id string) EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdDeleteRequest {
	return EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EnvironmentAccessFrontendApiService) ApiEnvironmentAccessFrontendsIdDeleteExecute(r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessFrontendApiService.ApiEnvironmentAccessFrontendsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_frontends/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessFrontendApiService
	id         string
}

func (r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdGetRequest) Execute() (*EnvironmentAccessFrontend, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessFrontendsIdGetExecute(r)
}

/*
ApiEnvironmentAccessFrontendsIdGet Retrieves a EnvironmentAccessFrontend resource.

Retrieves a EnvironmentAccessFrontend resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessFrontend identifier
	@return EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdGetRequest
*/
func (a *EnvironmentAccessFrontendApiService) ApiEnvironmentAccessFrontendsIdGet(ctx context.Context, id string) EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdGetRequest {
	return EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessFrontend
func (a *EnvironmentAccessFrontendApiService) ApiEnvironmentAccessFrontendsIdGetExecute(r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdGetRequest) (*EnvironmentAccessFrontend, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessFrontend
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessFrontendApiService.ApiEnvironmentAccessFrontendsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_frontends/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPatchRequest struct {
	ctx                       context.Context
	ApiService                *EnvironmentAccessFrontendApiService
	environmentAccessFrontend *EnvironmentAccessFrontend
	id                        string
}

// The updated EnvironmentAccessFrontend resource
func (r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPatchRequest) EnvironmentAccessFrontend(environmentAccessFrontend EnvironmentAccessFrontend) EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPatchRequest {
	r.environmentAccessFrontend = &environmentAccessFrontend
	return r
}

func (r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPatchRequest) Execute() (*EnvironmentAccessFrontend, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessFrontendsIdPatchExecute(r)
}

/*
ApiEnvironmentAccessFrontendsIdPatch Updates the EnvironmentAccessFrontend resource.

Updates the EnvironmentAccessFrontend resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessFrontend identifier
	@return EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPatchRequest
*/
func (a *EnvironmentAccessFrontendApiService) ApiEnvironmentAccessFrontendsIdPatch(ctx context.Context, id string) EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPatchRequest {
	return EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessFrontend
func (a *EnvironmentAccessFrontendApiService) ApiEnvironmentAccessFrontendsIdPatchExecute(r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPatchRequest) (*EnvironmentAccessFrontend, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessFrontend
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessFrontendApiService.ApiEnvironmentAccessFrontendsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_frontends/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessFrontend == nil {
		return localVarReturnValue, nil, reportError("environmentAccessFrontend is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessFrontend
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPutRequest struct {
	ctx                       context.Context
	ApiService                *EnvironmentAccessFrontendApiService
	environmentAccessFrontend *EnvironmentAccessFrontend
	id                        string
}

// The updated EnvironmentAccessFrontend resource
func (r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPutRequest) EnvironmentAccessFrontend(environmentAccessFrontend EnvironmentAccessFrontend) EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPutRequest {
	r.environmentAccessFrontend = &environmentAccessFrontend
	return r
}

func (r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPutRequest) Execute() (*EnvironmentAccessFrontend, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessFrontendsIdPutExecute(r)
}

/*
ApiEnvironmentAccessFrontendsIdPut Replaces the EnvironmentAccessFrontend resource.

Replaces the EnvironmentAccessFrontend resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessFrontend identifier
	@return EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPutRequest
*/
func (a *EnvironmentAccessFrontendApiService) ApiEnvironmentAccessFrontendsIdPut(ctx context.Context, id string) EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPutRequest {
	return EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessFrontend
func (a *EnvironmentAccessFrontendApiService) ApiEnvironmentAccessFrontendsIdPutExecute(r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsIdPutRequest) (*EnvironmentAccessFrontend, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessFrontend
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessFrontendApiService.ApiEnvironmentAccessFrontendsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_frontends/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessFrontend == nil {
		return localVarReturnValue, nil, reportError("environmentAccessFrontend is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessFrontend
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsPostRequest struct {
	ctx                       context.Context
	ApiService                *EnvironmentAccessFrontendApiService
	environmentAccessFrontend *EnvironmentAccessFrontend
}

// The new EnvironmentAccessFrontend resource
func (r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsPostRequest) EnvironmentAccessFrontend(environmentAccessFrontend EnvironmentAccessFrontend) EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsPostRequest {
	r.environmentAccessFrontend = &environmentAccessFrontend
	return r
}

func (r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsPostRequest) Execute() (*EnvironmentAccessFrontend, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessFrontendsPostExecute(r)
}

/*
ApiEnvironmentAccessFrontendsPost Creates a EnvironmentAccessFrontend resource.

Creates a EnvironmentAccessFrontend resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsPostRequest
*/
func (a *EnvironmentAccessFrontendApiService) ApiEnvironmentAccessFrontendsPost(ctx context.Context) EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsPostRequest {
	return EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessFrontend
func (a *EnvironmentAccessFrontendApiService) ApiEnvironmentAccessFrontendsPostExecute(r EnvironmentAccessFrontendApiApiEnvironmentAccessFrontendsPostRequest) (*EnvironmentAccessFrontend, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessFrontend
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessFrontendApiService.ApiEnvironmentAccessFrontendsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_frontends"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessFrontend == nil {
		return localVarReturnValue, nil, reportError("environmentAccessFrontend is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessFrontend
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
