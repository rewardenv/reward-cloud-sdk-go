/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"encoding/json"
)

// checks if the GitTypeProjectGet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitTypeProjectGet{}

// GitTypeProjectGet
type GitTypeProjectGet struct {
	Uuid NullableString `json:"uuid,omitempty"`
	Name NullableString `json:"name,omitempty"`
}

// NewGitTypeProjectGet instantiates a new GitTypeProjectGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitTypeProjectGet() *GitTypeProjectGet {
	this := GitTypeProjectGet{}
	return &this
}

// NewGitTypeProjectGetWithDefaults instantiates a new GitTypeProjectGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitTypeProjectGetWithDefaults() *GitTypeProjectGet {
	this := GitTypeProjectGet{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitTypeProjectGet) GetUuid() string {
	if o == nil || IsNil(o.Uuid.Get()) {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitTypeProjectGet) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *GitTypeProjectGet) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *GitTypeProjectGet) SetUuid(v string) {
	o.Uuid.Set(&v)
}

// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *GitTypeProjectGet) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *GitTypeProjectGet) UnsetUuid() {
	o.Uuid.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitTypeProjectGet) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitTypeProjectGet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *GitTypeProjectGet) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *GitTypeProjectGet) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *GitTypeProjectGet) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *GitTypeProjectGet) UnsetName() {
	o.Name.Unset()
}

func (o GitTypeProjectGet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitTypeProjectGet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return toSerialize, nil
}

type NullableGitTypeProjectGet struct {
	value *GitTypeProjectGet
	isSet bool
}

func (v NullableGitTypeProjectGet) Get() *GitTypeProjectGet {
	return v.value
}

func (v *NullableGitTypeProjectGet) Set(val *GitTypeProjectGet) {
	v.value = val
	v.isSet = true
}

func (v NullableGitTypeProjectGet) IsSet() bool {
	return v.isSet
}

func (v *NullableGitTypeProjectGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitTypeProjectGet(val *GitTypeProjectGet) *NullableGitTypeProjectGet {
	return &NullableGitTypeProjectGet{value: val, isSet: true}
}

func (v NullableGitTypeProjectGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitTypeProjectGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
