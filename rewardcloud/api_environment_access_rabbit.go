/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// EnvironmentAccessRabbitApiService EnvironmentAccessRabbitApi service
type EnvironmentAccessRabbitApiService service

type ApiApiEnvironmentAccessRabbitsGetCollectionRequest struct {
	ctx          context.Context
	ApiService   *EnvironmentAccessRabbitApiService
	page         *int32
	itemsPerPage *int32
}

// The collection page number
func (r ApiApiEnvironmentAccessRabbitsGetCollectionRequest) Page(page int32) ApiApiEnvironmentAccessRabbitsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ApiApiEnvironmentAccessRabbitsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ApiApiEnvironmentAccessRabbitsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r ApiApiEnvironmentAccessRabbitsGetCollectionRequest) Execute() (*ApiEnvironmentAccessRabbitsGetCollection200Response, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessRabbitsGetCollectionExecute(r)
}

/*
ApiEnvironmentAccessRabbitsGetCollection Retrieves the collection of EnvironmentAccessRabbit resources.

Retrieves the collection of EnvironmentAccessRabbit resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiEnvironmentAccessRabbitsGetCollectionRequest
*/
func (a *EnvironmentAccessRabbitApiService) ApiEnvironmentAccessRabbitsGetCollection(ctx context.Context) ApiApiEnvironmentAccessRabbitsGetCollectionRequest {
	return ApiApiEnvironmentAccessRabbitsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ApiEnvironmentAccessRabbitsGetCollection200Response
func (a *EnvironmentAccessRabbitApiService) ApiEnvironmentAccessRabbitsGetCollectionExecute(r ApiApiEnvironmentAccessRabbitsGetCollectionRequest) (*ApiEnvironmentAccessRabbitsGetCollection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiEnvironmentAccessRabbitsGetCollection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessRabbitApiService.ApiEnvironmentAccessRabbitsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_rabbits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.itemsPerPage != nil {
		localVarQueryParams.Add("itemsPerPage", parameterToString(*r.itemsPerPage, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentAccessRabbitsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessRabbitApiService
	id         string
}

func (r ApiApiEnvironmentAccessRabbitsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessRabbitsIdDeleteExecute(r)
}

/*
ApiEnvironmentAccessRabbitsIdDelete Removes the EnvironmentAccessRabbit resource.

Removes the EnvironmentAccessRabbit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessRabbit identifier
	@return ApiApiEnvironmentAccessRabbitsIdDeleteRequest
*/
func (a *EnvironmentAccessRabbitApiService) ApiEnvironmentAccessRabbitsIdDelete(ctx context.Context, id string) ApiApiEnvironmentAccessRabbitsIdDeleteRequest {
	return ApiApiEnvironmentAccessRabbitsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EnvironmentAccessRabbitApiService) ApiEnvironmentAccessRabbitsIdDeleteExecute(r ApiApiEnvironmentAccessRabbitsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessRabbitApiService.ApiEnvironmentAccessRabbitsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_rabbits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiEnvironmentAccessRabbitsIdGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessRabbitApiService
	id         string
}

func (r ApiApiEnvironmentAccessRabbitsIdGetRequest) Execute() (*EnvironmentAccessRabbitJsonhal, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessRabbitsIdGetExecute(r)
}

/*
ApiEnvironmentAccessRabbitsIdGet Retrieves a EnvironmentAccessRabbit resource.

Retrieves a EnvironmentAccessRabbit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessRabbit identifier
	@return ApiApiEnvironmentAccessRabbitsIdGetRequest
*/
func (a *EnvironmentAccessRabbitApiService) ApiEnvironmentAccessRabbitsIdGet(ctx context.Context, id string) ApiApiEnvironmentAccessRabbitsIdGetRequest {
	return ApiApiEnvironmentAccessRabbitsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessRabbitJsonhal
func (a *EnvironmentAccessRabbitApiService) ApiEnvironmentAccessRabbitsIdGetExecute(r ApiApiEnvironmentAccessRabbitsIdGetRequest) (*EnvironmentAccessRabbitJsonhal, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessRabbitJsonhal
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessRabbitApiService.ApiEnvironmentAccessRabbitsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_rabbits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentAccessRabbitsIdPatchRequest struct {
	ctx                     context.Context
	ApiService              *EnvironmentAccessRabbitApiService
	id                      string
	environmentAccessRabbit *EnvironmentAccessRabbit
}

// The updated EnvironmentAccessRabbit resource
func (r ApiApiEnvironmentAccessRabbitsIdPatchRequest) EnvironmentAccessRabbit(environmentAccessRabbit EnvironmentAccessRabbit) ApiApiEnvironmentAccessRabbitsIdPatchRequest {
	r.environmentAccessRabbit = &environmentAccessRabbit
	return r
}

func (r ApiApiEnvironmentAccessRabbitsIdPatchRequest) Execute() (*EnvironmentAccessRabbitJsonhal, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessRabbitsIdPatchExecute(r)
}

/*
ApiEnvironmentAccessRabbitsIdPatch Updates the EnvironmentAccessRabbit resource.

Updates the EnvironmentAccessRabbit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessRabbit identifier
	@return ApiApiEnvironmentAccessRabbitsIdPatchRequest
*/
func (a *EnvironmentAccessRabbitApiService) ApiEnvironmentAccessRabbitsIdPatch(ctx context.Context, id string) ApiApiEnvironmentAccessRabbitsIdPatchRequest {
	return ApiApiEnvironmentAccessRabbitsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessRabbitJsonhal
func (a *EnvironmentAccessRabbitApiService) ApiEnvironmentAccessRabbitsIdPatchExecute(r ApiApiEnvironmentAccessRabbitsIdPatchRequest) (*EnvironmentAccessRabbitJsonhal, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessRabbitJsonhal
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessRabbitApiService.ApiEnvironmentAccessRabbitsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_rabbits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessRabbit == nil {
		return localVarReturnValue, nil, reportError("environmentAccessRabbit is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessRabbit
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentAccessRabbitsIdPutRequest struct {
	ctx                            context.Context
	ApiService                     *EnvironmentAccessRabbitApiService
	id                             string
	environmentAccessRabbitJsonhal *EnvironmentAccessRabbitJsonhal
}

// The updated EnvironmentAccessRabbit resource
func (r ApiApiEnvironmentAccessRabbitsIdPutRequest) EnvironmentAccessRabbitJsonhal(environmentAccessRabbitJsonhal EnvironmentAccessRabbitJsonhal) ApiApiEnvironmentAccessRabbitsIdPutRequest {
	r.environmentAccessRabbitJsonhal = &environmentAccessRabbitJsonhal
	return r
}

func (r ApiApiEnvironmentAccessRabbitsIdPutRequest) Execute() (*EnvironmentAccessRabbitJsonhal, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessRabbitsIdPutExecute(r)
}

/*
ApiEnvironmentAccessRabbitsIdPut Replaces the EnvironmentAccessRabbit resource.

Replaces the EnvironmentAccessRabbit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessRabbit identifier
	@return ApiApiEnvironmentAccessRabbitsIdPutRequest
*/
func (a *EnvironmentAccessRabbitApiService) ApiEnvironmentAccessRabbitsIdPut(ctx context.Context, id string) ApiApiEnvironmentAccessRabbitsIdPutRequest {
	return ApiApiEnvironmentAccessRabbitsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessRabbitJsonhal
func (a *EnvironmentAccessRabbitApiService) ApiEnvironmentAccessRabbitsIdPutExecute(r ApiApiEnvironmentAccessRabbitsIdPutRequest) (*EnvironmentAccessRabbitJsonhal, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessRabbitJsonhal
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessRabbitApiService.ApiEnvironmentAccessRabbitsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_rabbits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessRabbitJsonhal == nil {
		return localVarReturnValue, nil, reportError("environmentAccessRabbitJsonhal is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessRabbitJsonhal
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentAccessRabbitsPostRequest struct {
	ctx                            context.Context
	ApiService                     *EnvironmentAccessRabbitApiService
	environmentAccessRabbitJsonhal *EnvironmentAccessRabbitJsonhal
}

// The new EnvironmentAccessRabbit resource
func (r ApiApiEnvironmentAccessRabbitsPostRequest) EnvironmentAccessRabbitJsonhal(environmentAccessRabbitJsonhal EnvironmentAccessRabbitJsonhal) ApiApiEnvironmentAccessRabbitsPostRequest {
	r.environmentAccessRabbitJsonhal = &environmentAccessRabbitJsonhal
	return r
}

func (r ApiApiEnvironmentAccessRabbitsPostRequest) Execute() (*EnvironmentAccessRabbitJsonhal, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessRabbitsPostExecute(r)
}

/*
ApiEnvironmentAccessRabbitsPost Creates a EnvironmentAccessRabbit resource.

Creates a EnvironmentAccessRabbit resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiEnvironmentAccessRabbitsPostRequest
*/
func (a *EnvironmentAccessRabbitApiService) ApiEnvironmentAccessRabbitsPost(ctx context.Context) ApiApiEnvironmentAccessRabbitsPostRequest {
	return ApiApiEnvironmentAccessRabbitsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessRabbitJsonhal
func (a *EnvironmentAccessRabbitApiService) ApiEnvironmentAccessRabbitsPostExecute(r ApiApiEnvironmentAccessRabbitsPostRequest) (*EnvironmentAccessRabbitJsonhal, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessRabbitJsonhal
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessRabbitApiService.ApiEnvironmentAccessRabbitsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_rabbits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessRabbitJsonhal == nil {
		return localVarReturnValue, nil, reportError("environmentAccessRabbitJsonhal is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessRabbitJsonhal
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
