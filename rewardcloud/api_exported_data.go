/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ExportedDataApiService ExportedDataApi service
type ExportedDataApiService service

type ApiApiExportedDatasGetCollectionRequest struct {
	ctx context.Context
	ApiService *ExportedDataApiService
	page *int32
	itemsPerPage *int32
	dataTransferDataType *string
	dataTransferDataType2 *[]string
	environment *string
	environment2 *[]string
	orderCreatedAt *string
	orderUpdatedAt *string
}

// The collection page number
func (r ApiApiExportedDatasGetCollectionRequest) Page(page int32) ApiApiExportedDatasGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ApiApiExportedDatasGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ApiApiExportedDatasGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

// 
func (r ApiApiExportedDatasGetCollectionRequest) DataTransferDataType(dataTransferDataType string) ApiApiExportedDatasGetCollectionRequest {
	r.dataTransferDataType = &dataTransferDataType
	return r
}

// 
func (r ApiApiExportedDatasGetCollectionRequest) DataTransferDataType2(dataTransferDataType2 []string) ApiApiExportedDatasGetCollectionRequest {
	r.dataTransferDataType2 = &dataTransferDataType2
	return r
}

// 
func (r ApiApiExportedDatasGetCollectionRequest) Environment(environment string) ApiApiExportedDatasGetCollectionRequest {
	r.environment = &environment
	return r
}

// 
func (r ApiApiExportedDatasGetCollectionRequest) Environment2(environment2 []string) ApiApiExportedDatasGetCollectionRequest {
	r.environment2 = &environment2
	return r
}

// 
func (r ApiApiExportedDatasGetCollectionRequest) OrderCreatedAt(orderCreatedAt string) ApiApiExportedDatasGetCollectionRequest {
	r.orderCreatedAt = &orderCreatedAt
	return r
}

// 
func (r ApiApiExportedDatasGetCollectionRequest) OrderUpdatedAt(orderUpdatedAt string) ApiApiExportedDatasGetCollectionRequest {
	r.orderUpdatedAt = &orderUpdatedAt
	return r
}

func (r ApiApiExportedDatasGetCollectionRequest) Execute() ([]ExportedData, *http.Response, error) {
	return r.ApiService.ApiExportedDatasGetCollectionExecute(r)
}

/*
ApiExportedDatasGetCollection Retrieves the collection of ExportedData resources.

Retrieves the collection of ExportedData resources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiExportedDatasGetCollectionRequest
*/
func (a *ExportedDataApiService) ApiExportedDatasGetCollection(ctx context.Context) ApiApiExportedDatasGetCollectionRequest {
	return ApiApiExportedDatasGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ExportedData
func (a *ExportedDataApiService) ApiExportedDatasGetCollectionExecute(r ApiApiExportedDatasGetCollectionRequest) ([]ExportedData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ExportedData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportedDataApiService.ApiExportedDatasGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/exported_datas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.itemsPerPage != nil {
		localVarQueryParams.Add("itemsPerPage", parameterToString(*r.itemsPerPage, ""))
	}
	if r.dataTransferDataType != nil {
		localVarQueryParams.Add("dataTransferDataType", parameterToString(*r.dataTransferDataType, ""))
	}
	if r.dataTransferDataType2 != nil {
		t := *r.dataTransferDataType2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("dataTransferDataType[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("dataTransferDataType[]", parameterToString(t, "multi"))
		}
	}
	if r.environment != nil {
		localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	}
	if r.environment2 != nil {
		t := *r.environment2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("environment[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("environment[]", parameterToString(t, "multi"))
		}
	}
	if r.orderCreatedAt != nil {
		localVarQueryParams.Add("order[createdAt]", parameterToString(*r.orderCreatedAt, ""))
	}
	if r.orderUpdatedAt != nil {
		localVarQueryParams.Add("order[updatedAt]", parameterToString(*r.orderUpdatedAt, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiExportedDatasIdDeleteRequest struct {
	ctx context.Context
	ApiService *ExportedDataApiService
	id string
}

func (r ApiApiExportedDatasIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiExportedDatasIdDeleteExecute(r)
}

/*
ApiExportedDatasIdDelete Removes the ExportedData resource.

Removes the ExportedData resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ExportedData identifier
 @return ApiApiExportedDatasIdDeleteRequest
*/
func (a *ExportedDataApiService) ApiExportedDatasIdDelete(ctx context.Context, id string) ApiApiExportedDatasIdDeleteRequest {
	return ApiApiExportedDatasIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExportedDataApiService) ApiExportedDatasIdDeleteExecute(r ApiApiExportedDatasIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportedDataApiService.ApiExportedDatasIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/exported_datas/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiExportedDatasIdGetRequest struct {
	ctx context.Context
	ApiService *ExportedDataApiService
	id string
}

func (r ApiApiExportedDatasIdGetRequest) Execute() (*ExportedData, *http.Response, error) {
	return r.ApiService.ApiExportedDatasIdGetExecute(r)
}

/*
ApiExportedDatasIdGet Retrieves a ExportedData resource.

Retrieves a ExportedData resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ExportedData identifier
 @return ApiApiExportedDatasIdGetRequest
*/
func (a *ExportedDataApiService) ApiExportedDatasIdGet(ctx context.Context, id string) ApiApiExportedDatasIdGetRequest {
	return ApiApiExportedDatasIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExportedData
func (a *ExportedDataApiService) ApiExportedDatasIdGetExecute(r ApiApiExportedDatasIdGetRequest) (*ExportedData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportedData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportedDataApiService.ApiExportedDatasIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/exported_datas/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiExportedDatasIdPatchRequest struct {
	ctx context.Context
	ApiService *ExportedDataApiService
	id string
	exportedData *ExportedData
}

// The updated ExportedData resource
func (r ApiApiExportedDatasIdPatchRequest) ExportedData(exportedData ExportedData) ApiApiExportedDatasIdPatchRequest {
	r.exportedData = &exportedData
	return r
}

func (r ApiApiExportedDatasIdPatchRequest) Execute() (*ExportedData, *http.Response, error) {
	return r.ApiService.ApiExportedDatasIdPatchExecute(r)
}

/*
ApiExportedDatasIdPatch Updates the ExportedData resource.

Updates the ExportedData resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ExportedData identifier
 @return ApiApiExportedDatasIdPatchRequest
*/
func (a *ExportedDataApiService) ApiExportedDatasIdPatch(ctx context.Context, id string) ApiApiExportedDatasIdPatchRequest {
	return ApiApiExportedDatasIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExportedData
func (a *ExportedDataApiService) ApiExportedDatasIdPatchExecute(r ApiApiExportedDatasIdPatchRequest) (*ExportedData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportedData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportedDataApiService.ApiExportedDatasIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/exported_datas/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportedData == nil {
		return localVarReturnValue, nil, reportError("exportedData is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportedData
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiExportedDatasIdPutRequest struct {
	ctx context.Context
	ApiService *ExportedDataApiService
	id string
	exportedData *ExportedData
}

// The updated ExportedData resource
func (r ApiApiExportedDatasIdPutRequest) ExportedData(exportedData ExportedData) ApiApiExportedDatasIdPutRequest {
	r.exportedData = &exportedData
	return r
}

func (r ApiApiExportedDatasIdPutRequest) Execute() (*ExportedData, *http.Response, error) {
	return r.ApiService.ApiExportedDatasIdPutExecute(r)
}

/*
ApiExportedDatasIdPut Replaces the ExportedData resource.

Replaces the ExportedData resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ExportedData identifier
 @return ApiApiExportedDatasIdPutRequest
*/
func (a *ExportedDataApiService) ApiExportedDatasIdPut(ctx context.Context, id string) ApiApiExportedDatasIdPutRequest {
	return ApiApiExportedDatasIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExportedData
func (a *ExportedDataApiService) ApiExportedDatasIdPutExecute(r ApiApiExportedDatasIdPutRequest) (*ExportedData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportedData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportedDataApiService.ApiExportedDatasIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/exported_datas/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportedData == nil {
		return localVarReturnValue, nil, reportError("exportedData is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportedData
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiExportedDatasPostRequest struct {
	ctx context.Context
	ApiService *ExportedDataApiService
	exportedData *ExportedData
}

// The new ExportedData resource
func (r ApiApiExportedDatasPostRequest) ExportedData(exportedData ExportedData) ApiApiExportedDatasPostRequest {
	r.exportedData = &exportedData
	return r
}

func (r ApiApiExportedDatasPostRequest) Execute() (*ExportedData, *http.Response, error) {
	return r.ApiService.ApiExportedDatasPostExecute(r)
}

/*
ApiExportedDatasPost Creates a ExportedData resource.

Creates a ExportedData resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiExportedDatasPostRequest
*/
func (a *ExportedDataApiService) ApiExportedDatasPost(ctx context.Context) ApiApiExportedDatasPostRequest {
	return ApiApiExportedDatasPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExportedData
func (a *ExportedDataApiService) ApiExportedDatasPostExecute(r ApiApiExportedDatasPostRequest) (*ExportedData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportedData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportedDataApiService.ApiExportedDatasPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/exported_datas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportedData == nil {
		return localVarReturnValue, nil, reportError("exportedData is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportedData
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
