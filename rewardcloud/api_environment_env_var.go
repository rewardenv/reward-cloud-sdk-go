/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.7.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// EnvironmentEnvVarApiService EnvironmentEnvVarApi service
type EnvironmentEnvVarApiService service

type EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest struct {
	ctx          context.Context
	ApiService   *EnvironmentEnvVarApiService
	page         *int32
	itemsPerPage *int32
	environment  *string
	environment2 *[]string
	envVarType   *string
	envVarType2  *[]string
}

// The collection page number
func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest) Page(page int32) EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest) Environment(environment string) EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest {
	r.environment = &environment
	return r
}

func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest) Environment2(environment2 []string) EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest {
	r.environment2 = &environment2
	return r
}

func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest) EnvVarType(envVarType string) EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest {
	r.envVarType = &envVarType
	return r
}

func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest) EnvVarType2(envVarType2 []string) EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest {
	r.envVarType2 = &envVarType2
	return r
}

func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest) Execute() ([]EnvironmentEnvVar, *http.Response, error) {
	return r.ApiService.ApiEnvironmentEnvVarsGetCollectionExecute(r)
}

/*
ApiEnvironmentEnvVarsGetCollection Retrieves the collection of EnvironmentEnvVar resources.

Retrieves the collection of EnvironmentEnvVar resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest
*/
func (a *EnvironmentEnvVarApiService) ApiEnvironmentEnvVarsGetCollection(ctx context.Context) EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest {
	return EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []EnvironmentEnvVar
func (a *EnvironmentEnvVarApiService) ApiEnvironmentEnvVarsGetCollectionExecute(r EnvironmentEnvVarApiApiEnvironmentEnvVarsGetCollectionRequest) ([]EnvironmentEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []EnvironmentEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentEnvVarApiService.ApiEnvironmentEnvVarsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	if r.environment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environment", r.environment, "")
	}
	if r.environment2 != nil {
		t := *r.environment2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environment[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environment[]", t, "multi")
		}
	}
	if r.envVarType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "envVarType", r.envVarType, "")
	}
	if r.envVarType2 != nil {
		t := *r.envVarType2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "envVarType[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "envVarType[]", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentEnvVarApiApiEnvironmentEnvVarsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *EnvironmentEnvVarApiService
	id         string
}

func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiEnvironmentEnvVarsIdDeleteExecute(r)
}

/*
ApiEnvironmentEnvVarsIdDelete Removes the EnvironmentEnvVar resource.

Removes the EnvironmentEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentEnvVar identifier
	@return EnvironmentEnvVarApiApiEnvironmentEnvVarsIdDeleteRequest
*/
func (a *EnvironmentEnvVarApiService) ApiEnvironmentEnvVarsIdDelete(ctx context.Context, id string) EnvironmentEnvVarApiApiEnvironmentEnvVarsIdDeleteRequest {
	return EnvironmentEnvVarApiApiEnvironmentEnvVarsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EnvironmentEnvVarApiService) ApiEnvironmentEnvVarsIdDeleteExecute(r EnvironmentEnvVarApiApiEnvironmentEnvVarsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentEnvVarApiService.ApiEnvironmentEnvVarsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnvironmentEnvVarApiApiEnvironmentEnvVarsIdGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentEnvVarApiService
	id         string
}

func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsIdGetRequest) Execute() (*EnvironmentEnvVar, *http.Response, error) {
	return r.ApiService.ApiEnvironmentEnvVarsIdGetExecute(r)
}

/*
ApiEnvironmentEnvVarsIdGet Retrieves a EnvironmentEnvVar resource.

Retrieves a EnvironmentEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentEnvVar identifier
	@return EnvironmentEnvVarApiApiEnvironmentEnvVarsIdGetRequest
*/
func (a *EnvironmentEnvVarApiService) ApiEnvironmentEnvVarsIdGet(ctx context.Context, id string) EnvironmentEnvVarApiApiEnvironmentEnvVarsIdGetRequest {
	return EnvironmentEnvVarApiApiEnvironmentEnvVarsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentEnvVar
func (a *EnvironmentEnvVarApiService) ApiEnvironmentEnvVarsIdGetExecute(r EnvironmentEnvVarApiApiEnvironmentEnvVarsIdGetRequest) (*EnvironmentEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentEnvVarApiService.ApiEnvironmentEnvVarsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPatchRequest struct {
	ctx               context.Context
	ApiService        *EnvironmentEnvVarApiService
	environmentEnvVar *EnvironmentEnvVar
	id                string
}

// The updated EnvironmentEnvVar resource
func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPatchRequest) EnvironmentEnvVar(environmentEnvVar EnvironmentEnvVar) EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPatchRequest {
	r.environmentEnvVar = &environmentEnvVar
	return r
}

func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPatchRequest) Execute() (*EnvironmentEnvVar, *http.Response, error) {
	return r.ApiService.ApiEnvironmentEnvVarsIdPatchExecute(r)
}

/*
ApiEnvironmentEnvVarsIdPatch Updates the EnvironmentEnvVar resource.

Updates the EnvironmentEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentEnvVar identifier
	@return EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPatchRequest
*/
func (a *EnvironmentEnvVarApiService) ApiEnvironmentEnvVarsIdPatch(ctx context.Context, id string) EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPatchRequest {
	return EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentEnvVar
func (a *EnvironmentEnvVarApiService) ApiEnvironmentEnvVarsIdPatchExecute(r EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPatchRequest) (*EnvironmentEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentEnvVarApiService.ApiEnvironmentEnvVarsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentEnvVar == nil {
		return localVarReturnValue, nil, reportError("environmentEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPutRequest struct {
	ctx               context.Context
	ApiService        *EnvironmentEnvVarApiService
	environmentEnvVar *EnvironmentEnvVar
	id                string
}

// The updated EnvironmentEnvVar resource
func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPutRequest) EnvironmentEnvVar(environmentEnvVar EnvironmentEnvVar) EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPutRequest {
	r.environmentEnvVar = &environmentEnvVar
	return r
}

func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPutRequest) Execute() (*EnvironmentEnvVar, *http.Response, error) {
	return r.ApiService.ApiEnvironmentEnvVarsIdPutExecute(r)
}

/*
ApiEnvironmentEnvVarsIdPut Replaces the EnvironmentEnvVar resource.

Replaces the EnvironmentEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentEnvVar identifier
	@return EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPutRequest
*/
func (a *EnvironmentEnvVarApiService) ApiEnvironmentEnvVarsIdPut(ctx context.Context, id string) EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPutRequest {
	return EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentEnvVar
func (a *EnvironmentEnvVarApiService) ApiEnvironmentEnvVarsIdPutExecute(r EnvironmentEnvVarApiApiEnvironmentEnvVarsIdPutRequest) (*EnvironmentEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentEnvVarApiService.ApiEnvironmentEnvVarsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentEnvVar == nil {
		return localVarReturnValue, nil, reportError("environmentEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentEnvVarApiApiEnvironmentEnvVarsPostRequest struct {
	ctx               context.Context
	ApiService        *EnvironmentEnvVarApiService
	environmentEnvVar *EnvironmentEnvVar
}

// The new EnvironmentEnvVar resource
func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsPostRequest) EnvironmentEnvVar(environmentEnvVar EnvironmentEnvVar) EnvironmentEnvVarApiApiEnvironmentEnvVarsPostRequest {
	r.environmentEnvVar = &environmentEnvVar
	return r
}

func (r EnvironmentEnvVarApiApiEnvironmentEnvVarsPostRequest) Execute() (*EnvironmentEnvVar, *http.Response, error) {
	return r.ApiService.ApiEnvironmentEnvVarsPostExecute(r)
}

/*
ApiEnvironmentEnvVarsPost Creates a EnvironmentEnvVar resource.

Creates a EnvironmentEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentEnvVarApiApiEnvironmentEnvVarsPostRequest
*/
func (a *EnvironmentEnvVarApiService) ApiEnvironmentEnvVarsPost(ctx context.Context) EnvironmentEnvVarApiApiEnvironmentEnvVarsPostRequest {
	return EnvironmentEnvVarApiApiEnvironmentEnvVarsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EnvironmentEnvVar
func (a *EnvironmentEnvVarApiService) ApiEnvironmentEnvVarsPostExecute(r EnvironmentEnvVarApiApiEnvironmentEnvVarsPostRequest) (*EnvironmentEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentEnvVarApiService.ApiEnvironmentEnvVarsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentEnvVar == nil {
		return localVarReturnValue, nil, reportError("environmentEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
