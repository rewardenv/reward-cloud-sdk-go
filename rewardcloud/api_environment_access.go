/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// EnvironmentAccessApiService EnvironmentAccessApi service
type EnvironmentAccessApiService service

type ApiApiEnvironmentAccessesGetCollectionRequest struct {
	ctx          context.Context
	ApiService   *EnvironmentAccessApiService
	page         *int32
	itemsPerPage *int32
	environment  *string
	environment2 *[]string
	frontend     *string
	frontend2    *[]string
	backend      *string
	backend2     *[]string
	database     *string
	database2    *[]string
	devTools     *string
	devTools2    *[]string
	redis        *string
	redis2       *[]string
	rabbit       *string
	rabbit2      *[]string
}

// The collection page number
func (r ApiApiEnvironmentAccessesGetCollectionRequest) Page(page int32) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ApiApiEnvironmentAccessesGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) Environment(environment string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.environment = &environment
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) Environment2(environment2 []string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.environment2 = &environment2
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) Frontend(frontend string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.frontend = &frontend
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) Frontend2(frontend2 []string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.frontend2 = &frontend2
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) Backend(backend string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.backend = &backend
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) Backend2(backend2 []string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.backend2 = &backend2
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) Database(database string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.database = &database
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) Database2(database2 []string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.database2 = &database2
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) DevTools(devTools string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.devTools = &devTools
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) DevTools2(devTools2 []string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.devTools2 = &devTools2
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) Redis(redis string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.redis = &redis
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) Redis2(redis2 []string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.redis2 = &redis2
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) Rabbit(rabbit string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.rabbit = &rabbit
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) Rabbit2(rabbit2 []string) ApiApiEnvironmentAccessesGetCollectionRequest {
	r.rabbit2 = &rabbit2
	return r
}

func (r ApiApiEnvironmentAccessesGetCollectionRequest) Execute() (*ApiEnvironmentAccessesGetCollection200Response, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessesGetCollectionExecute(r)
}

/*
ApiEnvironmentAccessesGetCollection Retrieves the collection of EnvironmentAccess resources.

Retrieves the collection of EnvironmentAccess resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiEnvironmentAccessesGetCollectionRequest
*/
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesGetCollection(ctx context.Context) ApiApiEnvironmentAccessesGetCollectionRequest {
	return ApiApiEnvironmentAccessesGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ApiEnvironmentAccessesGetCollection200Response
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesGetCollectionExecute(r ApiApiEnvironmentAccessesGetCollectionRequest) (*ApiEnvironmentAccessesGetCollection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiEnvironmentAccessesGetCollection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessApiService.ApiEnvironmentAccessesGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_accesses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.itemsPerPage != nil {
		localVarQueryParams.Add("itemsPerPage", parameterToString(*r.itemsPerPage, ""))
	}
	if r.environment != nil {
		localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	}
	if r.environment2 != nil {
		t := *r.environment2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("environment[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("environment[]", parameterToString(t, "multi"))
		}
	}
	if r.frontend != nil {
		localVarQueryParams.Add("frontend", parameterToString(*r.frontend, ""))
	}
	if r.frontend2 != nil {
		t := *r.frontend2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("frontend[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("frontend[]", parameterToString(t, "multi"))
		}
	}
	if r.backend != nil {
		localVarQueryParams.Add("backend", parameterToString(*r.backend, ""))
	}
	if r.backend2 != nil {
		t := *r.backend2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("backend[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("backend[]", parameterToString(t, "multi"))
		}
	}
	if r.database != nil {
		localVarQueryParams.Add("database", parameterToString(*r.database, ""))
	}
	if r.database2 != nil {
		t := *r.database2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("database[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("database[]", parameterToString(t, "multi"))
		}
	}
	if r.devTools != nil {
		localVarQueryParams.Add("devTools", parameterToString(*r.devTools, ""))
	}
	if r.devTools2 != nil {
		t := *r.devTools2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devTools[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devTools[]", parameterToString(t, "multi"))
		}
	}
	if r.redis != nil {
		localVarQueryParams.Add("redis", parameterToString(*r.redis, ""))
	}
	if r.redis2 != nil {
		t := *r.redis2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("redis[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("redis[]", parameterToString(t, "multi"))
		}
	}
	if r.rabbit != nil {
		localVarQueryParams.Add("rabbit", parameterToString(*r.rabbit, ""))
	}
	if r.rabbit2 != nil {
		t := *r.rabbit2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rabbit[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rabbit[]", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentAccessesIdDeleteRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessApiService
	id         string
}

func (r ApiApiEnvironmentAccessesIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessesIdDeleteExecute(r)
}

/*
ApiEnvironmentAccessesIdDelete Removes the EnvironmentAccess resource.

Removes the EnvironmentAccess resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccess identifier
	@return ApiApiEnvironmentAccessesIdDeleteRequest
*/
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesIdDelete(ctx context.Context, id string) ApiApiEnvironmentAccessesIdDeleteRequest {
	return ApiApiEnvironmentAccessesIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesIdDeleteExecute(r ApiApiEnvironmentAccessesIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessApiService.ApiEnvironmentAccessesIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_accesses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiEnvironmentAccessesIdGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessApiService
	id         string
}

func (r ApiApiEnvironmentAccessesIdGetRequest) Execute() (*EnvironmentAccessJsonhal, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessesIdGetExecute(r)
}

/*
ApiEnvironmentAccessesIdGet Retrieves a EnvironmentAccess resource.

Retrieves a EnvironmentAccess resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccess identifier
	@return ApiApiEnvironmentAccessesIdGetRequest
*/
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesIdGet(ctx context.Context, id string) ApiApiEnvironmentAccessesIdGetRequest {
	return ApiApiEnvironmentAccessesIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessJsonhal
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesIdGetExecute(r ApiApiEnvironmentAccessesIdGetRequest) (*EnvironmentAccessJsonhal, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessJsonhal
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessApiService.ApiEnvironmentAccessesIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_accesses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentAccessesIdPatchRequest struct {
	ctx               context.Context
	ApiService        *EnvironmentAccessApiService
	id                string
	environmentAccess *EnvironmentAccess
}

// The updated EnvironmentAccess resource
func (r ApiApiEnvironmentAccessesIdPatchRequest) EnvironmentAccess(environmentAccess EnvironmentAccess) ApiApiEnvironmentAccessesIdPatchRequest {
	r.environmentAccess = &environmentAccess
	return r
}

func (r ApiApiEnvironmentAccessesIdPatchRequest) Execute() (*EnvironmentAccessJsonhal, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessesIdPatchExecute(r)
}

/*
ApiEnvironmentAccessesIdPatch Updates the EnvironmentAccess resource.

Updates the EnvironmentAccess resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccess identifier
	@return ApiApiEnvironmentAccessesIdPatchRequest
*/
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesIdPatch(ctx context.Context, id string) ApiApiEnvironmentAccessesIdPatchRequest {
	return ApiApiEnvironmentAccessesIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessJsonhal
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesIdPatchExecute(r ApiApiEnvironmentAccessesIdPatchRequest) (*EnvironmentAccessJsonhal, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessJsonhal
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessApiService.ApiEnvironmentAccessesIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_accesses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccess == nil {
		return localVarReturnValue, nil, reportError("environmentAccess is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccess
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentAccessesIdPutRequest struct {
	ctx                      context.Context
	ApiService               *EnvironmentAccessApiService
	id                       string
	environmentAccessJsonhal *EnvironmentAccessJsonhal
}

// The updated EnvironmentAccess resource
func (r ApiApiEnvironmentAccessesIdPutRequest) EnvironmentAccessJsonhal(environmentAccessJsonhal EnvironmentAccessJsonhal) ApiApiEnvironmentAccessesIdPutRequest {
	r.environmentAccessJsonhal = &environmentAccessJsonhal
	return r
}

func (r ApiApiEnvironmentAccessesIdPutRequest) Execute() (*EnvironmentAccessJsonhal, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessesIdPutExecute(r)
}

/*
ApiEnvironmentAccessesIdPut Replaces the EnvironmentAccess resource.

Replaces the EnvironmentAccess resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccess identifier
	@return ApiApiEnvironmentAccessesIdPutRequest
*/
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesIdPut(ctx context.Context, id string) ApiApiEnvironmentAccessesIdPutRequest {
	return ApiApiEnvironmentAccessesIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessJsonhal
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesIdPutExecute(r ApiApiEnvironmentAccessesIdPutRequest) (*EnvironmentAccessJsonhal, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessJsonhal
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessApiService.ApiEnvironmentAccessesIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_accesses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessJsonhal == nil {
		return localVarReturnValue, nil, reportError("environmentAccessJsonhal is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessJsonhal
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentAccessesIdallDataGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessApiService
	id         string
}

func (r ApiApiEnvironmentAccessesIdallDataGetRequest) Execute() (*EnvironmentAccessJsonhal, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessesIdallDataGetExecute(r)
}

/*
ApiEnvironmentAccessesIdallDataGet Retrieves a EnvironmentAccess resource.

Retrieves a EnvironmentAccess resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccess identifier
	@return ApiApiEnvironmentAccessesIdallDataGetRequest
*/
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesIdallDataGet(ctx context.Context, id string) ApiApiEnvironmentAccessesIdallDataGetRequest {
	return ApiApiEnvironmentAccessesIdallDataGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessJsonhal
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesIdallDataGetExecute(r ApiApiEnvironmentAccessesIdallDataGetRequest) (*EnvironmentAccessJsonhal, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessJsonhal
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessApiService.ApiEnvironmentAccessesIdallDataGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_accesses/{id}/all-data"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEnvironmentAccessesPostRequest struct {
	ctx                      context.Context
	ApiService               *EnvironmentAccessApiService
	environmentAccessJsonhal *EnvironmentAccessJsonhal
}

// The new EnvironmentAccess resource
func (r ApiApiEnvironmentAccessesPostRequest) EnvironmentAccessJsonhal(environmentAccessJsonhal EnvironmentAccessJsonhal) ApiApiEnvironmentAccessesPostRequest {
	r.environmentAccessJsonhal = &environmentAccessJsonhal
	return r
}

func (r ApiApiEnvironmentAccessesPostRequest) Execute() (*EnvironmentAccessJsonhal, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessesPostExecute(r)
}

/*
ApiEnvironmentAccessesPost Creates a EnvironmentAccess resource.

Creates a EnvironmentAccess resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiEnvironmentAccessesPostRequest
*/
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesPost(ctx context.Context) ApiApiEnvironmentAccessesPostRequest {
	return ApiApiEnvironmentAccessesPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessJsonhal
func (a *EnvironmentAccessApiService) ApiEnvironmentAccessesPostExecute(r ApiApiEnvironmentAccessesPostRequest) (*EnvironmentAccessJsonhal, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessJsonhal
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessApiService.ApiEnvironmentAccessesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_accesses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessJsonhal == nil {
		return localVarReturnValue, nil, reportError("environmentAccessJsonhal is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/vnd.api+json", "application/json", "application/xml", "text/xml", "application/x-yaml", "text/csv", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessJsonhal
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
