/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// EnvironmentComponentApiService EnvironmentComponentApi service
type EnvironmentComponentApiService service

type EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest struct {
	ctx               context.Context
	ApiService        *EnvironmentComponentApiService
	page              *int32
	itemsPerPage      *int32
	componentVersion  *string
	componentVersion2 *[]string
	environment       *string
	environment2      *[]string
}

// The collection page number
func (r EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest) Page(page int32) EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest) ComponentVersion(componentVersion string) EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest {
	r.componentVersion = &componentVersion
	return r
}

func (r EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest) ComponentVersion2(componentVersion2 []string) EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest {
	r.componentVersion2 = &componentVersion2
	return r
}

func (r EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest) Environment(environment string) EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest {
	r.environment = &environment
	return r
}

func (r EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest) Environment2(environment2 []string) EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest {
	r.environment2 = &environment2
	return r
}

func (r EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest) Execute() ([]EnvironmentComponent, *http.Response, error) {
	return r.ApiService.ApiEnvironmentComponentsGetCollectionExecute(r)
}

/*
ApiEnvironmentComponentsGetCollection Retrieves the collection of EnvironmentComponent resources.

Retrieves the collection of EnvironmentComponent resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest
*/
func (a *EnvironmentComponentApiService) ApiEnvironmentComponentsGetCollection(ctx context.Context) EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest {
	return EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []EnvironmentComponent
func (a *EnvironmentComponentApiService) ApiEnvironmentComponentsGetCollectionExecute(r EnvironmentComponentApiApiEnvironmentComponentsGetCollectionRequest) ([]EnvironmentComponent, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []EnvironmentComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentComponentApiService.ApiEnvironmentComponentsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_components"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	if r.componentVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "componentVersion", r.componentVersion, "")
	}
	if r.componentVersion2 != nil {
		t := *r.componentVersion2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "componentVersion[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "componentVersion[]", t, "multi")
		}
	}
	if r.environment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environment", r.environment, "")
	}
	if r.environment2 != nil {
		t := *r.environment2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environment[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environment[]", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentComponentApiApiEnvironmentComponentsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *EnvironmentComponentApiService
	id         string
}

func (r EnvironmentComponentApiApiEnvironmentComponentsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiEnvironmentComponentsIdDeleteExecute(r)
}

/*
ApiEnvironmentComponentsIdDelete Removes the EnvironmentComponent resource.

Removes the EnvironmentComponent resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentComponent identifier
	@return EnvironmentComponentApiApiEnvironmentComponentsIdDeleteRequest
*/
func (a *EnvironmentComponentApiService) ApiEnvironmentComponentsIdDelete(ctx context.Context, id string) EnvironmentComponentApiApiEnvironmentComponentsIdDeleteRequest {
	return EnvironmentComponentApiApiEnvironmentComponentsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EnvironmentComponentApiService) ApiEnvironmentComponentsIdDeleteExecute(r EnvironmentComponentApiApiEnvironmentComponentsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentComponentApiService.ApiEnvironmentComponentsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_components/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnvironmentComponentApiApiEnvironmentComponentsIdGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentComponentApiService
	id         string
}

func (r EnvironmentComponentApiApiEnvironmentComponentsIdGetRequest) Execute() (*EnvironmentComponent, *http.Response, error) {
	return r.ApiService.ApiEnvironmentComponentsIdGetExecute(r)
}

/*
ApiEnvironmentComponentsIdGet Retrieves a EnvironmentComponent resource.

Retrieves a EnvironmentComponent resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentComponent identifier
	@return EnvironmentComponentApiApiEnvironmentComponentsIdGetRequest
*/
func (a *EnvironmentComponentApiService) ApiEnvironmentComponentsIdGet(ctx context.Context, id string) EnvironmentComponentApiApiEnvironmentComponentsIdGetRequest {
	return EnvironmentComponentApiApiEnvironmentComponentsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentComponent
func (a *EnvironmentComponentApiService) ApiEnvironmentComponentsIdGetExecute(r EnvironmentComponentApiApiEnvironmentComponentsIdGetRequest) (*EnvironmentComponent, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentComponentApiService.ApiEnvironmentComponentsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_components/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentComponentApiApiEnvironmentComponentsIdPatchRequest struct {
	ctx                  context.Context
	ApiService           *EnvironmentComponentApiService
	environmentComponent *EnvironmentComponent
	id                   string
}

// The updated EnvironmentComponent resource
func (r EnvironmentComponentApiApiEnvironmentComponentsIdPatchRequest) EnvironmentComponent(environmentComponent EnvironmentComponent) EnvironmentComponentApiApiEnvironmentComponentsIdPatchRequest {
	r.environmentComponent = &environmentComponent
	return r
}

func (r EnvironmentComponentApiApiEnvironmentComponentsIdPatchRequest) Execute() (*EnvironmentComponent, *http.Response, error) {
	return r.ApiService.ApiEnvironmentComponentsIdPatchExecute(r)
}

/*
ApiEnvironmentComponentsIdPatch Updates the EnvironmentComponent resource.

Updates the EnvironmentComponent resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentComponent identifier
	@return EnvironmentComponentApiApiEnvironmentComponentsIdPatchRequest
*/
func (a *EnvironmentComponentApiService) ApiEnvironmentComponentsIdPatch(ctx context.Context, id string) EnvironmentComponentApiApiEnvironmentComponentsIdPatchRequest {
	return EnvironmentComponentApiApiEnvironmentComponentsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentComponent
func (a *EnvironmentComponentApiService) ApiEnvironmentComponentsIdPatchExecute(r EnvironmentComponentApiApiEnvironmentComponentsIdPatchRequest) (*EnvironmentComponent, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentComponentApiService.ApiEnvironmentComponentsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_components/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentComponent == nil {
		return localVarReturnValue, nil, reportError("environmentComponent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentComponent
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentComponentApiApiEnvironmentComponentsIdPutRequest struct {
	ctx                  context.Context
	ApiService           *EnvironmentComponentApiService
	environmentComponent *EnvironmentComponent
	id                   string
}

// The updated EnvironmentComponent resource
func (r EnvironmentComponentApiApiEnvironmentComponentsIdPutRequest) EnvironmentComponent(environmentComponent EnvironmentComponent) EnvironmentComponentApiApiEnvironmentComponentsIdPutRequest {
	r.environmentComponent = &environmentComponent
	return r
}

func (r EnvironmentComponentApiApiEnvironmentComponentsIdPutRequest) Execute() (*EnvironmentComponent, *http.Response, error) {
	return r.ApiService.ApiEnvironmentComponentsIdPutExecute(r)
}

/*
ApiEnvironmentComponentsIdPut Replaces the EnvironmentComponent resource.

Replaces the EnvironmentComponent resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentComponent identifier
	@return EnvironmentComponentApiApiEnvironmentComponentsIdPutRequest
*/
func (a *EnvironmentComponentApiService) ApiEnvironmentComponentsIdPut(ctx context.Context, id string) EnvironmentComponentApiApiEnvironmentComponentsIdPutRequest {
	return EnvironmentComponentApiApiEnvironmentComponentsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentComponent
func (a *EnvironmentComponentApiService) ApiEnvironmentComponentsIdPutExecute(r EnvironmentComponentApiApiEnvironmentComponentsIdPutRequest) (*EnvironmentComponent, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentComponentApiService.ApiEnvironmentComponentsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_components/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentComponent == nil {
		return localVarReturnValue, nil, reportError("environmentComponent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentComponent
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentComponentApiApiEnvironmentComponentsPostRequest struct {
	ctx                  context.Context
	ApiService           *EnvironmentComponentApiService
	environmentComponent *EnvironmentComponent
}

// The new EnvironmentComponent resource
func (r EnvironmentComponentApiApiEnvironmentComponentsPostRequest) EnvironmentComponent(environmentComponent EnvironmentComponent) EnvironmentComponentApiApiEnvironmentComponentsPostRequest {
	r.environmentComponent = &environmentComponent
	return r
}

func (r EnvironmentComponentApiApiEnvironmentComponentsPostRequest) Execute() (*EnvironmentComponent, *http.Response, error) {
	return r.ApiService.ApiEnvironmentComponentsPostExecute(r)
}

/*
ApiEnvironmentComponentsPost Creates a EnvironmentComponent resource.

Creates a EnvironmentComponent resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentComponentApiApiEnvironmentComponentsPostRequest
*/
func (a *EnvironmentComponentApiService) ApiEnvironmentComponentsPost(ctx context.Context) EnvironmentComponentApiApiEnvironmentComponentsPostRequest {
	return EnvironmentComponentApiApiEnvironmentComponentsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EnvironmentComponent
func (a *EnvironmentComponentApiService) ApiEnvironmentComponentsPostExecute(r EnvironmentComponentApiApiEnvironmentComponentsPostRequest) (*EnvironmentComponent, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentComponentApiService.ApiEnvironmentComponentsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_components"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentComponent == nil {
		return localVarReturnValue, nil, reportError("environmentComponent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentComponent
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
