/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.7.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// EnvironmentAccessBackendApiService EnvironmentAccessBackendApi service
type EnvironmentAccessBackendApiService service

type EnvironmentAccessBackendApiApiEnvironmentAccessBackendsGetCollectionRequest struct {
	ctx          context.Context
	ApiService   *EnvironmentAccessBackendApiService
	page         *int32
	itemsPerPage *int32
}

// The collection page number
func (r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsGetCollectionRequest) Page(page int32) EnvironmentAccessBackendApiApiEnvironmentAccessBackendsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) EnvironmentAccessBackendApiApiEnvironmentAccessBackendsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsGetCollectionRequest) Execute() ([]EnvironmentAccessBackend, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessBackendsGetCollectionExecute(r)
}

/*
ApiEnvironmentAccessBackendsGetCollection Retrieves the collection of EnvironmentAccessBackend resources.

Retrieves the collection of EnvironmentAccessBackend resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentAccessBackendApiApiEnvironmentAccessBackendsGetCollectionRequest
*/
func (a *EnvironmentAccessBackendApiService) ApiEnvironmentAccessBackendsGetCollection(ctx context.Context) EnvironmentAccessBackendApiApiEnvironmentAccessBackendsGetCollectionRequest {
	return EnvironmentAccessBackendApiApiEnvironmentAccessBackendsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []EnvironmentAccessBackend
func (a *EnvironmentAccessBackendApiService) ApiEnvironmentAccessBackendsGetCollectionExecute(r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsGetCollectionRequest) ([]EnvironmentAccessBackend, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []EnvironmentAccessBackend
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessBackendApiService.ApiEnvironmentAccessBackendsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_backends"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessBackendApiService
	id         string
}

func (r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessBackendsIdDeleteExecute(r)
}

/*
ApiEnvironmentAccessBackendsIdDelete Removes the EnvironmentAccessBackend resource.

Removes the EnvironmentAccessBackend resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessBackend identifier
	@return EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdDeleteRequest
*/
func (a *EnvironmentAccessBackendApiService) ApiEnvironmentAccessBackendsIdDelete(ctx context.Context, id string) EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdDeleteRequest {
	return EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EnvironmentAccessBackendApiService) ApiEnvironmentAccessBackendsIdDeleteExecute(r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessBackendApiService.ApiEnvironmentAccessBackendsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_backends/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdGetRequest struct {
	ctx        context.Context
	ApiService *EnvironmentAccessBackendApiService
	id         string
}

func (r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdGetRequest) Execute() (*EnvironmentAccessBackend, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessBackendsIdGetExecute(r)
}

/*
ApiEnvironmentAccessBackendsIdGet Retrieves a EnvironmentAccessBackend resource.

Retrieves a EnvironmentAccessBackend resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessBackend identifier
	@return EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdGetRequest
*/
func (a *EnvironmentAccessBackendApiService) ApiEnvironmentAccessBackendsIdGet(ctx context.Context, id string) EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdGetRequest {
	return EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessBackend
func (a *EnvironmentAccessBackendApiService) ApiEnvironmentAccessBackendsIdGetExecute(r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdGetRequest) (*EnvironmentAccessBackend, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessBackend
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessBackendApiService.ApiEnvironmentAccessBackendsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_backends/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPatchRequest struct {
	ctx                      context.Context
	ApiService               *EnvironmentAccessBackendApiService
	environmentAccessBackend *EnvironmentAccessBackend
	id                       string
}

// The updated EnvironmentAccessBackend resource
func (r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPatchRequest) EnvironmentAccessBackend(environmentAccessBackend EnvironmentAccessBackend) EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPatchRequest {
	r.environmentAccessBackend = &environmentAccessBackend
	return r
}

func (r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPatchRequest) Execute() (*EnvironmentAccessBackend, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessBackendsIdPatchExecute(r)
}

/*
ApiEnvironmentAccessBackendsIdPatch Updates the EnvironmentAccessBackend resource.

Updates the EnvironmentAccessBackend resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessBackend identifier
	@return EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPatchRequest
*/
func (a *EnvironmentAccessBackendApiService) ApiEnvironmentAccessBackendsIdPatch(ctx context.Context, id string) EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPatchRequest {
	return EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessBackend
func (a *EnvironmentAccessBackendApiService) ApiEnvironmentAccessBackendsIdPatchExecute(r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPatchRequest) (*EnvironmentAccessBackend, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessBackend
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessBackendApiService.ApiEnvironmentAccessBackendsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_backends/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessBackend == nil {
		return localVarReturnValue, nil, reportError("environmentAccessBackend is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessBackend
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPutRequest struct {
	ctx                      context.Context
	ApiService               *EnvironmentAccessBackendApiService
	environmentAccessBackend *EnvironmentAccessBackend
	id                       string
}

// The updated EnvironmentAccessBackend resource
func (r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPutRequest) EnvironmentAccessBackend(environmentAccessBackend EnvironmentAccessBackend) EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPutRequest {
	r.environmentAccessBackend = &environmentAccessBackend
	return r
}

func (r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPutRequest) Execute() (*EnvironmentAccessBackend, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessBackendsIdPutExecute(r)
}

/*
ApiEnvironmentAccessBackendsIdPut Replaces the EnvironmentAccessBackend resource.

Replaces the EnvironmentAccessBackend resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id EnvironmentAccessBackend identifier
	@return EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPutRequest
*/
func (a *EnvironmentAccessBackendApiService) ApiEnvironmentAccessBackendsIdPut(ctx context.Context, id string) EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPutRequest {
	return EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessBackend
func (a *EnvironmentAccessBackendApiService) ApiEnvironmentAccessBackendsIdPutExecute(r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsIdPutRequest) (*EnvironmentAccessBackend, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessBackend
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessBackendApiService.ApiEnvironmentAccessBackendsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_backends/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessBackend == nil {
		return localVarReturnValue, nil, reportError("environmentAccessBackend is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessBackend
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentAccessBackendApiApiEnvironmentAccessBackendsPostRequest struct {
	ctx                      context.Context
	ApiService               *EnvironmentAccessBackendApiService
	environmentAccessBackend *EnvironmentAccessBackend
}

// The new EnvironmentAccessBackend resource
func (r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsPostRequest) EnvironmentAccessBackend(environmentAccessBackend EnvironmentAccessBackend) EnvironmentAccessBackendApiApiEnvironmentAccessBackendsPostRequest {
	r.environmentAccessBackend = &environmentAccessBackend
	return r
}

func (r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsPostRequest) Execute() (*EnvironmentAccessBackend, *http.Response, error) {
	return r.ApiService.ApiEnvironmentAccessBackendsPostExecute(r)
}

/*
ApiEnvironmentAccessBackendsPost Creates a EnvironmentAccessBackend resource.

Creates a EnvironmentAccessBackend resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnvironmentAccessBackendApiApiEnvironmentAccessBackendsPostRequest
*/
func (a *EnvironmentAccessBackendApiService) ApiEnvironmentAccessBackendsPost(ctx context.Context) EnvironmentAccessBackendApiApiEnvironmentAccessBackendsPostRequest {
	return EnvironmentAccessBackendApiApiEnvironmentAccessBackendsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EnvironmentAccessBackend
func (a *EnvironmentAccessBackendApiService) ApiEnvironmentAccessBackendsPostExecute(r EnvironmentAccessBackendApiApiEnvironmentAccessBackendsPostRequest) (*EnvironmentAccessBackend, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnvironmentAccessBackend
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentAccessBackendApiService.ApiEnvironmentAccessBackendsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/environment_access_backends"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentAccessBackend == nil {
		return localVarReturnValue, nil, reportError("environmentAccessBackend is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentAccessBackend
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
