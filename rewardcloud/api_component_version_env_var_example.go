/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ComponentVersionEnvVarExampleApiService ComponentVersionEnvVarExampleApi service
type ComponentVersionEnvVarExampleApiService service

type ApiApiComponentVersionEnvVarExamplesGetCollectionRequest struct {
	ctx context.Context
	ApiService *ComponentVersionEnvVarExampleApiService
	page *int32
	itemsPerPage *int32
}

// The collection page number
func (r ApiApiComponentVersionEnvVarExamplesGetCollectionRequest) Page(page int32) ApiApiComponentVersionEnvVarExamplesGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ApiApiComponentVersionEnvVarExamplesGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ApiApiComponentVersionEnvVarExamplesGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r ApiApiComponentVersionEnvVarExamplesGetCollectionRequest) Execute() ([]ComponentVersionEnvVarExample, *http.Response, error) {
	return r.ApiService.ApiComponentVersionEnvVarExamplesGetCollectionExecute(r)
}

/*
ApiComponentVersionEnvVarExamplesGetCollection Retrieves the collection of ComponentVersionEnvVarExample resources.

Retrieves the collection of ComponentVersionEnvVarExample resources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiComponentVersionEnvVarExamplesGetCollectionRequest
*/
func (a *ComponentVersionEnvVarExampleApiService) ApiComponentVersionEnvVarExamplesGetCollection(ctx context.Context) ApiApiComponentVersionEnvVarExamplesGetCollectionRequest {
	return ApiApiComponentVersionEnvVarExamplesGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ComponentVersionEnvVarExample
func (a *ComponentVersionEnvVarExampleApiService) ApiComponentVersionEnvVarExamplesGetCollectionExecute(r ApiApiComponentVersionEnvVarExamplesGetCollectionRequest) ([]ComponentVersionEnvVarExample, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ComponentVersionEnvVarExample
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionEnvVarExampleApiService.ApiComponentVersionEnvVarExamplesGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_version_env_var_examples"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.itemsPerPage != nil {
		localVarQueryParams.Add("itemsPerPage", parameterToString(*r.itemsPerPage, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiComponentVersionEnvVarExamplesIdDeleteRequest struct {
	ctx context.Context
	ApiService *ComponentVersionEnvVarExampleApiService
	id string
}

func (r ApiApiComponentVersionEnvVarExamplesIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiComponentVersionEnvVarExamplesIdDeleteExecute(r)
}

/*
ApiComponentVersionEnvVarExamplesIdDelete Removes the ComponentVersionEnvVarExample resource.

Removes the ComponentVersionEnvVarExample resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ComponentVersionEnvVarExample identifier
 @return ApiApiComponentVersionEnvVarExamplesIdDeleteRequest
*/
func (a *ComponentVersionEnvVarExampleApiService) ApiComponentVersionEnvVarExamplesIdDelete(ctx context.Context, id string) ApiApiComponentVersionEnvVarExamplesIdDeleteRequest {
	return ApiApiComponentVersionEnvVarExamplesIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ComponentVersionEnvVarExampleApiService) ApiComponentVersionEnvVarExamplesIdDeleteExecute(r ApiApiComponentVersionEnvVarExamplesIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionEnvVarExampleApiService.ApiComponentVersionEnvVarExamplesIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_version_env_var_examples/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiComponentVersionEnvVarExamplesIdGetRequest struct {
	ctx context.Context
	ApiService *ComponentVersionEnvVarExampleApiService
	id string
}

func (r ApiApiComponentVersionEnvVarExamplesIdGetRequest) Execute() (*ComponentVersionEnvVarExample, *http.Response, error) {
	return r.ApiService.ApiComponentVersionEnvVarExamplesIdGetExecute(r)
}

/*
ApiComponentVersionEnvVarExamplesIdGet Retrieves a ComponentVersionEnvVarExample resource.

Retrieves a ComponentVersionEnvVarExample resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ComponentVersionEnvVarExample identifier
 @return ApiApiComponentVersionEnvVarExamplesIdGetRequest
*/
func (a *ComponentVersionEnvVarExampleApiService) ApiComponentVersionEnvVarExamplesIdGet(ctx context.Context, id string) ApiApiComponentVersionEnvVarExamplesIdGetRequest {
	return ApiApiComponentVersionEnvVarExamplesIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ComponentVersionEnvVarExample
func (a *ComponentVersionEnvVarExampleApiService) ApiComponentVersionEnvVarExamplesIdGetExecute(r ApiApiComponentVersionEnvVarExamplesIdGetRequest) (*ComponentVersionEnvVarExample, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComponentVersionEnvVarExample
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionEnvVarExampleApiService.ApiComponentVersionEnvVarExamplesIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_version_env_var_examples/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiComponentVersionEnvVarExamplesIdPatchRequest struct {
	ctx context.Context
	ApiService *ComponentVersionEnvVarExampleApiService
	id string
	componentVersionEnvVarExample *ComponentVersionEnvVarExample
}

// The updated ComponentVersionEnvVarExample resource
func (r ApiApiComponentVersionEnvVarExamplesIdPatchRequest) ComponentVersionEnvVarExample(componentVersionEnvVarExample ComponentVersionEnvVarExample) ApiApiComponentVersionEnvVarExamplesIdPatchRequest {
	r.componentVersionEnvVarExample = &componentVersionEnvVarExample
	return r
}

func (r ApiApiComponentVersionEnvVarExamplesIdPatchRequest) Execute() (*ComponentVersionEnvVarExample, *http.Response, error) {
	return r.ApiService.ApiComponentVersionEnvVarExamplesIdPatchExecute(r)
}

/*
ApiComponentVersionEnvVarExamplesIdPatch Updates the ComponentVersionEnvVarExample resource.

Updates the ComponentVersionEnvVarExample resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ComponentVersionEnvVarExample identifier
 @return ApiApiComponentVersionEnvVarExamplesIdPatchRequest
*/
func (a *ComponentVersionEnvVarExampleApiService) ApiComponentVersionEnvVarExamplesIdPatch(ctx context.Context, id string) ApiApiComponentVersionEnvVarExamplesIdPatchRequest {
	return ApiApiComponentVersionEnvVarExamplesIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ComponentVersionEnvVarExample
func (a *ComponentVersionEnvVarExampleApiService) ApiComponentVersionEnvVarExamplesIdPatchExecute(r ApiApiComponentVersionEnvVarExamplesIdPatchRequest) (*ComponentVersionEnvVarExample, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComponentVersionEnvVarExample
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionEnvVarExampleApiService.ApiComponentVersionEnvVarExamplesIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_version_env_var_examples/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentVersionEnvVarExample == nil {
		return localVarReturnValue, nil, reportError("componentVersionEnvVarExample is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentVersionEnvVarExample
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiComponentVersionEnvVarExamplesIdPutRequest struct {
	ctx context.Context
	ApiService *ComponentVersionEnvVarExampleApiService
	id string
	componentVersionEnvVarExample *ComponentVersionEnvVarExample
}

// The updated ComponentVersionEnvVarExample resource
func (r ApiApiComponentVersionEnvVarExamplesIdPutRequest) ComponentVersionEnvVarExample(componentVersionEnvVarExample ComponentVersionEnvVarExample) ApiApiComponentVersionEnvVarExamplesIdPutRequest {
	r.componentVersionEnvVarExample = &componentVersionEnvVarExample
	return r
}

func (r ApiApiComponentVersionEnvVarExamplesIdPutRequest) Execute() (*ComponentVersionEnvVarExample, *http.Response, error) {
	return r.ApiService.ApiComponentVersionEnvVarExamplesIdPutExecute(r)
}

/*
ApiComponentVersionEnvVarExamplesIdPut Replaces the ComponentVersionEnvVarExample resource.

Replaces the ComponentVersionEnvVarExample resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ComponentVersionEnvVarExample identifier
 @return ApiApiComponentVersionEnvVarExamplesIdPutRequest
*/
func (a *ComponentVersionEnvVarExampleApiService) ApiComponentVersionEnvVarExamplesIdPut(ctx context.Context, id string) ApiApiComponentVersionEnvVarExamplesIdPutRequest {
	return ApiApiComponentVersionEnvVarExamplesIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ComponentVersionEnvVarExample
func (a *ComponentVersionEnvVarExampleApiService) ApiComponentVersionEnvVarExamplesIdPutExecute(r ApiApiComponentVersionEnvVarExamplesIdPutRequest) (*ComponentVersionEnvVarExample, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComponentVersionEnvVarExample
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionEnvVarExampleApiService.ApiComponentVersionEnvVarExamplesIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_version_env_var_examples/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentVersionEnvVarExample == nil {
		return localVarReturnValue, nil, reportError("componentVersionEnvVarExample is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentVersionEnvVarExample
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiComponentVersionEnvVarExamplesPostRequest struct {
	ctx context.Context
	ApiService *ComponentVersionEnvVarExampleApiService
	componentVersionEnvVarExample *ComponentVersionEnvVarExample
}

// The new ComponentVersionEnvVarExample resource
func (r ApiApiComponentVersionEnvVarExamplesPostRequest) ComponentVersionEnvVarExample(componentVersionEnvVarExample ComponentVersionEnvVarExample) ApiApiComponentVersionEnvVarExamplesPostRequest {
	r.componentVersionEnvVarExample = &componentVersionEnvVarExample
	return r
}

func (r ApiApiComponentVersionEnvVarExamplesPostRequest) Execute() (*ComponentVersionEnvVarExample, *http.Response, error) {
	return r.ApiService.ApiComponentVersionEnvVarExamplesPostExecute(r)
}

/*
ApiComponentVersionEnvVarExamplesPost Creates a ComponentVersionEnvVarExample resource.

Creates a ComponentVersionEnvVarExample resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiComponentVersionEnvVarExamplesPostRequest
*/
func (a *ComponentVersionEnvVarExampleApiService) ApiComponentVersionEnvVarExamplesPost(ctx context.Context) ApiApiComponentVersionEnvVarExamplesPostRequest {
	return ApiApiComponentVersionEnvVarExamplesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComponentVersionEnvVarExample
func (a *ComponentVersionEnvVarExampleApiService) ApiComponentVersionEnvVarExamplesPostExecute(r ApiApiComponentVersionEnvVarExamplesPostRequest) (*ComponentVersionEnvVarExample, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComponentVersionEnvVarExample
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionEnvVarExampleApiService.ApiComponentVersionEnvVarExamplesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_version_env_var_examples"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentVersionEnvVarExample == nil {
		return localVarReturnValue, nil, reportError("componentVersionEnvVarExample is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/hal+json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/hal+json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentVersionEnvVarExample
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
