/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.7.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// ComponentVersionEnvVarApiService ComponentVersionEnvVarApi service
type ComponentVersionEnvVarApiService service

type ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest struct {
	ctx                context.Context
	ApiService         *ComponentVersionEnvVarApiService
	page               *int32
	itemsPerPage       *int32
	componentVersion   *string
	componentVersion2  *[]string
	envVarValidations  *string
	envVarValidations2 *[]string
}

// The collection page number
func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest) Page(page int32) ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest) ComponentVersion(componentVersion string) ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest {
	r.componentVersion = &componentVersion
	return r
}

func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest) ComponentVersion2(componentVersion2 []string) ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest {
	r.componentVersion2 = &componentVersion2
	return r
}

func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest) EnvVarValidations(envVarValidations string) ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest {
	r.envVarValidations = &envVarValidations
	return r
}

func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest) EnvVarValidations2(envVarValidations2 []string) ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest {
	r.envVarValidations2 = &envVarValidations2
	return r
}

func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest) Execute() ([]ComponentVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiComponentVersionEnvVarsGetCollectionExecute(r)
}

/*
ApiComponentVersionEnvVarsGetCollection Retrieves the collection of ComponentVersionEnvVar resources.

Retrieves the collection of ComponentVersionEnvVar resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest
*/
func (a *ComponentVersionEnvVarApiService) ApiComponentVersionEnvVarsGetCollection(ctx context.Context) ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest {
	return ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ComponentVersionEnvVar
func (a *ComponentVersionEnvVarApiService) ApiComponentVersionEnvVarsGetCollectionExecute(r ComponentVersionEnvVarApiApiComponentVersionEnvVarsGetCollectionRequest) ([]ComponentVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ComponentVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionEnvVarApiService.ApiComponentVersionEnvVarsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_version_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	if r.componentVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "componentVersion", r.componentVersion, "")
	}
	if r.componentVersion2 != nil {
		t := *r.componentVersion2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "componentVersion[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "componentVersion[]", t, "multi")
		}
	}
	if r.envVarValidations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "envVarValidations", r.envVarValidations, "")
	}
	if r.envVarValidations2 != nil {
		t := *r.envVarValidations2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "envVarValidations[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "envVarValidations[]", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *ComponentVersionEnvVarApiService
	id         string
}

func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiComponentVersionEnvVarsIdDeleteExecute(r)
}

/*
ApiComponentVersionEnvVarsIdDelete Removes the ComponentVersionEnvVar resource.

Removes the ComponentVersionEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ComponentVersionEnvVar identifier
	@return ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdDeleteRequest
*/
func (a *ComponentVersionEnvVarApiService) ApiComponentVersionEnvVarsIdDelete(ctx context.Context, id string) ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdDeleteRequest {
	return ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ComponentVersionEnvVarApiService) ApiComponentVersionEnvVarsIdDeleteExecute(r ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionEnvVarApiService.ApiComponentVersionEnvVarsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_version_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdGetRequest struct {
	ctx        context.Context
	ApiService *ComponentVersionEnvVarApiService
	id         string
}

func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdGetRequest) Execute() (*ComponentVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiComponentVersionEnvVarsIdGetExecute(r)
}

/*
ApiComponentVersionEnvVarsIdGet Retrieves a ComponentVersionEnvVar resource.

Retrieves a ComponentVersionEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ComponentVersionEnvVar identifier
	@return ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdGetRequest
*/
func (a *ComponentVersionEnvVarApiService) ApiComponentVersionEnvVarsIdGet(ctx context.Context, id string) ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdGetRequest {
	return ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ComponentVersionEnvVar
func (a *ComponentVersionEnvVarApiService) ApiComponentVersionEnvVarsIdGetExecute(r ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdGetRequest) (*ComponentVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ComponentVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionEnvVarApiService.ApiComponentVersionEnvVarsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_version_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPatchRequest struct {
	ctx                    context.Context
	ApiService             *ComponentVersionEnvVarApiService
	componentVersionEnvVar *ComponentVersionEnvVar
	id                     string
}

// The updated ComponentVersionEnvVar resource
func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPatchRequest) ComponentVersionEnvVar(componentVersionEnvVar ComponentVersionEnvVar) ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPatchRequest {
	r.componentVersionEnvVar = &componentVersionEnvVar
	return r
}

func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPatchRequest) Execute() (*ComponentVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiComponentVersionEnvVarsIdPatchExecute(r)
}

/*
ApiComponentVersionEnvVarsIdPatch Updates the ComponentVersionEnvVar resource.

Updates the ComponentVersionEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ComponentVersionEnvVar identifier
	@return ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPatchRequest
*/
func (a *ComponentVersionEnvVarApiService) ApiComponentVersionEnvVarsIdPatch(ctx context.Context, id string) ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPatchRequest {
	return ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ComponentVersionEnvVar
func (a *ComponentVersionEnvVarApiService) ApiComponentVersionEnvVarsIdPatchExecute(r ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPatchRequest) (*ComponentVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ComponentVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionEnvVarApiService.ApiComponentVersionEnvVarsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_version_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentVersionEnvVar == nil {
		return localVarReturnValue, nil, reportError("componentVersionEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentVersionEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPutRequest struct {
	ctx                    context.Context
	ApiService             *ComponentVersionEnvVarApiService
	componentVersionEnvVar *ComponentVersionEnvVar
	id                     string
}

// The updated ComponentVersionEnvVar resource
func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPutRequest) ComponentVersionEnvVar(componentVersionEnvVar ComponentVersionEnvVar) ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPutRequest {
	r.componentVersionEnvVar = &componentVersionEnvVar
	return r
}

func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPutRequest) Execute() (*ComponentVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiComponentVersionEnvVarsIdPutExecute(r)
}

/*
ApiComponentVersionEnvVarsIdPut Replaces the ComponentVersionEnvVar resource.

Replaces the ComponentVersionEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ComponentVersionEnvVar identifier
	@return ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPutRequest
*/
func (a *ComponentVersionEnvVarApiService) ApiComponentVersionEnvVarsIdPut(ctx context.Context, id string) ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPutRequest {
	return ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ComponentVersionEnvVar
func (a *ComponentVersionEnvVarApiService) ApiComponentVersionEnvVarsIdPutExecute(r ComponentVersionEnvVarApiApiComponentVersionEnvVarsIdPutRequest) (*ComponentVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ComponentVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionEnvVarApiService.ApiComponentVersionEnvVarsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_version_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentVersionEnvVar == nil {
		return localVarReturnValue, nil, reportError("componentVersionEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentVersionEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComponentVersionEnvVarApiApiComponentVersionEnvVarsPostRequest struct {
	ctx                    context.Context
	ApiService             *ComponentVersionEnvVarApiService
	componentVersionEnvVar *ComponentVersionEnvVar
}

// The new ComponentVersionEnvVar resource
func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsPostRequest) ComponentVersionEnvVar(componentVersionEnvVar ComponentVersionEnvVar) ComponentVersionEnvVarApiApiComponentVersionEnvVarsPostRequest {
	r.componentVersionEnvVar = &componentVersionEnvVar
	return r
}

func (r ComponentVersionEnvVarApiApiComponentVersionEnvVarsPostRequest) Execute() (*ComponentVersionEnvVar, *http.Response, error) {
	return r.ApiService.ApiComponentVersionEnvVarsPostExecute(r)
}

/*
ApiComponentVersionEnvVarsPost Creates a ComponentVersionEnvVar resource.

Creates a ComponentVersionEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ComponentVersionEnvVarApiApiComponentVersionEnvVarsPostRequest
*/
func (a *ComponentVersionEnvVarApiService) ApiComponentVersionEnvVarsPost(ctx context.Context) ComponentVersionEnvVarApiApiComponentVersionEnvVarsPostRequest {
	return ComponentVersionEnvVarApiApiComponentVersionEnvVarsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ComponentVersionEnvVar
func (a *ComponentVersionEnvVarApiService) ApiComponentVersionEnvVarsPostExecute(r ComponentVersionEnvVarApiApiComponentVersionEnvVarsPostRequest) (*ComponentVersionEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ComponentVersionEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionEnvVarApiService.ApiComponentVersionEnvVarsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/component_version_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentVersionEnvVar == nil {
		return localVarReturnValue, nil, reportError("componentVersionEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/html"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentVersionEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
