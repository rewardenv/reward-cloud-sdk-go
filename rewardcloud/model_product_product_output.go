/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"encoding/json"
)

// ProductProductOutput Class Product
type ProductProductOutput struct {
	PaymentId NullableString `json:"paymentId,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Metadata []string `json:"metadata,omitempty"`
	IsActive NullableBool `json:"isActive,omitempty"`
	Prices []PriceProductOutput `json:"prices,omitempty"`
	DefaultPrice NullableProductProductOutputDefaultPrice `json:"defaultPrice,omitempty"`
	Region NullableString `json:"region,omitempty"`
}

// NewProductProductOutput instantiates a new ProductProductOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductProductOutput() *ProductProductOutput {
	this := ProductProductOutput{}
	return &this
}

// NewProductProductOutputWithDefaults instantiates a new ProductProductOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductProductOutputWithDefaults() *ProductProductOutput {
	this := ProductProductOutput{}
	return &this
}

// GetPaymentId returns the PaymentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductProductOutput) GetPaymentId() string {
	if o == nil || isNil(o.PaymentId.Get()) {
		var ret string
		return ret
	}
	return *o.PaymentId.Get()
}

// GetPaymentIdOk returns a tuple with the PaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductProductOutput) GetPaymentIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.PaymentId.Get(), o.PaymentId.IsSet()
}

// HasPaymentId returns a boolean if a field has been set.
func (o *ProductProductOutput) HasPaymentId() bool {
	if o != nil && o.PaymentId.IsSet() {
		return true
	}

	return false
}

// SetPaymentId gets a reference to the given NullableString and assigns it to the PaymentId field.
func (o *ProductProductOutput) SetPaymentId(v string) {
	o.PaymentId.Set(&v)
}
// SetPaymentIdNil sets the value for PaymentId to be an explicit nil
func (o *ProductProductOutput) SetPaymentIdNil() {
	o.PaymentId.Set(nil)
}

// UnsetPaymentId ensures that no value is present for PaymentId, not even an explicit nil
func (o *ProductProductOutput) UnsetPaymentId() {
	o.PaymentId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductProductOutput) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductProductOutput) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ProductProductOutput) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ProductProductOutput) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ProductProductOutput) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ProductProductOutput) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductProductOutput) GetDescription() string {
	if o == nil || isNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductProductOutput) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductProductOutput) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ProductProductOutput) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ProductProductOutput) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ProductProductOutput) UnsetDescription() {
	o.Description.Unset()
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductProductOutput) GetMetadata() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductProductOutput) GetMetadataOk() ([]string, bool) {
	if o == nil || isNil(o.Metadata) {
    return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ProductProductOutput) HasMetadata() bool {
	if o != nil && isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []string and assigns it to the Metadata field.
func (o *ProductProductOutput) SetMetadata(v []string) {
	o.Metadata = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductProductOutput) GetIsActive() bool {
	if o == nil || isNil(o.IsActive.Get()) {
		var ret bool
		return ret
	}
	return *o.IsActive.Get()
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductProductOutput) GetIsActiveOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.IsActive.Get(), o.IsActive.IsSet()
}

// HasIsActive returns a boolean if a field has been set.
func (o *ProductProductOutput) HasIsActive() bool {
	if o != nil && o.IsActive.IsSet() {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given NullableBool and assigns it to the IsActive field.
func (o *ProductProductOutput) SetIsActive(v bool) {
	o.IsActive.Set(&v)
}
// SetIsActiveNil sets the value for IsActive to be an explicit nil
func (o *ProductProductOutput) SetIsActiveNil() {
	o.IsActive.Set(nil)
}

// UnsetIsActive ensures that no value is present for IsActive, not even an explicit nil
func (o *ProductProductOutput) UnsetIsActive() {
	o.IsActive.Unset()
}

// GetPrices returns the Prices field value if set, zero value otherwise.
func (o *ProductProductOutput) GetPrices() []PriceProductOutput {
	if o == nil || isNil(o.Prices) {
		var ret []PriceProductOutput
		return ret
	}
	return o.Prices
}

// GetPricesOk returns a tuple with the Prices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductProductOutput) GetPricesOk() ([]PriceProductOutput, bool) {
	if o == nil || isNil(o.Prices) {
    return nil, false
	}
	return o.Prices, true
}

// HasPrices returns a boolean if a field has been set.
func (o *ProductProductOutput) HasPrices() bool {
	if o != nil && !isNil(o.Prices) {
		return true
	}

	return false
}

// SetPrices gets a reference to the given []PriceProductOutput and assigns it to the Prices field.
func (o *ProductProductOutput) SetPrices(v []PriceProductOutput) {
	o.Prices = v
}

// GetDefaultPrice returns the DefaultPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductProductOutput) GetDefaultPrice() ProductProductOutputDefaultPrice {
	if o == nil || isNil(o.DefaultPrice.Get()) {
		var ret ProductProductOutputDefaultPrice
		return ret
	}
	return *o.DefaultPrice.Get()
}

// GetDefaultPriceOk returns a tuple with the DefaultPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductProductOutput) GetDefaultPriceOk() (*ProductProductOutputDefaultPrice, bool) {
	if o == nil {
    return nil, false
	}
	return o.DefaultPrice.Get(), o.DefaultPrice.IsSet()
}

// HasDefaultPrice returns a boolean if a field has been set.
func (o *ProductProductOutput) HasDefaultPrice() bool {
	if o != nil && o.DefaultPrice.IsSet() {
		return true
	}

	return false
}

// SetDefaultPrice gets a reference to the given NullableProductProductOutputDefaultPrice and assigns it to the DefaultPrice field.
func (o *ProductProductOutput) SetDefaultPrice(v ProductProductOutputDefaultPrice) {
	o.DefaultPrice.Set(&v)
}
// SetDefaultPriceNil sets the value for DefaultPrice to be an explicit nil
func (o *ProductProductOutput) SetDefaultPriceNil() {
	o.DefaultPrice.Set(nil)
}

// UnsetDefaultPrice ensures that no value is present for DefaultPrice, not even an explicit nil
func (o *ProductProductOutput) UnsetDefaultPrice() {
	o.DefaultPrice.Unset()
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductProductOutput) GetRegion() string {
	if o == nil || isNil(o.Region.Get()) {
		var ret string
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductProductOutput) GetRegionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *ProductProductOutput) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullableString and assigns it to the Region field.
func (o *ProductProductOutput) SetRegion(v string) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *ProductProductOutput) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *ProductProductOutput) UnsetRegion() {
	o.Region.Unset()
}

func (o ProductProductOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PaymentId.IsSet() {
		toSerialize["paymentId"] = o.PaymentId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.IsActive.IsSet() {
		toSerialize["isActive"] = o.IsActive.Get()
	}
	if !isNil(o.Prices) {
		toSerialize["prices"] = o.Prices
	}
	if o.DefaultPrice.IsSet() {
		toSerialize["defaultPrice"] = o.DefaultPrice.Get()
	}
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProductProductOutput struct {
	value *ProductProductOutput
	isSet bool
}

func (v NullableProductProductOutput) Get() *ProductProductOutput {
	return v.value
}

func (v *NullableProductProductOutput) Set(val *ProductProductOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableProductProductOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableProductProductOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductProductOutput(val *ProductProductOutput) *NullableProductProductOutput {
	return &NullableProductProductOutput{value: val, isSet: true}
}

func (v NullableProductProductOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductProductOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


