/*
Reward Cloud

It is an API for Reward Cloud project in ITG Commerce

API version: v0.6.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rewardcloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// ProjectEnvVarApiService ProjectEnvVarApi service
type ProjectEnvVarApiService service

type ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest struct {
	ctx          context.Context
	ApiService   *ProjectEnvVarApiService
	page         *int32
	itemsPerPage *int32
	project      *string
	project2     *[]string
	envVarType   *string
	envVarType2  *[]string
}

// The collection page number
func (r ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest) Page(page int32) ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest {
	r.page = &page
	return r
}

// The number of items per page
func (r ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest) ItemsPerPage(itemsPerPage int32) ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest) Project(project string) ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest {
	r.project = &project
	return r
}

func (r ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest) Project2(project2 []string) ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest {
	r.project2 = &project2
	return r
}

func (r ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest) EnvVarType(envVarType string) ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest {
	r.envVarType = &envVarType
	return r
}

func (r ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest) EnvVarType2(envVarType2 []string) ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest {
	r.envVarType2 = &envVarType2
	return r
}

func (r ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest) Execute() ([]ProjectEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectEnvVarsGetCollectionExecute(r)
}

/*
ApiProjectEnvVarsGetCollection Retrieves the collection of ProjectEnvVar resources.

Retrieves the collection of ProjectEnvVar resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest
*/
func (a *ProjectEnvVarApiService) ApiProjectEnvVarsGetCollection(ctx context.Context) ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest {
	return ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ProjectEnvVar
func (a *ProjectEnvVarApiService) ApiProjectEnvVarsGetCollectionExecute(r ProjectEnvVarApiApiProjectEnvVarsGetCollectionRequest) ([]ProjectEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProjectEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectEnvVarApiService.ApiProjectEnvVarsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.itemsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemsPerPage", r.itemsPerPage, "")
	}
	if r.project != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "project", r.project, "")
	}
	if r.project2 != nil {
		t := *r.project2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "project[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "project[]", t, "multi")
		}
	}
	if r.envVarType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "envVarType", r.envVarType, "")
	}
	if r.envVarType2 != nil {
		t := *r.envVarType2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "envVarType[]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "envVarType[]", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectEnvVarApiApiProjectEnvVarsIdDeleteRequest struct {
	ctx        context.Context
	ApiService *ProjectEnvVarApiService
	id         string
}

func (r ProjectEnvVarApiApiProjectEnvVarsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiProjectEnvVarsIdDeleteExecute(r)
}

/*
ApiProjectEnvVarsIdDelete Removes the ProjectEnvVar resource.

Removes the ProjectEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectEnvVar identifier
	@return ProjectEnvVarApiApiProjectEnvVarsIdDeleteRequest
*/
func (a *ProjectEnvVarApiService) ApiProjectEnvVarsIdDelete(ctx context.Context, id string) ProjectEnvVarApiApiProjectEnvVarsIdDeleteRequest {
	return ProjectEnvVarApiApiProjectEnvVarsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ProjectEnvVarApiService) ApiProjectEnvVarsIdDeleteExecute(r ProjectEnvVarApiApiProjectEnvVarsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectEnvVarApiService.ApiProjectEnvVarsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ProjectEnvVarApiApiProjectEnvVarsIdGetRequest struct {
	ctx        context.Context
	ApiService *ProjectEnvVarApiService
	id         string
}

func (r ProjectEnvVarApiApiProjectEnvVarsIdGetRequest) Execute() (*ProjectEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectEnvVarsIdGetExecute(r)
}

/*
ApiProjectEnvVarsIdGet Retrieves a ProjectEnvVar resource.

Retrieves a ProjectEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectEnvVar identifier
	@return ProjectEnvVarApiApiProjectEnvVarsIdGetRequest
*/
func (a *ProjectEnvVarApiService) ApiProjectEnvVarsIdGet(ctx context.Context, id string) ProjectEnvVarApiApiProjectEnvVarsIdGetRequest {
	return ProjectEnvVarApiApiProjectEnvVarsIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectEnvVar
func (a *ProjectEnvVarApiService) ApiProjectEnvVarsIdGetExecute(r ProjectEnvVarApiApiProjectEnvVarsIdGetRequest) (*ProjectEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectEnvVarApiService.ApiProjectEnvVarsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectEnvVarApiApiProjectEnvVarsIdPatchRequest struct {
	ctx           context.Context
	ApiService    *ProjectEnvVarApiService
	projectEnvVar *ProjectEnvVar
	id            string
}

// The updated ProjectEnvVar resource
func (r ProjectEnvVarApiApiProjectEnvVarsIdPatchRequest) ProjectEnvVar(projectEnvVar ProjectEnvVar) ProjectEnvVarApiApiProjectEnvVarsIdPatchRequest {
	r.projectEnvVar = &projectEnvVar
	return r
}

func (r ProjectEnvVarApiApiProjectEnvVarsIdPatchRequest) Execute() (*ProjectEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectEnvVarsIdPatchExecute(r)
}

/*
ApiProjectEnvVarsIdPatch Updates the ProjectEnvVar resource.

Updates the ProjectEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectEnvVar identifier
	@return ProjectEnvVarApiApiProjectEnvVarsIdPatchRequest
*/
func (a *ProjectEnvVarApiService) ApiProjectEnvVarsIdPatch(ctx context.Context, id string) ProjectEnvVarApiApiProjectEnvVarsIdPatchRequest {
	return ProjectEnvVarApiApiProjectEnvVarsIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectEnvVar
func (a *ProjectEnvVarApiService) ApiProjectEnvVarsIdPatchExecute(r ProjectEnvVarApiApiProjectEnvVarsIdPatchRequest) (*ProjectEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectEnvVarApiService.ApiProjectEnvVarsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectEnvVar == nil {
		return localVarReturnValue, nil, reportError("projectEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectEnvVarApiApiProjectEnvVarsIdPutRequest struct {
	ctx           context.Context
	ApiService    *ProjectEnvVarApiService
	projectEnvVar *ProjectEnvVar
	id            string
}

// The updated ProjectEnvVar resource
func (r ProjectEnvVarApiApiProjectEnvVarsIdPutRequest) ProjectEnvVar(projectEnvVar ProjectEnvVar) ProjectEnvVarApiApiProjectEnvVarsIdPutRequest {
	r.projectEnvVar = &projectEnvVar
	return r
}

func (r ProjectEnvVarApiApiProjectEnvVarsIdPutRequest) Execute() (*ProjectEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectEnvVarsIdPutExecute(r)
}

/*
ApiProjectEnvVarsIdPut Replaces the ProjectEnvVar resource.

Replaces the ProjectEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectEnvVar identifier
	@return ProjectEnvVarApiApiProjectEnvVarsIdPutRequest
*/
func (a *ProjectEnvVarApiService) ApiProjectEnvVarsIdPut(ctx context.Context, id string) ProjectEnvVarApiApiProjectEnvVarsIdPutRequest {
	return ProjectEnvVarApiApiProjectEnvVarsIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectEnvVar
func (a *ProjectEnvVarApiService) ApiProjectEnvVarsIdPutExecute(r ProjectEnvVarApiApiProjectEnvVarsIdPutRequest) (*ProjectEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectEnvVarApiService.ApiProjectEnvVarsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_env_vars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectEnvVar == nil {
		return localVarReturnValue, nil, reportError("projectEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectEnvVarApiApiProjectEnvVarsPostRequest struct {
	ctx           context.Context
	ApiService    *ProjectEnvVarApiService
	projectEnvVar *ProjectEnvVar
}

// The new ProjectEnvVar resource
func (r ProjectEnvVarApiApiProjectEnvVarsPostRequest) ProjectEnvVar(projectEnvVar ProjectEnvVar) ProjectEnvVarApiApiProjectEnvVarsPostRequest {
	r.projectEnvVar = &projectEnvVar
	return r
}

func (r ProjectEnvVarApiApiProjectEnvVarsPostRequest) Execute() (*ProjectEnvVar, *http.Response, error) {
	return r.ApiService.ApiProjectEnvVarsPostExecute(r)
}

/*
ApiProjectEnvVarsPost Creates a ProjectEnvVar resource.

Creates a ProjectEnvVar resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProjectEnvVarApiApiProjectEnvVarsPostRequest
*/
func (a *ProjectEnvVarApiService) ApiProjectEnvVarsPost(ctx context.Context) ProjectEnvVarApiApiProjectEnvVarsPostRequest {
	return ProjectEnvVarApiApiProjectEnvVarsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ProjectEnvVar
func (a *ProjectEnvVarApiService) ApiProjectEnvVarsPostExecute(r ProjectEnvVarApiApiProjectEnvVarsPostRequest) (*ProjectEnvVar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectEnvVar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectEnvVarApiService.ApiProjectEnvVarsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/project_env_vars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectEnvVar == nil {
		return localVarReturnValue, nil, reportError("projectEnvVar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectEnvVar
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
